// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --function-signature
// Check that the generated IR for this code does not add a byval attribute to the call argument
// Previous versions of Clang would incorrectly add a byval attribute that was then ignored in the backend:
// declare inreg { i8 addrspace(200)* } @_ZN3JSC2VM14throwExceptionEPNS_9ExecStateENS_7JSValueE(%"class.JSC::VM" addrspace(200)*, %"class.JSC::ExecState" addrspace(200)*, %"class.JSC::JSValue" addrspace(200)* byval align 16) #2
// The backend no longer includes the hack to ignore byval, so check that passing by value does not add the byval attribute

// RUN: %cheri_purecap_cc1 -O2 -emit-llvm -o - %s | FileCheck %s --check-prefixes CHECK,MIPS
// RUN: %riscv64_cheri_purecap_cc1 -O2 -emit-llvm -o - %s | FileCheck %s --check-prefixes CHECK,RV64

union JsValue {
  long l;
  __uintcap_t x;
};
struct ExecState;

JsValue throwException(ExecState *, JsValue);

// CHECK-LABEL: define {{[^@]+}}@_Z4testv()
// MIPS: call inreg i8 addrspace(200)* @_Z14throwExceptionP9ExecState7JsValue(%struct.ExecState addrspace(200)* null, i8 addrspace(200)* inreg %{{[a-z.0-9]+}})
// RV64: call %union.JsValue @_Z14throwExceptionP9ExecState7JsValue(%struct.ExecState addrspace(200)* null, i8 addrspace(200)* %{{[a-z.0-9]+}})
//
// MIPS: declare inreg i8 addrspace(200)* @_Z14throwExceptionP9ExecState7JsValue(%struct.ExecState addrspace(200)*, i8 addrspace(200)* inreg)
// RV64: declare %union.JsValue @_Z14throwExceptionP9ExecState7JsValue(%struct.ExecState addrspace(200)*, i8 addrspace(200)*)
bool test() {
  JsValue j{1};
  JsValue j2 = throwException(nullptr, j);
  return j.x == j2.x;
}

long ref(JsValue &);
long cref(const JsValue &);
long rref(JsValue &&);
long crref(const JsValue &&);
long ptr(union JsValue *);
long cptr(const JsValue *);
long val(JsValue);

// CHECK-LABEL: define {{[^@]+}}@_Z8test_refv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z3refR7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16) %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z3refR7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16))
long test_ref() {
  JsValue j{1};
  return ref(j);
}

// CHECK-LABEL: define {{[^@]+}}@_Z9test_crefv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z4crefRK7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16) %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z4crefRK7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16))
long test_cref() {
  JsValue j{1};
  return cref(j);
}

// CHECK-LABEL: define {{[^@]+}}@_Z9test_rrefv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z4rrefO7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16) %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z4rrefO7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16))
long test_rref() { return rref(JsValue{1}); }

// CHECK-LABEL: define {{[^@]+}}@_Z10test_crrefv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z5crrefOK7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16) %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z5crrefOK7JsValue(%union.JsValue addrspace(200)* nonnull align 16 dereferenceable(16))
long test_crref() { return crref(JsValue{1}); }

// CHECK-LABEL: define {{[^@]+}}@_Z8test_ptrv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z3ptrP7JsValue(%union.JsValue addrspace(200)* nonnull %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z3ptrP7JsValue(%union.JsValue addrspace(200)*)
long test_ptr() {
  JsValue j{1};
  return ptr(&j);
}

// CHECK-LABEL: define {{[^@]+}}@_Z9test_cptrv()
// CHECK:    [[CALL:%.*]] = call i64 @_Z4cptrPK7JsValue(%union.JsValue addrspace(200)* nonnull %{{[a-z.0-9]+}})
// CHECK: declare i64 @_Z4cptrPK7JsValue(%union.JsValue addrspace(200)*)
long test_cptr() {
  JsValue j{1};
  return cptr(&j);
}

// CHECK-LABEL: define {{[^@]+}}@_Z8test_valv()
// MIPS:     call i64 @_Z3val7JsValue(i8 addrspace(200)* inreg %{{[a-z.0-9]+}})
// RV64:     call i64 @_Z3val7JsValue(i8 addrspace(200)*  %{{[a-z.0-9]+}})
// MIPS: declare i64 @_Z3val7JsValue(i8 addrspace(200)* inreg)
// RV64: declare i64 @_Z3val7JsValue(i8 addrspace(200)*)
long test_val() {
  JsValue j{1};
  return val(j);
}
