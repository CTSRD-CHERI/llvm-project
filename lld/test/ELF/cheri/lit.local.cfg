import pprint
import subprocess

import lit.util
import lit.llvm.config
# from lit.llvm import llvm_config
# FIXME: why do I need to create a new LLVMConfig here, is there no way to use the parent one?
local_llvm_config = lit.llvm.config.LLVMConfig(lit_config, config)

config.name = 'lld'
config.suffixes = ['.test', '.s', '.ll', '.c', '.cpp']

# print 'CHERI'


def add_sub(value, replacement):
   config.substitutions.append( (value, replacement) )

def add_invalid_sub(sub, replacement):
    add_sub(' ' + sub + ' ', """*** Do not use '%s' in tests, use '%s'. ***""" %
          (sub, replacement) )

config.lld = lit.util.which('ld.lld', config.llvm_tools_dir)


# These substitutions rely on %clang, etc. so must come before even if clang isn't found
add_sub('%clang_link_purecap ', '%cheri_purecap_clang ' +
        '-fuse-ld=' + config.lld + ' -nostdlib -Wl,-melf64btsmip_cheri_fbsd ')
local_llvm_config.add_cheri_tool_substitutions(['llvm-mc'])
local_llvm_config.use_clang(required=False)
if config.clang:
    if lit_config.debug:
        print('Found clang:', config.clang)
    config.available_features.add('clang')
    # check for cap-table support:
    stdout, stderr = local_llvm_config.get_process_output([config.clang, '-cheri-cap-table-abi=pcrel', '--version'])
    if "unknown argument" not in stderr:
        config.available_features.add('cheri-cap-table')
    add_sub('%legacy_caprelocs_flag_cc1', '-mllvm -legacy-cheri-cap-relocs -mllvm -cheri-cap-table-abi=legacy ')
    add_sub('%legacy_caprelocs_flag', '-mllvm -legacy-cheri-cap-relocs -cheri-cap-table-abi=legacy ')
else:
    lit_config.note('Could not find clang -> skipping most CHERI linker tests!')
cheri_lld_cmd_base = config.lld + ' --eh-frame-hdr --enable-new-dtags -melf64btsmip_cheri_fbsd '
# TODO: do we still need --no-warn-mismatch?
add_sub('%cheri_lld_shlib', cheri_lld_cmd_base + '-Bshareable ')
add_sub('%cheri_lld_static', cheri_lld_cmd_base + '-Bstatic ')
add_sub('%cheri_lld_dynamic', cheri_lld_cmd_base + '-Bdynamic '
        '-dynamic-linker /libexec/ld-elf.so.1 ')
# TODO: -pie and -pie -static

config.capsizefix = lit.util.which('capsizefix', config.llvm_tools_dir)
if config.capsizefix:
    lit_config.note('using capsizefix: ' + config.capsizefix)
    add_sub('%capsizefix ', config.capsizefix + ' ')

add_invalid_sub('capsizefix', '%capsizefix')
