; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; This test case previously triggered assertions in SROA ("Partitions must span some bytes!")
; RUN: opt -mtriple=mips64-unknown-freebsd -mcpu=cheri128 -mattr=+cheri128 \
; RUN:     -S -passes=sroa < %s \
; RUN:     | FileCheck %s
target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128"

%struct = type { i32, i32, i32, i32, i32 addrspace(200)*, i32 addrspace(200)* }

declare void @llvm.lifetime.start.p0i8(i64, i8*)
declare void @llvm.lifetime.end.p0i8(i64, i8*)
declare void @llvm.memcpy.p0i8.p0i8.i64(i8*, i8*, i64, i1)

define void @foo() {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BUF_SROA_0:%.*]] = alloca [12 x i8], align 4
; CHECK-NEXT:    [[A_SROA_0:%.*]] = alloca { i32, i32, i32, i32 }, align 16
; CHECK-NEXT:    [[B_SROA_0:%.*]] = alloca { i32, i32, i32, i32 }, align 16
; CHECK-NEXT:    [[TMPA_SROA_0:%.*]] = alloca { i32, i32, i32, i32 }, align 16
; CHECK-NEXT:    [[TMPB_SROA_0:%.*]] = alloca { i32, i32, i32, i32 }, align 16
; CHECK-NEXT:    [[BUF_SROA_0_0_BUF_CAST_SROA_IDX10:%.*]] = getelementptr inbounds [12 x i8], [12 x i8]* [[BUF_SROA_0]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 12, i8* [[BUF_SROA_0_0_BUF_CAST_SROA_IDX10]])
; CHECK-NEXT:    [[BUF_SROA_0_0_TMPA_SROA_0_4_TMPA_CAST_4_SROA_CAST_SROA_IDX:%.*]] = getelementptr inbounds { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* [[TMPA_SROA_0]], i64 0, i32 1
; CHECK-NEXT:    [[BUF_SROA_0_0_TMPA_SROA_0_4_TMPA_CAST_4_SROA_CAST_SROA_CAST:%.*]] = bitcast i32* [[BUF_SROA_0_0_TMPA_SROA_0_4_TMPA_CAST_4_SROA_CAST_SROA_IDX]] to i8*
; CHECK-NEXT:    [[BUF_SROA_0_0_BUF_CAST_SROA_IDX7:%.*]] = getelementptr inbounds [12 x i8], [12 x i8]* [[BUF_SROA_0]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[BUF_SROA_0_0_TMPA_SROA_0_4_TMPA_CAST_4_SROA_CAST_SROA_CAST]], i8* align 4 [[BUF_SROA_0_0_BUF_CAST_SROA_IDX7]], i64 12, i1 false)
; CHECK-NEXT:    [[BUF_SROA_0_0_TMPB_SROA_0_4_TMPB_CAST_4_SROA_CAST_SROA_IDX:%.*]] = getelementptr inbounds { i32, i32, i32, i32 }, { i32, i32, i32, i32 }* [[TMPB_SROA_0]], i64 0, i32 1
; CHECK-NEXT:    [[BUF_SROA_0_0_TMPB_SROA_0_4_TMPB_CAST_4_SROA_CAST_SROA_CAST:%.*]] = bitcast i32* [[BUF_SROA_0_0_TMPB_SROA_0_4_TMPB_CAST_4_SROA_CAST_SROA_IDX]] to i8*
; CHECK-NEXT:    [[BUF_SROA_0_0_BUF_CAST_SROA_IDX6:%.*]] = getelementptr inbounds [12 x i8], [12 x i8]* [[BUF_SROA_0]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[BUF_SROA_0_0_TMPB_SROA_0_4_TMPB_CAST_4_SROA_CAST_SROA_CAST]], i8* align 4 [[BUF_SROA_0_0_BUF_CAST_SROA_IDX6]], i64 12, i1 false)
; CHECK-NEXT:    [[BUF_SROA_0_0_BUF_CAST_SROA_IDX11:%.*]] = getelementptr inbounds [12 x i8], [12 x i8]* [[BUF_SROA_0]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 12, i8* [[BUF_SROA_0_0_BUF_CAST_SROA_IDX11]])
; CHECK-NEXT:    [[A_SROA_0_0_TMPA_SROA_0_0_TMPA_CAST_SROA_CAST_SROA_CAST:%.*]] = bitcast { i32, i32, i32, i32 }* [[TMPA_SROA_0]] to i8*
; CHECK-NEXT:    [[A_SROA_0_0_A_CAST_SROA_CAST:%.*]] = bitcast { i32, i32, i32, i32 }* [[A_SROA_0]] to i8*
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[A_SROA_0_0_A_CAST_SROA_CAST]], i8* align 16 [[A_SROA_0_0_TMPA_SROA_0_0_TMPA_CAST_SROA_CAST_SROA_CAST]], i64 16, i1 false)
; CHECK-NEXT:    [[B_SROA_0_0_TMPB_SROA_0_0_TMPB_CAST_SROA_CAST_SROA_CAST:%.*]] = bitcast { i32, i32, i32, i32 }* [[TMPB_SROA_0]] to i8*
; CHECK-NEXT:    [[B_SROA_0_0_B_CAST_SROA_CAST:%.*]] = bitcast { i32, i32, i32, i32 }* [[B_SROA_0]] to i8*
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 [[B_SROA_0_0_B_CAST_SROA_CAST]], i8* align 16 [[B_SROA_0_0_TMPB_SROA_0_0_TMPB_CAST_SROA_CAST_SROA_CAST]], i64 16, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %buf = alloca [44 x i8], align 4
  %a = alloca %struct, align 16
  %b = alloca %struct, align 16
  %tmpa = alloca %struct, align 16
  %tmpb = alloca %struct, align 16
  %tmpa.cast = bitcast %struct* %tmpa to i8*
  %tmpa.cast.4 = getelementptr inbounds i8, i8* %tmpa.cast, i64 4
  %buf.cast = getelementptr inbounds [44 x i8], [44 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 44, i8* %buf.cast)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %tmpa.cast.4, i8* align 4 %buf.cast, i64 44, i1 false)
  %tmpb.cast = bitcast %struct* %tmpb to i8*
  %tmpb.cast.4 = getelementptr inbounds i8, i8* %tmpb.cast, i64 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %tmpb.cast.4, i8* align 4 %buf.cast, i64 44, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 44, i8* %buf.cast)
  %a.cast = bitcast %struct* %a to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %a.cast, i8* align 16 %tmpa.cast, i64 48, i1 false)
  %b.cast = bitcast %struct* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %b.cast, i8* align 16 %tmpb.cast, i64 48, i1 false)
  ret void
}
