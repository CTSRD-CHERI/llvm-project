; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;; Aligning variable-size stack allocations uses a CRRL intrinsic.
;; However, CRRL is not part of the RISC-V Standard -- check that we expand it.
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s | FileCheck %s --check-prefix=XCHERI
; RUN: %riscv64_cheri_purecap_llc -mattr=+xcheri-std-compat -verify-machineinstrs < %s | FileCheck %s --check-prefix=STD-COMPAT

define internal i64 @cmd_stackstomp(i64 %0) addrspace(200) nounwind {
; XCHERI-LABEL: cmd_stackstomp:
; XCHERI:       # %bb.0: # %entry
; XCHERI-NEXT:    cincoffset csp, csp, -32
; XCHERI-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; XCHERI-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; XCHERI-NEXT:    cincoffset cs0, csp, 32
; XCHERI-NEXT:    addi a0, a0, 15
; XCHERI-NEXT:    andi a0, a0, -16
; XCHERI-NEXT:    crrl a1, a0
; XCHERI-NEXT:    sub a1, sp, a1
; XCHERI-NEXT:    cram a0, a0
; XCHERI-NEXT:    and a0, a1, a0
; XCHERI-NEXT:    csetaddr csp, csp, a0
; XCHERI-NEXT:    li a0, 0
; XCHERI-NEXT:    cincoffset csp, cs0, -32
; XCHERI-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; XCHERI-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; XCHERI-NEXT:    cincoffset csp, csp, 32
; XCHERI-NEXT:    cret
;
; STD-COMPAT-LABEL: cmd_stackstomp:
; STD-COMPAT:       # %bb.0: # %entry
; STD-COMPAT-NEXT:    cincoffset csp, csp, -32
; STD-COMPAT-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; STD-COMPAT-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; STD-COMPAT-NEXT:    cincoffset cs0, csp, 32
; STD-COMPAT-NEXT:    addi a0, a0, 15
; STD-COMPAT-NEXT:    andi a0, a0, -16
; STD-COMPAT-NEXT:    cram a1, a0
; STD-COMPAT-NEXT:    not a2, a1
; STD-COMPAT-NEXT:    add a0, a0, a2
; STD-COMPAT-NEXT:    and a0, a0, a1
; STD-COMPAT-NEXT:    sub a0, sp, a0
; STD-COMPAT-NEXT:    and a0, a0, a1
; STD-COMPAT-NEXT:    csetaddr csp, csp, a0
; STD-COMPAT-NEXT:    li a0, 0
; STD-COMPAT-NEXT:    cincoffset csp, cs0, -32
; STD-COMPAT-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; STD-COMPAT-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; STD-COMPAT-NEXT:    cincoffset csp, csp, 32
; STD-COMPAT-NEXT:    cret
entry:
  br label %if.then
if.then:
  %vla = alloca i8, i64 %0, align 1, addrspace(200)
  %ret = ptrtoint i8 addrspace(200)* %vla to i64
  ret i64 0
}
