; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;; CGetOffset is not part of of the standard, check that we emit (addr - base) instead.
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s | FileCheck %s --check-prefix=XCHERI
; RUN: %riscv64_cheri_purecap_llc -mattr=+xcheri-std-compat -verify-machineinstrs < %s | FileCheck %s --check-prefix=STD-COMPAT

define internal i64 @test(ptr addrspace(200) %dst, ptr addrspace(200) %cap) addrspace(200) nounwind {
; XCHERI-LABEL: test:
; XCHERI:       # %bb.0: # %entry
; XCHERI-NEXT:    cgetoffset a1, ca1
; XCHERI-NEXT:    csd a1, 0(ca0)
; XCHERI-NEXT:    mv a0, a1
; XCHERI-NEXT:    cret
;
; STD-COMPAT-LABEL: test:
; STD-COMPAT:       # %bb.0: # %entry
; STD-COMPAT-NEXT:    cgetbase a2, ca1
; STD-COMPAT-NEXT:    sub a1, a1, a2
; STD-COMPAT-NEXT:    csd a1, 0(ca0)
; STD-COMPAT-NEXT:    mv a0, a1
; STD-COMPAT-NEXT:    cret
entry:
  %addr = call addrspace(200) i64 @llvm.cheri.cap.offset.get.i64(ptr addrspace(200) %cap)
  store i64 %addr, ptr addrspace(200) %dst, align 8
  ret i64 %addr
}

declare i64 @llvm.cheri.cap.offset.get.i64(ptr addrspace(200)) addrspace(200)

