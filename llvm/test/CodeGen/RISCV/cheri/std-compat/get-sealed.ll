; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;; CGetSealed is not part of the standard, check that we emit an otype != unsealed comparison instead.

; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s | FileCheck %s --check-prefix=XCHERI
; RUN: %riscv64_cheri_purecap_llc -mattr=+xcheri-std-compat -verify-machineinstrs < %s | FileCheck %s --check-prefix=STD-COMPAT

define internal i64 @test(ptr addrspace(200) %cap) addrspace(200) nounwind {
; XCHERI-LABEL: test:
; XCHERI:       # %bb.0: # %entry
; XCHERI-NEXT:    cgetsealed a0, ca0
; XCHERI-NEXT:    beqz a0, .LBB0_2
; XCHERI-NEXT:  # %bb.1: # %if.then
; XCHERI-NEXT:    li a0, 4
; XCHERI-NEXT:    cret
; XCHERI-NEXT:  .LBB0_2: # %if.end
; XCHERI-NEXT:    li a0, 2
; XCHERI-NEXT:    cret
;
; STD-COMPAT-LABEL: test:
; STD-COMPAT:       # %bb.0: # %entry
; STD-COMPAT-NEXT:    cgettype a0, ca0
; STD-COMPAT-NEXT:    li a1, -1
; STD-COMPAT-NEXT:    beq a0, a1, .LBB0_2
; STD-COMPAT-NEXT:  # %bb.1: # %if.then
; STD-COMPAT-NEXT:    li a0, 4
; STD-COMPAT-NEXT:    cret
; STD-COMPAT-NEXT:  .LBB0_2: # %if.end
; STD-COMPAT-NEXT:    li a0, 2
; STD-COMPAT-NEXT:    cret
entry:
  %sealed = call addrspace(200) i1 @llvm.cheri.cap.sealed.get(ptr addrspace(200) %cap)
  br i1 %sealed, label %if.then, label %if.end
if.then:
    ret i64 4
if.end:
    ret i64 2
}

declare i1 @llvm.cheri.cap.sealed.get(ptr addrspace(200)) addrspace(200)
