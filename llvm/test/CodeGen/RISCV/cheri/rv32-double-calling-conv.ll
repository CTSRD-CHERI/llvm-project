; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -target-abi il32pc64 -mattr=-f,-d,+xcheri,+cap-mode -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IXCHERI-IL32PC64 %s
; RUN: llc -mtriple=riscv32 -target-abi il32pc64 -mattr=+f,+d,+xcheri,+cap-mode -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IFDXCHERI-IL32PC64 %s
; RUN: llc -mtriple=riscv32 -target-abi il32pc64f -mattr=+f,-d,+xcheri,+cap-mode -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IFXCHERI-IL32PC64F %s
; RUN: llc -mtriple=riscv32 -target-abi il32pc64f -mattr=+f,+d,+xcheri,+cap-mode -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IFDXCHERI-IL32PC64F %s
; RUN: llc -mtriple=riscv32 -target-abi il32pc64d -mattr=+f,+d,+xcheri,+cap-mode -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IFDXCHERI-IL32PC64D %s

declare void @fixed(double)

define void @calls_fixed(double %d) nounwind {
; RV32IXCHERI-IL32PC64-LABEL: calls_fixed:
; RV32IXCHERI-IL32PC64:       # %bb.0:
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-IL32PC64-NEXT:    lui a3, 261888
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall __adddf3
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-IL32PC64-NEXT:    ctail fixed
;
; RV32IFDXCHERI-IL32PC64-LABEL: calls_fixed:
; RV32IFDXCHERI-IL32PC64:       # %bb.0:
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a0, 8(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a1, 12(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft0, 8(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:  .LBB0_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64-NEXT:    auipcc ca0, %pcrel_hi(.LCPI0_0)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB0_1)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64-NEXT:    cfsd ft0, 8(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a0, 8(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a1, 12(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64-NEXT:    ctail fixed
;
; RV32IFXCHERI-IL32PC64F-LABEL: calls_fixed:
; RV32IFXCHERI-IL32PC64F:       # %bb.0:
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFXCHERI-IL32PC64F-NEXT:    lui a3, 261888
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall __adddf3
; RV32IFXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFXCHERI-IL32PC64F-NEXT:    ctail fixed
;
; RV32IFDXCHERI-IL32PC64F-LABEL: calls_fixed:
; RV32IFDXCHERI-IL32PC64F:       # %bb.0:
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a0, 8(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a1, 12(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft0, 8(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:  .LBB0_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64F-NEXT:    auipcc ca0, %pcrel_hi(.LCPI0_0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB0_1)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfsd ft0, 8(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a0, 8(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a1, 12(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64F-NEXT:    ctail fixed
;
; RV32IFDXCHERI-IL32PC64D-LABEL: calls_fixed:
; RV32IFDXCHERI-IL32PC64D:       # %bb.0:
; RV32IFDXCHERI-IL32PC64D-NEXT:  .LBB0_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64D-NEXT:    auipcc ca0, %pcrel_hi(.LCPI0_0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB0_1)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfld ft0, 0(ca0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    fadd.d fa0, fa0, ft0
; RV32IFDXCHERI-IL32PC64D-NEXT:    ctail fixed
  %e = fadd double %d, 1.0
  tail call void @fixed(double %e)
  ret void
}

declare void @vararg(...)

define void @calls_vararg(double %d) nounwind {
; RV32IXCHERI-IL32PC64-LABEL: calls_vararg:
; RV32IXCHERI-IL32PC64:       # %bb.0:
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-IL32PC64-NEXT:    lui a3, 261888
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall __adddf3
; RV32IXCHERI-IL32PC64-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-IL32PC64-NEXT:    csw a0, 0(csp)
; RV32IXCHERI-IL32PC64-NEXT:    ccall vararg
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64-LABEL: calls_vararg:
; RV32IFDXCHERI-IL32PC64:       # %bb.0:
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -32
; RV32IFDXCHERI-IL32PC64-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a0, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a1, 20(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:  .LBB1_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64-NEXT:    auipcc ca0, %pcrel_hi(.LCPI1_0)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB1_1)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    ccall vararg
; RV32IFDXCHERI-IL32PC64-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 32
; RV32IFDXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFXCHERI-IL32PC64F-LABEL: calls_vararg:
; RV32IFXCHERI-IL32PC64F:       # %bb.0:
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFXCHERI-IL32PC64F-NEXT:    lui a3, 261888
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall __adddf3
; RV32IFXCHERI-IL32PC64F-NEXT:    csw a1, 4(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    csw a0, 0(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall vararg
; RV32IFXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64F-LABEL: calls_vararg:
; RV32IFDXCHERI-IL32PC64F:       # %bb.0:
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -32
; RV32IFDXCHERI-IL32PC64F-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a0, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a1, 20(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:  .LBB1_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64F-NEXT:    auipcc ca0, %pcrel_hi(.LCPI1_0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB1_1)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    ccall vararg
; RV32IFDXCHERI-IL32PC64F-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 32
; RV32IFDXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64D-LABEL: calls_vararg:
; RV32IFDXCHERI-IL32PC64D:       # %bb.0:
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64D-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64D-NEXT:  .LBB1_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64D-NEXT:    auipcc ca0, %pcrel_hi(.LCPI1_0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB1_1)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfld ft0, 0(ca0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    fadd.d ft0, fa0, ft0
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64D-NEXT:    ccall vararg
; RV32IFDXCHERI-IL32PC64D-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64D-NEXT:    cret
  %e = fadd double %d, 1.0
  tail call void (...) @vararg(double %e)
  ret void
}

declare double @return()

define double @calls_return() nounwind {
; RV32IXCHERI-IL32PC64-LABEL: calls_return:
; RV32IXCHERI-IL32PC64:       # %bb.0:
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-IL32PC64-NEXT:    ccall return
; RV32IXCHERI-IL32PC64-NEXT:    lui a3, 261888
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall __adddf3
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64-LABEL: calls_return:
; RV32IFDXCHERI-IL32PC64:       # %bb.0:
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64-NEXT:    ccall return
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a1, 4(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:  .LBB2_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64-NEXT:    auipcc ca0, %pcrel_hi(.LCPI2_0)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB2_1)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a1, 4(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFXCHERI-IL32PC64F-LABEL: calls_return:
; RV32IFXCHERI-IL32PC64F:       # %bb.0:
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall return
; RV32IFXCHERI-IL32PC64F-NEXT:    lui a3, 261888
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall __adddf3
; RV32IFXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64F-LABEL: calls_return:
; RV32IFDXCHERI-IL32PC64F:       # %bb.0:
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64F-NEXT:    ccall return
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a1, 4(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:  .LBB2_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64F-NEXT:    auipcc ca0, %pcrel_hi(.LCPI2_0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB2_1)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a1, 4(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64D-LABEL: calls_return:
; RV32IFDXCHERI-IL32PC64D:       # %bb.0:
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64D-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64D-NEXT:    ccall return
; RV32IFDXCHERI-IL32PC64D-NEXT:  .LBB2_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64D-NEXT:    auipcc ca0, %pcrel_hi(.LCPI2_0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB2_1)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfld ft0, 0(ca0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    fadd.d fa0, fa0, ft0
; RV32IFDXCHERI-IL32PC64D-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64D-NEXT:    cret
  %d = tail call double @return()
  %e = fadd double %d, 1.0
  ret double %e
}

declare void @fixed_soft_split(i32, i32, i32, i32, i32, i32, i32, double)

define void @calls_fixed_soft_split(i32, i32, i32, i32, i32, i32, i32, double %d) nounwind {
; RV32IXCHERI-IL32PC64-LABEL: calls_fixed_soft_split:
; RV32IXCHERI-IL32PC64:       # %bb.0:
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-IL32PC64-NEXT:    clw a1, 16(csp)
; RV32IXCHERI-IL32PC64-NEXT:    mv a0, a7
; RV32IXCHERI-IL32PC64-NEXT:    lui a3, 261888
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall __adddf3
; RV32IXCHERI-IL32PC64-NEXT:    mv a7, a0
; RV32IXCHERI-IL32PC64-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-IL32PC64-NEXT:    mv a0, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a1, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a3, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a4, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a5, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a6, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall fixed_soft_split
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64-LABEL: calls_fixed_soft_split:
; RV32IFDXCHERI-IL32PC64:       # %bb.0:
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -32
; RV32IFDXCHERI-IL32PC64-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a0, 32(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a7, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a0, 20(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:  .LBB3_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64-NEXT:    auipcc ca0, %pcrel_hi(.LCPI3_0)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB3_1)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64-NEXT:    cfsd ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a7, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    clw a0, 20(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    csw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    ccall fixed_soft_split
; RV32IFDXCHERI-IL32PC64-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 32
; RV32IFDXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFXCHERI-IL32PC64F-LABEL: calls_fixed_soft_split:
; RV32IFXCHERI-IL32PC64F:       # %bb.0:
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFXCHERI-IL32PC64F-NEXT:    clw a1, 16(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a0, a7
; RV32IFXCHERI-IL32PC64F-NEXT:    lui a3, 261888
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall __adddf3
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a7, a0
; RV32IFXCHERI-IL32PC64F-NEXT:    csw a1, 0(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a0, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a1, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a3, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a4, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a5, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a6, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall fixed_soft_split
; RV32IFXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64F-LABEL: calls_fixed_soft_split:
; RV32IFDXCHERI-IL32PC64F:       # %bb.0:
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -32
; RV32IFDXCHERI-IL32PC64F-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a0, 32(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a7, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a0, 20(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:  .LBB3_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64F-NEXT:    auipcc ca0, %pcrel_hi(.LCPI3_0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB3_1)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfsd ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a7, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    clw a0, 20(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    csw a0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    ccall fixed_soft_split
; RV32IFDXCHERI-IL32PC64F-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 32
; RV32IFDXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64D-LABEL: calls_fixed_soft_split:
; RV32IFDXCHERI-IL32PC64D:       # %bb.0:
; RV32IFDXCHERI-IL32PC64D-NEXT:  .LBB3_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64D-NEXT:    auipcc ca0, %pcrel_hi(.LCPI3_0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB3_1)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfld ft0, 0(ca0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    fadd.d fa0, fa0, ft0
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    ctail fixed_soft_split
  %e = fadd double %d, 1.0
  tail call void @fixed_soft_split(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, double %e)
  ret void
}

declare void @fixed_soft_stack(i32, i32, i32, i32, i32, i32, i32, i32, double)

define void @calls_fixed_soft_stack(i32, i32, i32, i32, i32, i32, i32, i32, double %d) nounwind {
; RV32IXCHERI-IL32PC64-LABEL: calls_fixed_soft_stack:
; RV32IXCHERI-IL32PC64:       # %bb.0:
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-IL32PC64-NEXT:    clw a0, 16(csp)
; RV32IXCHERI-IL32PC64-NEXT:    clw a1, 20(csp)
; RV32IXCHERI-IL32PC64-NEXT:    lui a3, 261888
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall __adddf3
; RV32IXCHERI-IL32PC64-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-IL32PC64-NEXT:    csw a0, 0(csp)
; RV32IXCHERI-IL32PC64-NEXT:    mv a0, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a1, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a3, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a4, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a5, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a6, zero
; RV32IXCHERI-IL32PC64-NEXT:    mv a7, zero
; RV32IXCHERI-IL32PC64-NEXT:    ccall fixed_soft_stack
; RV32IXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64-LABEL: calls_fixed_soft_stack:
; RV32IFDXCHERI-IL32PC64:       # %bb.0:
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:  .LBB4_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64-NEXT:    auipcc ca0, %pcrel_hi(.LCPI4_0)
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB4_1)
; RV32IFDXCHERI-IL32PC64-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    mv a7, zero
; RV32IFDXCHERI-IL32PC64-NEXT:    ccall fixed_soft_stack
; RV32IFDXCHERI-IL32PC64-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64-NEXT:    cret
;
; RV32IFXCHERI-IL32PC64F-LABEL: calls_fixed_soft_stack:
; RV32IFXCHERI-IL32PC64F:       # %bb.0:
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFXCHERI-IL32PC64F-NEXT:    clw a0, 16(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    clw a1, 20(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    lui a3, 261888
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall __adddf3
; RV32IFXCHERI-IL32PC64F-NEXT:    csw a1, 4(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    csw a0, 0(csp)
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a0, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a1, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a3, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a4, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a5, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a6, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    mv a7, zero
; RV32IFXCHERI-IL32PC64F-NEXT:    ccall fixed_soft_stack
; RV32IFXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64F-LABEL: calls_fixed_soft_stack:
; RV32IFDXCHERI-IL32PC64F:       # %bb.0:
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, -16
; RV32IFDXCHERI-IL32PC64F-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft0, 16(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:  .LBB4_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64F-NEXT:    auipcc ca0, %pcrel_hi(.LCPI4_0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB4_1)
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfld ft1, 0(ca0)
; RV32IFDXCHERI-IL32PC64F-NEXT:    fadd.d ft0, ft0, ft1
; RV32IFDXCHERI-IL32PC64F-NEXT:    cfsd ft0, 0(csp)
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    mv a7, zero
; RV32IFDXCHERI-IL32PC64F-NEXT:    ccall fixed_soft_stack
; RV32IFDXCHERI-IL32PC64F-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IFDXCHERI-IL32PC64F-NEXT:    cincoffset csp, csp, 16
; RV32IFDXCHERI-IL32PC64F-NEXT:    cret
;
; RV32IFDXCHERI-IL32PC64D-LABEL: calls_fixed_soft_stack:
; RV32IFDXCHERI-IL32PC64D:       # %bb.0:
; RV32IFDXCHERI-IL32PC64D-NEXT:  .LBB4_1: # Label of block must be emitted
; RV32IFDXCHERI-IL32PC64D-NEXT:    auipcc ca0, %pcrel_hi(.LCPI4_0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cincoffset ca0, ca0, %pcrel_lo(.LBB4_1)
; RV32IFDXCHERI-IL32PC64D-NEXT:    cfld ft0, 0(ca0)
; RV32IFDXCHERI-IL32PC64D-NEXT:    fadd.d fa0, fa0, ft0
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a0, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a1, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a2, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a3, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a4, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a5, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a6, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    mv a7, zero
; RV32IFDXCHERI-IL32PC64D-NEXT:    ctail fixed_soft_stack
  %e = fadd double %d, 1.0
  tail call void @fixed_soft_stack(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, double %e)
  ret void
}
