; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Check that we can load/store double-precision floating point values via a
; capability pointer without capability mode.
; FIXME: The patterns for 64-bit floating point on RV32 have not been added yet
; RUNTODO: %riscv32_cheri_llc -mattr=-f -verify-machineinstrs < %s \
; RUNTODO:   | FileCheck -check-prefix=RV32IXCHERI %s
; RUNTODO: %riscv32_cheri_llc -mattr=+f -verify-machineinstrs < %s \
; RUNTODO:   | FileCheck -check-prefix=RV32IFXCHERI %s
; RUN: %riscv64_cheri_llc -mattr=-f -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IXCHERI %s
; RUN: %riscv64_cheri_llc -mattr=+f -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IFXCHERI %s

; RUNTODO: %riscv32_cheri_purecap_llc -mattr=-f -verify-machineinstrs < %s \
; RUNTODO:   | FileCheck -check-prefix=PURECAP-RV32IXCHERI %s
; RUNTODO: %riscv32_cheri_purecap_llc -mattr=+f -verify-machineinstrs < %s \
; RUNTODO:   | FileCheck -check-prefix=PURECAP-RV32IFXCHERI %s
; RUN: %riscv64_cheri_purecap_llc -mattr=-f -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=PURECAP-RV64IXCHERI %s
; RUN: %riscv64_cheri_purecap_llc -mattr=+f -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=PURECAP-RV64IFXCHERI %s

define float @load_float_via_cap(float addrspace(200)* %a) nounwind {
; RV64IXCHERI-LABEL: load_float_via_cap:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    lw.cap a0, (ca0)
; RV64IXCHERI-NEXT:    ret
;
; RV64IFXCHERI-LABEL: load_float_via_cap:
; RV64IFXCHERI:       # %bb.0:
; RV64IFXCHERI-NEXT:    lw.cap a0, (ca0)
; RV64IFXCHERI-NEXT:    fmv.w.x ft0, a0
; RV64IFXCHERI-NEXT:    fmv.x.w a0, ft0
; RV64IFXCHERI-NEXT:    ret
;
; PURECAP-RV64IXCHERI-LABEL: load_float_via_cap:
; PURECAP-RV64IXCHERI:       # %bb.0:
; PURECAP-RV64IXCHERI-NEXT:    clw a0, 0(ca0)
; PURECAP-RV64IXCHERI-NEXT:    cret
;
; PURECAP-RV64IFXCHERI-LABEL: load_float_via_cap:
; PURECAP-RV64IFXCHERI:       # %bb.0:
; PURECAP-RV64IFXCHERI-NEXT:    cflw ft0, 0(ca0)
; PURECAP-RV64IFXCHERI-NEXT:    fmv.x.w a0, ft0
; PURECAP-RV64IFXCHERI-NEXT:    cret
  %loaded = load float, float addrspace(200)* %a, align 4
  ret float %loaded
}

define void @store_float_via_cap(float addrspace(200)* %a, float %value) nounwind {
; RV64IXCHERI-LABEL: store_float_via_cap:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    sw.cap a1, (ca0)
; RV64IXCHERI-NEXT:    ret
;
; RV64IFXCHERI-LABEL: store_float_via_cap:
; RV64IFXCHERI:       # %bb.0:
; RV64IFXCHERI-NEXT:    fmv.w.x ft0, a1
; RV64IFXCHERI-NEXT:    fmv.x.w a1, ft0
; RV64IFXCHERI-NEXT:    sw.cap a1, (ca0)
; RV64IFXCHERI-NEXT:    ret
;
; PURECAP-RV64IXCHERI-LABEL: store_float_via_cap:
; PURECAP-RV64IXCHERI:       # %bb.0:
; PURECAP-RV64IXCHERI-NEXT:    csw a1, 0(ca0)
; PURECAP-RV64IXCHERI-NEXT:    cret
;
; PURECAP-RV64IFXCHERI-LABEL: store_float_via_cap:
; PURECAP-RV64IFXCHERI:       # %bb.0:
; PURECAP-RV64IFXCHERI-NEXT:    fmv.w.x ft0, a1
; PURECAP-RV64IFXCHERI-NEXT:    cfsw ft0, 0(ca0)
; PURECAP-RV64IFXCHERI-NEXT:    cret
  store float %value, float addrspace(200)* %a, align 4
  ret void
}
