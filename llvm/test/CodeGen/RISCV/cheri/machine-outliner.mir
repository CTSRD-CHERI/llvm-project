## The MachineOutliner was creating non-purecap instructions (found while compiling PCRE)
# RUN: %riscv64_cheri_purecap_llc --run-pass=machine-outliner %s -o - | FileCheck %s
# RUN: %riscv64_cheri_purecap_llc --start-before=machine-outliner %s -o - | FileCheck %s --check-prefix=ASM
--- |
  target datalayout = "e-m:e-pf200:128:128:128:64-p:64:64-i64:64-i128:128-n64-S128-A200-P200-G200"
  target triple = "riscv64-unknown-freebsd13"

  %struct.pcre2_real_code_16 = type { %struct.pcre2_memctl, ptr addrspace(200), ptr addrspace(200), [32 x i8], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i16, i16 }
  %struct.pcre2_memctl = type { ptr addrspace(200), ptr addrspace(200), ptr addrspace(200) }

  define i32 @pcre2_match_16(ptr addrspace(200) readonly %code, i1 %cmp205) local_unnamed_addr addrspace(200) nounwind minsize {
  bb.0:
    %start_bitmap = getelementptr inbounds %struct.pcre2_real_code_16, ptr addrspace(200) %code, i64 0, i32 3
    br i1 %cmp205, label %bb.1, label %bb.2

  bb.1:
    %arrayidx648 = getelementptr inbounds i8, ptr addrspace(200) %start_bitmap, i64 2
    br i1 %cmp205, label %bb.2, label %bb.3

  bb.2:
    %arrayidx908 = getelementptr inbounds i8, ptr addrspace(200) %start_bitmap, i64 1
    br label %bb.3

  bb.3:
    br label %bb.1
  }
...
---
name:            pcre2_match_16
tracksRegLiveness: true
registers:       []
liveins:
  - { reg: '$c10', virtual-reg: '' }
  - { reg: '$x11', virtual-reg: '' }
body:             |
  ; CHECK-LABEL: name: pcre2_match_16
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $c10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $c13 = CMove $c0
  ; CHECK-NEXT:   $c14 = CMove $c0
  ; CHECK-NEXT:   renamable $c12 = CIncOffsetImm renamable $c10, 80
  ; CHECK-NEXT:   renamable $x11 = ANDI killed renamable $x11, 1
  ; CHECK-NEXT:   BEQ renamable $x11, $x0, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT:   liveins: $c10, $c12, $c13, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $c5 = PseudoCCALLReg target-flags(riscv-ccall) @OUTLINED_FUNCTION_0, implicit-def $c5, implicit-def $c15, implicit-def $x14, implicit-def $x15, implicit $c10, implicit $c12
  ; CHECK-NEXT:   renamable $x14 = ANDI killed renamable $x14, 1
  ; CHECK-NEXT:   BEQ killed renamable $x14, $x0, %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT:   liveins: $c10, $c12, $c13, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $c5 = PseudoCCALLReg target-flags(riscv-ccall) @OUTLINED_FUNCTION_0, implicit-def $c5, implicit-def $c15, implicit-def $x14, implicit-def $x15, implicit $c10, implicit $c12
  ; CHECK-NEXT:   renamable $x15 = ANDI killed renamable $x14, 1
  ; CHECK-NEXT:   $c14 = CMove $c0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $c10, $c12, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $c14 = CMove $c0
  ; CHECK-NEXT:   $c13 = CMove $c10
  ; CHECK-NEXT:   PseudoCBR %bb.1
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $c10, $x11

    $c13 = CMove $c0
    $c14 = CMove $c0
    renamable $c12 = CIncOffsetImm renamable $c10, 80
    renamable $x11 = ANDI killed renamable $x11, 1
    BEQ renamable $x11, $x0, %bb.2

  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $c10, $c12, $c13, $x11

    renamable $x14 = CLHU renamable $c10, 0 :: (load (s16) from %ir.code, addrspace 200)
    renamable $x15 = SRLI renamable $x14, 3
    renamable $c15 = CIncOffset renamable $c12, killed renamable $x15
    renamable $x15 = CLBU killed renamable $c15, 0 :: (load (s8) from %ir.arrayidx648, addrspace 200)
    renamable $x14 = ANDI killed renamable $x14, 7
    renamable $x14 = SRLW killed renamable $x15, killed renamable $x14
    renamable $x14 = ANDI killed renamable $x14, 1
    BEQ killed renamable $x14, $x0, %bb.3

  bb.2:
    successors: %bb.3(0x80000000)
    liveins: $c10, $c12, $c13, $x11

    renamable $x14 = CLHU renamable $c10, 0 :: (load (s16) from %ir.code, addrspace 200)
    renamable $x15 = SRLI renamable $x14, 3
    renamable $c15 = CIncOffset renamable $c12, killed renamable $x15
    renamable $x15 = CLBU killed renamable $c15, 0 :: (load (s8) from %ir.arrayidx908, addrspace 200)
    renamable $x14 = ANDI killed renamable $x14, 7
    renamable $x14 = SRLW killed renamable $x15, killed renamable $x14
    renamable $x15 = ANDI killed renamable $x14, 1
    $c14 = CMove $c0

  bb.3:
    successors: %bb.1(0x80000000)
    liveins: $c10, $c12, $x11

    $c14 = CMove $c0
    $c13 = CMove $c10
    PseudoCBR %bb.1

...

# UTC_ARGS: --disable
# CHECK: ...
# CHECK: ---
# CHECK-LABEL: name:            OUTLINED_FUNCTION_0
# CHECK: registers:       []
# CHECK: liveins:         []
# CHECK: body:             |
# CHECK-NEXT:   bb.0:
# CHECK-NEXT:     liveins: $c10, $c12, $x11, $c13, $c5
# CHECK-NEXT: {{  $}}
# CHECK-NEXT:     renamable $x14 = CLHU renamable $c10, 0
# CHECK-NEXT:     renamable $x15 = SRLI renamable $x14, 3
# CHECK-NEXT:     renamable $c15 = CIncOffset renamable $c12, killed renamable $x15
# CHECK-NEXT:     renamable $x15 = CLBU killed renamable $c15, 0
# CHECK-NEXT:     renamable $x14 = ANDI killed renamable $x14, 7
# CHECK-NEXT:     renamable $x14 = SRLW killed renamable $x15, killed renamable $x14
# FIXME: This should not be a JALR:
# CHECK-NEXT:     $c0 = CJALR $c5, 0
# CHECK-EMPTY:
# CHECK-NEXT: ...

# ASM-LABEL: pcre2_match_16:
# ASM:       # %bb.0:
# ASM-NEXT:    cmove ca3, cnull
# ASM-NEXT:    cmove ca4, cnull
# ASM-NEXT:    cincoffset ca2, ca0, 80
# ASM-NEXT:    andi a1, a1, 1
# ASM-NEXT:    beqz a1, .LBB0_2
# ASM-NEXT:  .LBB0_1:
# ASM-NEXT:    ccall ct0, OUTLINED_FUNCTION_0
# ASM-NEXT:    andi a4, a4, 1
# ASM-NEXT:    beqz a4, .LBB0_3
# ASM-NEXT:  .LBB0_2:
# ASM-NEXT:    ccall ct0, OUTLINED_FUNCTION_0
# ASM-NEXT:    andi a5, a4, 1
# ASM-NEXT:    cmove ca4, cnull
# ASM-NEXT:  .LBB0_3:
# ASM-NEXT:    cmove ca4, cnull
# ASM-NEXT:    cmove ca3, ca0
# ASM-NEXT:    j .LBB0_1
#
# ASM-LABEL: OUTLINED_FUNCTION_0:
# ASM:       # %bb.0:
# ASM-NEXT:    lhu a4, 0(ca0)
# ASM-NEXT:    srli a5, a4, 3
# ASM-NEXT:    cincoffset ca5, ca2, a5
# ASM-NEXT:    lbu a5, 0(ca5)
# ASM-NEXT:    andi a4, a4, 7
# ASM-NEXT:    srlw a4, a5, a4
# ASM-NEXT:    jr ct0
