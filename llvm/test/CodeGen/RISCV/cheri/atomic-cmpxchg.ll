; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %riscv32_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IXCHERI %s
; RUN: %riscv32_cheri_purecap_llc -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV32IAXCHERI %s
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IXCHERI %s
; RUN: %riscv64_cheri_purecap_llc -mattr=+a -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=RV64IAXCHERI %s

define void @cmpxchg_i8_monotonic_monotonic(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_monotonic_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    mv a3, zero
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_monotonic_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB0_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB0_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB0_1
; RV32IAXCHERI-NEXT:  .LBB0_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_monotonic_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    mv a3, zero
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_monotonic_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB0_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB0_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB0_1
; RV64IAXCHERI-NEXT:  .LBB0_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val monotonic monotonic
  ret void
}

define void @cmpxchg_i8_acquire_monotonic(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_acquire_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_acquire_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB1_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB1_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB1_1
; RV32IAXCHERI-NEXT:  .LBB1_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_acquire_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_acquire_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB1_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB1_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB1_1
; RV64IAXCHERI-NEXT:  .LBB1_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val acquire monotonic
  ret void
}

define void @cmpxchg_i8_acquire_acquire(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_acquire_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_acquire_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB2_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB2_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB2_1
; RV32IAXCHERI-NEXT:  .LBB2_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_acquire_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_acquire_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB2_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB2_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB2_1
; RV64IAXCHERI-NEXT:  .LBB2_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val acquire acquire
  ret void
}

define void @cmpxchg_i8_release_monotonic(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_release_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_release_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB3_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB3_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB3_1
; RV32IAXCHERI-NEXT:  .LBB3_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_release_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_release_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB3_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB3_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB3_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB3_1
; RV64IAXCHERI-NEXT:  .LBB3_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val release monotonic
  ret void
}

define void @cmpxchg_i8_release_acquire(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_release_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_release_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB4_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB4_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB4_1
; RV32IAXCHERI-NEXT:  .LBB4_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_release_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_release_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB4_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB4_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB4_1
; RV64IAXCHERI-NEXT:  .LBB4_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val release acquire
  ret void
}

define void @cmpxchg_i8_acq_rel_monotonic(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_acq_rel_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_acq_rel_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB5_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB5_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB5_1
; RV32IAXCHERI-NEXT:  .LBB5_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_acq_rel_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_acq_rel_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB5_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB5_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB5_1
; RV64IAXCHERI-NEXT:  .LBB5_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val acq_rel monotonic
  ret void
}

define void @cmpxchg_i8_acq_rel_acquire(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_acq_rel_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_acq_rel_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB6_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB6_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB6_1
; RV32IAXCHERI-NEXT:  .LBB6_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_acq_rel_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_acq_rel_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB6_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB6_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB6_1
; RV64IAXCHERI-NEXT:  .LBB6_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val acq_rel acquire
  ret void
}

define void @cmpxchg_i8_seq_cst_monotonic(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_seq_cst_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_seq_cst_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB7_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB7_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB7_1
; RV32IAXCHERI-NEXT:  .LBB7_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_seq_cst_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_seq_cst_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB7_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB7_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB7_1
; RV64IAXCHERI-NEXT:  .LBB7_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val seq_cst monotonic
  ret void
}

define void @cmpxchg_i8_seq_cst_acquire(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_seq_cst_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_seq_cst_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB8_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB8_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB8_1
; RV32IAXCHERI-NEXT:  .LBB8_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_seq_cst_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_seq_cst_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB8_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB8_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB8_1
; RV64IAXCHERI-NEXT:  .LBB8_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val seq_cst acquire
  ret void
}

define void @cmpxchg_i8_seq_cst_seq_cst(i8 addrspace(200)* %ptr, i8 %cmp, i8 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i8_seq_cst_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    csb a1, 7(csp)
; RV32IXCHERI-NEXT:    cincoffset ca1, csp, 7
; RV32IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i8_seq_cst_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 24
; RV32IAXCHERI-NEXT:    srai a1, a1, 24
; RV32IAXCHERI-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB9_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB9_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB9_1
; RV32IAXCHERI-NEXT:  .LBB9_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i8_seq_cst_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    csb a1, 15(csp)
; RV64IXCHERI-NEXT:    cincoffset ca1, csp, 15
; RV64IXCHERI-NEXT:    csetbounds ca1, ca1, 1
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_1
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i8_seq_cst_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 56
; RV64IAXCHERI-NEXT:    srai a1, a1, 56
; RV64IAXCHERI-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.b.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB9_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB9_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.b.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB9_1
; RV64IAXCHERI-NEXT:  .LBB9_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* %ptr, i8 %cmp, i8 %val seq_cst seq_cst
  ret void
}

define void @cmpxchg_i16_monotonic_monotonic(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_monotonic_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a3, zero
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_monotonic_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB10_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB10_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB10_1
; RV32IAXCHERI-NEXT:  .LBB10_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_monotonic_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca3, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    cmove ca1, ca3
; RV64IXCHERI-NEXT:    mv a3, zero
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_monotonic_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB10_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB10_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB10_1
; RV64IAXCHERI-NEXT:  .LBB10_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val monotonic monotonic
  ret void
}

define void @cmpxchg_i16_acquire_monotonic(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_acquire_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_acquire_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB11_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB11_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB11_1
; RV32IAXCHERI-NEXT:  .LBB11_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_acquire_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_acquire_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB11_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB11_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB11_1
; RV64IAXCHERI-NEXT:  .LBB11_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val acquire monotonic
  ret void
}

define void @cmpxchg_i16_acquire_acquire(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_acquire_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_acquire_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB12_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB12_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB12_1
; RV32IAXCHERI-NEXT:  .LBB12_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_acquire_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_acquire_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB12_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB12_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB12_1
; RV64IAXCHERI-NEXT:  .LBB12_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val acquire acquire
  ret void
}

define void @cmpxchg_i16_release_monotonic(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_release_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_release_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB13_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB13_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB13_1
; RV32IAXCHERI-NEXT:  .LBB13_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_release_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_release_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB13_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB13_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB13_1
; RV64IAXCHERI-NEXT:  .LBB13_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val release monotonic
  ret void
}

define void @cmpxchg_i16_release_acquire(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_release_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_release_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB14_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB14_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB14_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB14_1
; RV32IAXCHERI-NEXT:  .LBB14_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_release_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_release_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB14_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB14_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB14_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB14_1
; RV64IAXCHERI-NEXT:  .LBB14_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val release acquire
  ret void
}

define void @cmpxchg_i16_acq_rel_monotonic(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_acq_rel_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_acq_rel_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB15_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB15_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB15_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB15_1
; RV32IAXCHERI-NEXT:  .LBB15_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_acq_rel_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_acq_rel_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB15_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB15_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB15_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB15_1
; RV64IAXCHERI-NEXT:  .LBB15_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val acq_rel monotonic
  ret void
}

define void @cmpxchg_i16_acq_rel_acquire(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_acq_rel_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_acq_rel_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB16_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB16_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB16_1
; RV32IAXCHERI-NEXT:  .LBB16_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_acq_rel_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_acq_rel_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB16_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB16_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB16_1
; RV64IAXCHERI-NEXT:  .LBB16_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val acq_rel acquire
  ret void
}

define void @cmpxchg_i16_seq_cst_monotonic(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_seq_cst_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_seq_cst_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB17_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB17_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB17_1
; RV32IAXCHERI-NEXT:  .LBB17_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_seq_cst_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_seq_cst_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB17_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB17_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB17_1
; RV64IAXCHERI-NEXT:  .LBB17_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val seq_cst monotonic
  ret void
}

define void @cmpxchg_i16_seq_cst_acquire(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_seq_cst_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_seq_cst_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB18_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB18_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB18_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB18_1
; RV32IAXCHERI-NEXT:  .LBB18_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_seq_cst_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_seq_cst_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB18_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB18_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB18_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB18_1
; RV64IAXCHERI-NEXT:  .LBB18_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val seq_cst acquire
  ret void
}

define void @cmpxchg_i16_seq_cst_seq_cst(i16 addrspace(200)* %ptr, i16 %cmp, i16 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i16_seq_cst_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 6
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV32IXCHERI-NEXT:    csh a1, 6(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i16_seq_cst_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    slli a1, a1, 16
; RV32IAXCHERI-NEXT:    srai a1, a1, 16
; RV32IAXCHERI-NEXT:  .LBB19_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB19_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB19_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB19_1
; RV32IAXCHERI-NEXT:  .LBB19_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i16_seq_cst_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 14
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 2
; RV64IXCHERI-NEXT:    csh a1, 14(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_2
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i16_seq_cst_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    slli a1, a1, 48
; RV64IAXCHERI-NEXT:    srai a1, a1, 48
; RV64IAXCHERI-NEXT:  .LBB19_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.h.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB19_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB19_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.h.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB19_1
; RV64IAXCHERI-NEXT:  .LBB19_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i16 addrspace(200)* %ptr, i16 %cmp, i16 %val seq_cst seq_cst
  ret void
}

define void @cmpxchg_i32_monotonic_monotonic(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_monotonic_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a3, zero
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_monotonic_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB20_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB20_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB20_1
; RV32IAXCHERI-NEXT:  .LBB20_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_monotonic_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca3, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    cmove ca1, ca3
; RV64IXCHERI-NEXT:    mv a3, zero
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_monotonic_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB20_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB20_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB20_1
; RV64IAXCHERI-NEXT:  .LBB20_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val monotonic monotonic
  ret void
}

define void @cmpxchg_i32_acquire_monotonic(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_acquire_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_acquire_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB21_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB21_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB21_1
; RV32IAXCHERI-NEXT:  .LBB21_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_acquire_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_acquire_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB21_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB21_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB21_1
; RV64IAXCHERI-NEXT:  .LBB21_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val acquire monotonic
  ret void
}

define void @cmpxchg_i32_acquire_acquire(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_acquire_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_acquire_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB22_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB22_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB22_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB22_1
; RV32IAXCHERI-NEXT:  .LBB22_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_acquire_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_acquire_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB22_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB22_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB22_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB22_1
; RV64IAXCHERI-NEXT:  .LBB22_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val acquire acquire
  ret void
}

define void @cmpxchg_i32_release_monotonic(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_release_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_release_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB23_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB23_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB23_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB23_1
; RV32IAXCHERI-NEXT:  .LBB23_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_release_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_release_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB23_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB23_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB23_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB23_1
; RV64IAXCHERI-NEXT:  .LBB23_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val release monotonic
  ret void
}

define void @cmpxchg_i32_release_acquire(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_release_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_release_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB24_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB24_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB24_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB24_1
; RV32IAXCHERI-NEXT:  .LBB24_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_release_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_release_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB24_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB24_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB24_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB24_1
; RV64IAXCHERI-NEXT:  .LBB24_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val release acquire
  ret void
}

define void @cmpxchg_i32_acq_rel_monotonic(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_acq_rel_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_acq_rel_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB25_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB25_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB25_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB25_1
; RV32IAXCHERI-NEXT:  .LBB25_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_acq_rel_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_acq_rel_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB25_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB25_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB25_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB25_1
; RV64IAXCHERI-NEXT:  .LBB25_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val acq_rel monotonic
  ret void
}

define void @cmpxchg_i32_acq_rel_acquire(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_acq_rel_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_acq_rel_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB26_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB26_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB26_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB26_1
; RV32IAXCHERI-NEXT:  .LBB26_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_acq_rel_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_acq_rel_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB26_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB26_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB26_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB26_1
; RV64IAXCHERI-NEXT:  .LBB26_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val acq_rel acquire
  ret void
}

define void @cmpxchg_i32_seq_cst_monotonic(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_seq_cst_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_seq_cst_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB27_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB27_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB27_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB27_1
; RV32IAXCHERI-NEXT:  .LBB27_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_seq_cst_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_seq_cst_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB27_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB27_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB27_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB27_1
; RV64IAXCHERI-NEXT:  .LBB27_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val seq_cst monotonic
  ret void
}

define void @cmpxchg_i32_seq_cst_acquire(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_seq_cst_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_seq_cst_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB28_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB28_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB28_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB28_1
; RV32IAXCHERI-NEXT:  .LBB28_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_seq_cst_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_seq_cst_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB28_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB28_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB28_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB28_1
; RV64IAXCHERI-NEXT:  .LBB28_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val seq_cst acquire
  ret void
}

define void @cmpxchg_i32_seq_cst_seq_cst(i32 addrspace(200)* %ptr, i32 %cmp, i32 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i32_seq_cst_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 4
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV32IXCHERI-NEXT:    csw a1, 4(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i32_seq_cst_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB29_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB29_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB29_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB29_1
; RV32IAXCHERI-NEXT:  .LBB29_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i32_seq_cst_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 12
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 4
; RV64IXCHERI-NEXT:    csw a1, 12(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_4
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i32_seq_cst_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:    sext.w a1, a1
; RV64IAXCHERI-NEXT:  .LBB29_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.w.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB29_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB29_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.w.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB29_1
; RV64IAXCHERI-NEXT:  .LBB29_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i32 addrspace(200)* %ptr, i32 %cmp, i32 %val seq_cst seq_cst
  ret void
}

define void @cmpxchg_i64_monotonic_monotonic(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_monotonic_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca5, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca5, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    mv a2, a3
; RV32IXCHERI-NEXT:    mv a3, a4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    mv a5, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_monotonic_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset ca5, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca5, ca5, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    cmove ca1, ca5
; RV32IAXCHERI-NEXT:    mv a2, a3
; RV32IAXCHERI-NEXT:    mv a3, a4
; RV32IAXCHERI-NEXT:    mv a4, zero
; RV32IAXCHERI-NEXT:    mv a5, zero
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_monotonic_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    cmove ca1, ca3
; RV64IXCHERI-NEXT:    mv a3, zero
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_monotonic_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB30_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB30_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB30_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB30_1
; RV64IAXCHERI-NEXT:  .LBB30_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val monotonic monotonic
  ret void
}

define void @cmpxchg_i64_acquire_monotonic(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_acquire_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    mv a2, a3
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    mv a5, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_acquire_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 2
; RV32IAXCHERI-NEXT:    cmove ca1, ca5
; RV32IAXCHERI-NEXT:    mv a2, a3
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    mv a5, zero
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_acquire_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_acquire_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB31_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB31_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB31_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB31_1
; RV64IAXCHERI-NEXT:  .LBB31_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val acquire monotonic
  ret void
}

define void @cmpxchg_i64_acquire_acquire(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_acquire_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    mv a7, a3
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    addi a5, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a2, a7
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_acquire_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    mv a7, a3
; RV32IAXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 2
; RV32IAXCHERI-NEXT:    addi a5, zero, 2
; RV32IAXCHERI-NEXT:    cmove ca1, ca3
; RV32IAXCHERI-NEXT:    mv a2, a7
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_acquire_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_acquire_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB32_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB32_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB32_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB32_1
; RV64IAXCHERI-NEXT:  .LBB32_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val acquire acquire
  ret void
}

define void @cmpxchg_i64_release_monotonic(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_release_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 3
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    mv a2, a3
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    mv a5, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_release_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 3
; RV32IAXCHERI-NEXT:    cmove ca1, ca5
; RV32IAXCHERI-NEXT:    mv a2, a3
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    mv a5, zero
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_release_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_release_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB33_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB33_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB33_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB33_1
; RV64IAXCHERI-NEXT:  .LBB33_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val release monotonic
  ret void
}

define void @cmpxchg_i64_release_acquire(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_release_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    mv a7, a3
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 3
; RV32IXCHERI-NEXT:    addi a5, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a2, a7
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_release_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    mv a7, a3
; RV32IAXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 3
; RV32IAXCHERI-NEXT:    addi a5, zero, 2
; RV32IAXCHERI-NEXT:    cmove ca1, ca3
; RV32IAXCHERI-NEXT:    mv a2, a7
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_release_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_release_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB34_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB34_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB34_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB34_1
; RV64IAXCHERI-NEXT:  .LBB34_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val release acquire
  ret void
}

define void @cmpxchg_i64_acq_rel_monotonic(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_acq_rel_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 4
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    mv a2, a3
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    mv a5, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_acq_rel_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 4
; RV32IAXCHERI-NEXT:    cmove ca1, ca5
; RV32IAXCHERI-NEXT:    mv a2, a3
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    mv a5, zero
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_acq_rel_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_acq_rel_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB35_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB35_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB35_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB35_1
; RV64IAXCHERI-NEXT:  .LBB35_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val acq_rel monotonic
  ret void
}

define void @cmpxchg_i64_acq_rel_acquire(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_acq_rel_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    mv a7, a3
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 4
; RV32IXCHERI-NEXT:    addi a5, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a2, a7
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_acq_rel_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    mv a7, a3
; RV32IAXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 4
; RV32IAXCHERI-NEXT:    addi a5, zero, 2
; RV32IAXCHERI-NEXT:    cmove ca1, ca3
; RV32IAXCHERI-NEXT:    mv a2, a7
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_acq_rel_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_acq_rel_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB36_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aq a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB36_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB36_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.rl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB36_1
; RV64IAXCHERI-NEXT:  .LBB36_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val acq_rel acquire
  ret void
}

define void @cmpxchg_i64_seq_cst_monotonic(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_seq_cst_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    mv a2, a3
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    mv a5, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_seq_cst_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    cincoffset ca4, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca5, ca4, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 5
; RV32IAXCHERI-NEXT:    cmove ca1, ca5
; RV32IAXCHERI-NEXT:    mv a2, a3
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    mv a5, zero
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_seq_cst_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_seq_cst_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB37_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB37_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB37_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB37_1
; RV64IAXCHERI-NEXT:  .LBB37_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val seq_cst monotonic
  ret void
}

define void @cmpxchg_i64_seq_cst_acquire(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_seq_cst_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    mv a7, a3
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    addi a5, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a2, a7
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_seq_cst_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    mv a7, a3
; RV32IAXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 5
; RV32IAXCHERI-NEXT:    addi a5, zero, 2
; RV32IAXCHERI-NEXT:    cmove ca1, ca3
; RV32IAXCHERI-NEXT:    mv a2, a7
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_seq_cst_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_seq_cst_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB38_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB38_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB38_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB38_1
; RV64IAXCHERI-NEXT:  .LBB38_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val seq_cst acquire
  ret void
}

define void @cmpxchg_i64_seq_cst_seq_cst(i64 addrspace(200)* %ptr, i64 %cmp, i64 %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_i64_seq_cst_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    mv a6, a4
; RV32IXCHERI-NEXT:    mv a7, a3
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csw a2, 4(csp)
; RV32IXCHERI-NEXT:    csw a1, 0(csp)
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    addi a5, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a2, a7
; RV32IXCHERI-NEXT:    mv a3, a6
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_i64_seq_cst_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IAXCHERI-NEXT:    csc cra, 8(csp)
; RV32IAXCHERI-NEXT:    mv a6, a4
; RV32IAXCHERI-NEXT:    mv a7, a3
; RV32IAXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IAXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IAXCHERI-NEXT:    csw a2, 4(csp)
; RV32IAXCHERI-NEXT:    csw a1, 0(csp)
; RV32IAXCHERI-NEXT:    addi a4, zero, 5
; RV32IAXCHERI-NEXT:    addi a5, zero, 5
; RV32IAXCHERI-NEXT:    cmove ca1, ca3
; RV32IAXCHERI-NEXT:    mv a2, a7
; RV32IAXCHERI-NEXT:    mv a3, a6
; RV32IAXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV32IAXCHERI-NEXT:    clc cra, 8(csp)
; RV32IAXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_i64_seq_cst_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 8
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV64IXCHERI-NEXT:    csd a1, 8(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_8
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_i64_seq_cst_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB39_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.d.aqrl a3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB39_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB39_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.d.aqrl a4, a2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB39_1
; RV64IAXCHERI-NEXT:  .LBB39_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i64 addrspace(200)* %ptr, i64 %cmp, i64 %val seq_cst seq_cst
  ret void
}

define void @cmpxchg_cap_monotonic_monotonic(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_monotonic_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca3, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    cmove ca1, ca3
; RV32IXCHERI-NEXT:    mv a3, zero
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_monotonic_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB40_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB40_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB40_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB40_1
; RV32IAXCHERI-NEXT:  .LBB40_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_monotonic_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca3, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    cmove ca1, ca3
; RV64IXCHERI-NEXT:    mv a3, zero
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_monotonic_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB40_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB40_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB40_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB40_1
; RV64IAXCHERI-NEXT:  .LBB40_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val monotonic monotonic
  ret void
}

define void @cmpxchg_cap_acquire_monotonic(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_acquire_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_acquire_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB41_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB41_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB41_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB41_1
; RV32IAXCHERI-NEXT:  .LBB41_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_acquire_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_acquire_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB41_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB41_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB41_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB41_1
; RV64IAXCHERI-NEXT:  .LBB41_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val acquire monotonic
  ret void
}

define void @cmpxchg_cap_acquire_acquire(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_acquire_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 2
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_acquire_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB42_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB42_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB42_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB42_1
; RV32IAXCHERI-NEXT:  .LBB42_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_acquire_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 2
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_acquire_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB42_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB42_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB42_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB42_1
; RV64IAXCHERI-NEXT:  .LBB42_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val acquire acquire
  ret void
}

define void @cmpxchg_cap_release_monotonic(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_release_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_release_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB43_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB43_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB43_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB43_1
; RV32IAXCHERI-NEXT:  .LBB43_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_release_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_release_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB43_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB43_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB43_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB43_1
; RV64IAXCHERI-NEXT:  .LBB43_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val release monotonic
  ret void
}

define void @cmpxchg_cap_release_acquire(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_release_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 3
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_release_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB44_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB44_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB44_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB44_1
; RV32IAXCHERI-NEXT:  .LBB44_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_release_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 3
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_release_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB44_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB44_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB44_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB44_1
; RV64IAXCHERI-NEXT:  .LBB44_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val release acquire
  ret void
}

define void @cmpxchg_cap_acq_rel_monotonic(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_acq_rel_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_acq_rel_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB45_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB45_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB45_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB45_1
; RV32IAXCHERI-NEXT:  .LBB45_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_acq_rel_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_acq_rel_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB45_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB45_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB45_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB45_1
; RV64IAXCHERI-NEXT:  .LBB45_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val acq_rel monotonic
  ret void
}

define void @cmpxchg_cap_acq_rel_acquire(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_acq_rel_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 4
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_acq_rel_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB46_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB46_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB46_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB46_1
; RV32IAXCHERI-NEXT:  .LBB46_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_acq_rel_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 4
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_acq_rel_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB46_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aq ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB46_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB46_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aq a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB46_1
; RV64IAXCHERI-NEXT:  .LBB46_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val acq_rel acquire
  ret void
}

define void @cmpxchg_cap_seq_cst_monotonic(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_seq_cst_monotonic:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca4, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca4
; RV32IXCHERI-NEXT:    mv a4, zero
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_seq_cst_monotonic:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB47_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB47_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB47_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB47_1
; RV32IAXCHERI-NEXT:  .LBB47_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_seq_cst_monotonic:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca4, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca4
; RV64IXCHERI-NEXT:    mv a4, zero
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_seq_cst_monotonic:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB47_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB47_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB47_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB47_1
; RV64IAXCHERI-NEXT:  .LBB47_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val seq_cst monotonic
  ret void
}

define void @cmpxchg_cap_seq_cst_acquire(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_seq_cst_acquire:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 2
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_seq_cst_acquire:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB48_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB48_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB48_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB48_1
; RV32IAXCHERI-NEXT:  .LBB48_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_seq_cst_acquire:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 2
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_seq_cst_acquire:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB48_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB48_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB48_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB48_1
; RV64IAXCHERI-NEXT:  .LBB48_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val seq_cst acquire
  ret void
}

define void @cmpxchg_cap_seq_cst_seq_cst(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val) nounwind {
; RV32IXCHERI-LABEL: cmpxchg_cap_seq_cst_seq_cst:
; RV32IXCHERI:       # %bb.0:
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    csc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV32IXCHERI-NEXT:    csetbounds ca5, ca3, 8
; RV32IXCHERI-NEXT:    csc ca1, 0(csp)
; RV32IXCHERI-NEXT:    addi a3, zero, 5
; RV32IXCHERI-NEXT:    addi a4, zero, 5
; RV32IXCHERI-NEXT:    cmove ca1, ca5
; RV32IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV32IXCHERI-NEXT:    clc cra, 8(csp)
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV32IAXCHERI-LABEL: cmpxchg_cap_seq_cst_seq_cst:
; RV32IAXCHERI:       # %bb.0:
; RV32IAXCHERI-NEXT:  .LBB49_1: # =>This Inner Loop Header: Depth=1
; RV32IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV32IAXCHERI-NEXT:    bne a3, a1, .LBB49_3
; RV32IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB49_1 Depth=1
; RV32IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV32IAXCHERI-NEXT:    bnez a4, .LBB49_1
; RV32IAXCHERI-NEXT:  .LBB49_3:
; RV32IAXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: cmpxchg_cap_seq_cst_seq_cst:
; RV64IXCHERI:       # %bb.0:
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -32
; RV64IXCHERI-NEXT:    csc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset ca3, csp, 0
; RV64IXCHERI-NEXT:    csetbounds ca5, ca3, 16
; RV64IXCHERI-NEXT:    csc ca1, 0(csp)
; RV64IXCHERI-NEXT:    addi a3, zero, 5
; RV64IXCHERI-NEXT:    addi a4, zero, 5
; RV64IXCHERI-NEXT:    cmove ca1, ca5
; RV64IXCHERI-NEXT:    ccall __atomic_compare_exchange_cap
; RV64IXCHERI-NEXT:    clc cra, 16(csp)
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 32
; RV64IXCHERI-NEXT:    cret
;
; RV64IAXCHERI-LABEL: cmpxchg_cap_seq_cst_seq_cst:
; RV64IAXCHERI:       # %bb.0:
; RV64IAXCHERI-NEXT:  .LBB49_1: # =>This Inner Loop Header: Depth=1
; RV64IAXCHERI-NEXT:    clr.c.aqrl ca3, (ca0)
; RV64IAXCHERI-NEXT:    bne a3, a1, .LBB49_3
; RV64IAXCHERI-NEXT:  # %bb.2: # in Loop: Header=BB49_1 Depth=1
; RV64IAXCHERI-NEXT:    csc.c.aqrl a4, ca2, (ca0)
; RV64IAXCHERI-NEXT:    bnez a4, .LBB49_1
; RV64IAXCHERI-NEXT:  .LBB49_3:
; RV64IAXCHERI-NEXT:    cret
  %res = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %cmp, i8 addrspace(200)* %val seq_cst seq_cst
  ret void
}
