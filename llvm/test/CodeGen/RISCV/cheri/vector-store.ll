; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;; Ensure that we don't crash when trying to load/store a vector to/from the stack
; RUN: sed 's/addrspace(200)/addrspace(0)/g' %s | %riscv64_cheri_llc | FileCheck %s --check-prefix=HYBRID
; RUN: %riscv64_cheri_purecap_llc %s -o - | FileCheck %s --check-prefix=PURECAP

; TODO: The purecap code should also use wider loads for the adjacent elements
define <4 x i32> @vec_load(ptr addrspace(200) %src) addrspace(200) nounwind {
; HYBRID-LABEL: vec_load:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ld a2, 8(a1)
; HYBRID-NEXT:    ld a1, 0(a1)
; HYBRID-NEXT:    sd a2, 8(a0)
; HYBRID-NEXT:    sd a1, 0(a0)
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: vec_load:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lw a2, 12(ca1)
; PURECAP-NEXT:    lw a3, 8(ca1)
; PURECAP-NEXT:    lw a4, 4(ca1)
; PURECAP-NEXT:    lw a1, 0(ca1)
; PURECAP-NEXT:    sw a2, 12(ca0)
; PURECAP-NEXT:    sw a3, 8(ca0)
; PURECAP-NEXT:    sw a4, 4(ca0)
; PURECAP-NEXT:    sw a1, 0(ca0)
; PURECAP-NEXT:    ret
  %ret = load <4 x i32>, ptr addrspace(200) %src, align 16
  ret <4 x i32> %ret
}

; TODO: The purecap code should also use wider stores for adjacent elements.
define void @vec_store(i32 %0, ptr addrspace(200) %dst) addrspace(200) nounwind {
; HYBRID-LABEL: vec_store:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    sw a0, 4(a1)
; HYBRID-NEXT:    sw zero, 0(a1)
; HYBRID-NEXT:    sd zero, 8(a1)
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: vec_store:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    sw zero, 12(ca1)
; PURECAP-NEXT:    sw zero, 8(ca1)
; PURECAP-NEXT:    sw a0, 4(ca1)
; PURECAP-NEXT:    sw zero, 0(ca1)
; PURECAP-NEXT:    ret
  %vecins = insertelement <4 x i32> zeroinitializer, i32 %0, i32 1
  store <4 x i32> %vecins, ptr addrspace(200) %dst, align 16
  ret void
}
