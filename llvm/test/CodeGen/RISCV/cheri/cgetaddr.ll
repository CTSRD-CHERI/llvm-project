; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
;; Check that we can elide the CGetAddr pseudo instruction in cases where it
;; feeds directly into another arithmetic instruction.
; RUN: %riscv64_cheri_purecap_llc < %s | FileCheck %s
;; Check that we can emit an object file in addition to textual assembly.
; RUN: %riscv64_cheri_purecap_llc -filetype=obj < %s -o /dev/null

;; Make sure we emit a tag-clearing instruction here since we mustn't leak capabilities.
define i64 @getaddr(i8 addrspace(200)* %arg) nounwind {
; CHECK-LABEL: getaddr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    cret
entry:
  %ret = tail call i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)* %arg)
  ret i64 %ret
}

;; We can avoid the getaddr instruction here and emit `addi 1` instead.
define i64 @getaddr_plus_one(i8 addrspace(200)* %arg) nounwind {
; CHECK-LABEL: getaddr_plus_one:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    cret
entry:
  %addr = tail call i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)* %arg)
  %ret = add i64 %addr, 1
  ret i64 %ret
}

;; Calls also need to invalidate the metadata.
define i64 @getaddr_call(i8 addrspace(200)* %arg) nounwind {
; CHECK-LABEL: getaddr_call:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    ctail use
entry:
  %addr = tail call i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)* %arg)
  %ret = tail call i64 @use(i64 %addr)
  ret i64 %ret
}

;; In this case it is important that we still emit the GetAddr even though the
;; subtraction is removed, since we could otherwise end up leaking capability metadata.
define i64 @getaddr_minus_zero(i8 addrspace(200)* %arg) nounwind {
; CHECK-LABEL: getaddr_minus_zero:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    cret
entry:
  %addr = tail call i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)* %arg)
  %ret = sub i64 %addr, 0
  ret i64 %ret
}

declare i64 @use(i64)
declare i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)*)
