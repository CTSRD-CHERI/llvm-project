; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; After merging https://reviews.llvm.org/D114950, we got CHERI when compiling
; code for purecap since the logic to load immediates from constant pools
; assumed that it could use LD after calling getAddr() from selectImm().

; RUN: %riscv32_cheri_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=CHECK-ILP32 %s
; RUN: %riscv32_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=CHECK-IL32PC64 %s
; RUN: %riscv64_cheri_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=CHECK-LP64 %s
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs < %s \
; RUN:   | FileCheck --check-prefix=CHECK-L64PC128 %s

define i64 @add_constant(i64 %arg) nounwind {
; CHECK-ILP32-LABEL: add_constant:
; CHECK-ILP32:       # %bb.0:
; CHECK-ILP32-NEXT:    lui a2, 554580
; CHECK-ILP32-NEXT:    addi a2, a2, 801
; CHECK-ILP32-NEXT:    add a2, a0, a2
; CHECK-ILP32-NEXT:    sltu a0, a2, a0
; CHECK-ILP32-NEXT:    lui a3, 74565
; CHECK-ILP32-NEXT:    addi a3, a3, 1656
; CHECK-ILP32-NEXT:    add a1, a1, a3
; CHECK-ILP32-NEXT:    add a1, a1, a0
; CHECK-ILP32-NEXT:    mv a0, a2
; CHECK-ILP32-NEXT:    ret
;
; CHECK-IL32PC64-LABEL: add_constant:
; CHECK-IL32PC64:       # %bb.0:
; CHECK-IL32PC64-NEXT:    lui a2, 554580
; CHECK-IL32PC64-NEXT:    addi a2, a2, 801
; CHECK-IL32PC64-NEXT:    add a2, a0, a2
; CHECK-IL32PC64-NEXT:    sltu a0, a2, a0
; CHECK-IL32PC64-NEXT:    lui a3, 74565
; CHECK-IL32PC64-NEXT:    addi a3, a3, 1656
; CHECK-IL32PC64-NEXT:    add a1, a1, a3
; CHECK-IL32PC64-NEXT:    add a1, a1, a0
; CHECK-IL32PC64-NEXT:    mv a0, a2
; CHECK-IL32PC64-NEXT:    ret
;
; CHECK-LP64-LABEL: add_constant:
; CHECK-LP64:       # %bb.0:
; CHECK-LP64-NEXT:    lui a1, %hi(.LCPI0_0)
; CHECK-LP64-NEXT:    ld a1, %lo(.LCPI0_0)(a1)
; CHECK-LP64-NEXT:    add a0, a0, a1
; CHECK-LP64-NEXT:    ret
;
; CHECK-L64PC128-LABEL: add_constant:
; CHECK-L64PC128:       # %bb.0:
; CHECK-L64PC128-NEXT:  .LBB0_1: # Label of block must be emitted
; CHECK-L64PC128-NEXT:    auipcc ca1, %pcrel_hi(.LCPI0_0)
; CHECK-L64PC128-NEXT:    cincoffset ca1, ca1, %pcrel_lo(.LBB0_1)
; CHECK-L64PC128-NEXT:    ld a1, 0(ca1)
; CHECK-L64PC128-NEXT:    add a0, a0, a1
; CHECK-L64PC128-NEXT:    ret
  %add = add i64 %arg, 1311768467139281697
  ret i64 %add
}
