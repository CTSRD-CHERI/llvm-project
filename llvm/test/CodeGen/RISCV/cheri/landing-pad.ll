; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Previously crashed at -O0 with "Impossible reg-to-reg copy" (optimisations
; folded the COPY such that it didn't trip up the verifier).
; RUN: %riscv32_cheri_purecap_llc -verify-machineinstrs -O0 < %s \
; RUN:   | FileCheck -check-prefix=RV32IXCHERI %s
; RUN: %riscv64_cheri_purecap_llc -verify-machineinstrs -O0 < %s \
; RUN:   | FileCheck -check-prefix=RV64IXCHERI %s

declare void @throw_exception() addrspace(200)

declare i32 @__gxx_personality_v0(...) addrspace(200)

declare i8 addrspace(200)* @__cxa_begin_catch(i8 addrspace(200)*) addrspace(200)

declare void @__cxa_end_catch() addrspace(200)

define void @test() addrspace(200) personality i8 addrspace(200)* bitcast (i32 (...) addrspace(200)* @__gxx_personality_v0 to i8 addrspace(200)*) {
; RV32IXCHERI-LABEL: test:
; RV32IXCHERI:       # %bb.0: # %entry
; RV32IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV32IXCHERI-NEXT:    .cfi_def_cfa_offset 16
; RV32IXCHERI-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; RV32IXCHERI-NEXT:    .cfi_offset ra, -8
; RV32IXCHERI-NEXT:  .Ltmp0:
; RV32IXCHERI-NEXT:    ccall throw_exception
; RV32IXCHERI-NEXT:  .Ltmp1:
; RV32IXCHERI-NEXT:    j .LBB0_2
; RV32IXCHERI-NEXT:  .LBB0_1: # %lpad
; RV32IXCHERI-NEXT:  .Ltmp2:
; RV32IXCHERI-NEXT:    ccall __cxa_begin_catch
; RV32IXCHERI-NEXT:    ccall __cxa_end_catch
; RV32IXCHERI-NEXT:    j .LBB0_2
; RV32IXCHERI-NEXT:  .LBB0_2: # %try.cont
; RV32IXCHERI-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; RV32IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV32IXCHERI-NEXT:    cret
;
; RV64IXCHERI-LABEL: test:
; RV64IXCHERI:       # %bb.0: # %entry
; RV64IXCHERI-NEXT:    cincoffset csp, csp, -16
; RV64IXCHERI-NEXT:    .cfi_def_cfa_offset 16
; RV64IXCHERI-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; RV64IXCHERI-NEXT:    .cfi_offset ra, -16
; RV64IXCHERI-NEXT:  .Ltmp0:
; RV64IXCHERI-NEXT:    ccall throw_exception
; RV64IXCHERI-NEXT:  .Ltmp1:
; RV64IXCHERI-NEXT:    j .LBB0_2
; RV64IXCHERI-NEXT:  .LBB0_1: # %lpad
; RV64IXCHERI-NEXT:  .Ltmp2:
; RV64IXCHERI-NEXT:    ccall __cxa_begin_catch
; RV64IXCHERI-NEXT:    ccall __cxa_end_catch
; RV64IXCHERI-NEXT:    j .LBB0_2
; RV64IXCHERI-NEXT:  .LBB0_2: # %try.cont
; RV64IXCHERI-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; RV64IXCHERI-NEXT:    cincoffset csp, csp, 16
; RV64IXCHERI-NEXT:    cret
entry:
  invoke void @throw_exception() to label %try.cont unwind label %lpad

lpad:
  %0 = landingpad { i8 addrspace(200)*, i32 } catch i8 addrspace(200)* null
  %1 = extractvalue { i8 addrspace(200)*, i32 } %0, 0
  %2 = tail call i8 addrspace(200)* @__cxa_begin_catch(i8 addrspace(200)* %1)
  tail call void @__cxa_end_catch()
  br label %try.cont

try.cont:
  ret void
}
