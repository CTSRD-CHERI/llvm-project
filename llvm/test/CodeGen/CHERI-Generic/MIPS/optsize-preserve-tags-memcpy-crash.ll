; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/optsize-preserve-tags-memcpy-crash.ll
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi purecap < %s -o - | FileCheck %s
; The following code copying 31 bytes (with capability alignment) using the
; must_preserve_tags attribute used to trigger a "(Align < CapSize)" assertion
; inside diagnoseInefficientCheriMemOp() when compiling with -Oz.
; This function should not be called since the reason we are falling back to memcpy
; is that the load/store limit is reached (and not the alignment).
; However, the code was checking for limit reached using a simple `(CapSize * Limit) < Size`
; check which fails here since the last 15 bytes need four (8 + 4 + 2 + 1 bytes) copies on
; architectures where LLVM does not emit misaligned loads/stores.

define hidden void @optnone_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memcpy:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    clc $c1, $zero, 0($c4)
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
; CHECK-NEXT:    clb $1, $zero, 30($c4)
; CHECK-NEXT:    csb $1, $zero, 30($c3)
; CHECK-NEXT:    clh $1, $zero, 28($c4)
; CHECK-NEXT:    csh $1, $zero, 28($c3)
; CHECK-NEXT:    clw $1, $zero, 24($c4)
; CHECK-NEXT:    csw $1, $zero, 24($c3)
; CHECK-NEXT:    cld $1, $zero, 16($c4)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csd $1, $zero, 16($c3)
bb:
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memcpy:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(memcpy)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    daddiu $4, $zero, 31
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
bb:
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind {
; CHECK-LABEL: default_preserve_tags_memcpy:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    clc $c1, $zero, 0($c4)
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
; CHECK-NEXT:    clb $1, $zero, 30($c4)
; CHECK-NEXT:    csb $1, $zero, 30($c3)
; CHECK-NEXT:    clh $1, $zero, 28($c4)
; CHECK-NEXT:    csh $1, $zero, 28($c3)
; CHECK-NEXT:    clw $1, $zero, 24($c4)
; CHECK-NEXT:    csw $1, $zero, 24($c3)
; CHECK-NEXT:    cld $1, $zero, 16($c4)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csd $1, $zero, 16($c3)
bb:
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optnone_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memmove:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    clc $c1, $zero, 0($c4)
; CHECK-NEXT:    cld $1, $zero, 16($c4)
; CHECK-NEXT:    clw $2, $zero, 24($c4)
; CHECK-NEXT:    clh $3, $zero, 28($c4)
; CHECK-NEXT:    clb $4, $zero, 30($c4)
; CHECK-NEXT:    csb $4, $zero, 30($c3)
; CHECK-NEXT:    csh $3, $zero, 28($c3)
; CHECK-NEXT:    csw $2, $zero, 24($c3)
; CHECK-NEXT:    csd $1, $zero, 16($c3)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
bb:
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memmove:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    cincoffset $c11, $c11, -16
; CHECK-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(memmove)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    daddiu $4, $zero, 31
; CHECK-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 16
bb:
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind{
; CHECK-LABEL: default_preserve_tags_memmove:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    clc $c1, $zero, 0($c4)
; CHECK-NEXT:    cld $1, $zero, 16($c4)
; CHECK-NEXT:    clb $2, $zero, 30($c4)
; CHECK-NEXT:    clh $3, $zero, 28($c4)
; CHECK-NEXT:    clw $4, $zero, 24($c4)
; CHECK-NEXT:    csb $2, $zero, 30($c3)
; CHECK-NEXT:    csh $3, $zero, 28($c3)
; CHECK-NEXT:    csw $4, $zero, 24($c3)
; CHECK-NEXT:    csd $1, $zero, 16($c3)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csc $c1, $zero, 0($c3)
bb:
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

declare void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
declare void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
