; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/purecap-jumptable.ll
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi purecap < %s -o - | FileCheck %s
; Check that we can generate jump tables for switch statements.
; TODO: this is currently not implemented for CHERI-RISC-V

define void @below_threshold(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: below_threshold:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sll $2, $4, 0
; CHECK-NEXT:    addiu $1, $zero, 2
; CHECK-NEXT:    beq $2, $1, .LBB0_3
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB0_1: # %entry
; CHECK-NEXT:    addiu $1, $zero, 1
; CHECK-NEXT:    bne $2, $1, .LBB0_4
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB0_2: # %bb1
; CHECK-NEXT:    addiu $1, $zero, 4
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB0_3: # %bb2
; CHECK-NEXT:    addiu $1, $zero, 3
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB0_4: # %exit
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    nop
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; For RISC-V the jump table threshold is set to 5 cases, but MIPS uses the default
; value of 4 (set in llvm/lib/CodeGen/TargetLoweringBase.cpp).
define void @above_threshold_mips(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: above_threshold_mips:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sll $1, $4, 0
; CHECK-NEXT:    addiu $1, $1, -1
; CHECK-NEXT:    sltiu $3, $1, 4
; CHECK-NEXT:    dsll $2, $1, 32
; CHECK-NEXT:    beqz $3, .LBB1_6
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB1_1: # %entry
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c1, %captab20(.LJTI1_0)($c1)
; CHECK-NEXT:    dsrl $1, $2, 32
; CHECK-NEXT:    dsll $1, $1, 2
; CHECK-NEXT:    clw $1, $1, 0($c1)
; CHECK-NEXT:    cgetaddr $2, $c1
; CHECK-NEXT:    daddu $1, $2, $1
; CHECK-NEXT:    cgetpccsetaddr $c1, $1
; CHECK-NEXT:    csealentry $c1, $c1
; CHECK-NEXT:    cjr $c1
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB1_2: # %bb1
; CHECK-NEXT:    addiu $1, $zero, 4
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB1_3: # %bb2
; CHECK-NEXT:    addiu $1, $zero, 3
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB1_4: # %bb3
; CHECK-NEXT:    addiu $1, $zero, 2
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB1_5: # %bb4
; CHECK-NEXT:    addiu $1, $zero, 1
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB1_6: # %exit
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    nop
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  i32 3, label %bb3
  i32 4, label %bb4
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
bb3:
  store i32 2, i32 addrspace(200)* %out
  br label %exit
bb4:
  store i32 1, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; UTC_ARGS: --disable
; CHECK-LABEL: .LJTI1_0:
; CHECK-NEXT:    .4byte .LBB1_2-.LJTI1_0
; CHECK-NEXT:    .4byte .LBB1_3-.LJTI1_0
; CHECK-NEXT:    .4byte .LBB1_4-.LJTI1_0
; CHECK-NEXT:    .4byte .LBB1_5-.LJTI1_0
; UTC_ARGS: --enable

define void @above_threshold_all(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: above_threshold_all:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sll $1, $4, 0
; CHECK-NEXT:    addiu $1, $1, -1
; CHECK-NEXT:    sltiu $3, $1, 6
; CHECK-NEXT:    dsll $2, $1, 32
; CHECK-NEXT:    beqz $3, .LBB2_8
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB2_1: # %entry
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    clcbi $c1, %captab20(.LJTI2_0)($c1)
; CHECK-NEXT:    dsrl $1, $2, 32
; CHECK-NEXT:    dsll $1, $1, 2
; CHECK-NEXT:    clw $1, $1, 0($c1)
; CHECK-NEXT:    cgetaddr $2, $c1
; CHECK-NEXT:    daddu $1, $2, $1
; CHECK-NEXT:    cgetpccsetaddr $c1, $1
; CHECK-NEXT:    csealentry $c1, $c1
; CHECK-NEXT:    cjr $c1
; CHECK-NEXT:    nop
; CHECK-NEXT:  .LBB2_2: # %bb1
; CHECK-NEXT:    addiu $1, $zero, 4
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_3: # %bb2
; CHECK-NEXT:    addiu $1, $zero, 3
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_4: # %bb3
; CHECK-NEXT:    addiu $1, $zero, 2
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_5: # %bb4
; CHECK-NEXT:    addiu $1, $zero, 1
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_6: # %bb5
; CHECK-NEXT:    addiu $1, $zero, 100
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_7: # %bb6
; CHECK-NEXT:    addiu $1, $zero, 200
; CHECK-NEXT:    csw $1, $zero, 0($c3)
; CHECK-NEXT:  .LBB2_8: # %exit
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    nop
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  i32 3, label %bb3
  i32 4, label %bb4
  i32 5, label %bb5
  i32 6, label %bb6
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
bb3:
  store i32 2, i32 addrspace(200)* %out
  br label %exit
bb4:
  store i32 1, i32 addrspace(200)* %out
  br label %exit
bb5:
  store i32 100, i32 addrspace(200)* %out
  br label %exit
bb6:
  store i32 200, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; UTC_ARGS: --disable
; CHECK-LABEL: .LJTI2_0:
; CHECK-NEXT:    .4byte .LBB2_2-.LJTI2_0
; CHECK-NEXT:    .4byte .LBB2_3-.LJTI2_0
; CHECK-NEXT:    .4byte .LBB2_4-.LJTI2_0
; CHECK-NEXT:    .4byte .LBB2_5-.LJTI2_0
; CHECK-NEXT:    .4byte .LBB2_6-.LJTI2_0
; CHECK-NEXT:    .4byte .LBB2_7-.LJTI2_0
; UTC_ARGS: --enable
