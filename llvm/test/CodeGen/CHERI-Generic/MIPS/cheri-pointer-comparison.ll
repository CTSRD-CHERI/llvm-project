; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cheri-pointer-comparison.ll
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi n64 %s -o - | FileCheck %s --check-prefix=HYBRID
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi purecap %s -o - | FileCheck %s --check-prefix=PURECAP
; This series of tests serves two purposes.
; The first purpose is to check that we generate efficient code for all
; capability comparisons, conditional branches and conditional selects.
; The second purpose is to check that we generate code that honours the
; signedness of the IR (which is always unsigned when emitting IR for C
; langage-level pointers, whereas __intcap uses the signedness of the type).
; NGINX has a loop with (void*)-1 as a sentinel value which was never entered
; due to this bug.
; Original issue: https://github.com/CTSRD-CHERI/llvm/issues/199
; Fixed upstream in https://reviews.llvm.org/D70917
; (be15dfa88fb1ed94d12f374797f98ede6808f809)
;
; Original source code showing this surprising behaviour (for CHERI-MIPS):
; int
; main(void)
; {
;         void *a, *b;
;
;         a = (void *)0x12033091e;
;         b = (void *)0xffffffffffffffff;
;
;         if (a < b) {
;                 printf("ok\n");
;                 return (0);
;         }
;
;         printf("surprising result\n");
;         return (1);
; }
;
; Morello had a similar code generation issue for selects, where a less than
; generated a csel instruction using a singed predicate instead of the unsigned
; one:
; void *select_lt(void *p1, void *p2) {
;   return p1 < p2 ? p1 : p2;
; }
; See https://git.morello-project.org/morello/llvm-project/-/issues/22

define i32 @eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: eq:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    ceq $2, $c3, $c4
;
; PURECAP-LABEL: eq:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    ceq $2, $c3, $c4
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ne:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cne $2, $c3, $c4
;
; PURECAP-LABEL: ne:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cne $2, $c3, $c4
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ugt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cltu $2, $c4, $c3
;
; PURECAP-LABEL: ugt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cltu $2, $c4, $c3
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: uge:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cleu $2, $c4, $c3
;
; PURECAP-LABEL: uge:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cleu $2, $c4, $c3
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ult:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cltu $2, $c3, $c4
;
; PURECAP-LABEL: ult:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cltu $2, $c3, $c4
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ule:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cleu $2, $c3, $c4
;
; PURECAP-LABEL: ule:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cleu $2, $c3, $c4
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sgt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    clt $2, $c4, $c3
;
; PURECAP-LABEL: sgt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    clt $2, $c4, $c3
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sge:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cle $2, $c4, $c3
;
; PURECAP-LABEL: sge:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cle $2, $c4, $c3
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: slt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    clt $2, $c3, $c4
;
; PURECAP-LABEL: slt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    clt $2, $c3, $c4
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sle:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cle $2, $c3, $c4
;
; PURECAP-LABEL: sle:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cle $2, $c3, $c4
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: eq_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    ceq $2, $c3, $cnull
;
; PURECAP-LABEL: eq_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    ceq $2, $c3, $cnull
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ne_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cne $2, $c3, $cnull
;
; PURECAP-LABEL: ne_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cne $2, $c3, $cnull
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ugt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cltu $2, $cnull, $c3
;
; PURECAP-LABEL: ugt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cltu $2, $cnull, $c3
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: uge_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cleu $2, $cnull, $c3
;
; PURECAP-LABEL: uge_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cleu $2, $cnull, $c3
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ult_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cltu $2, $c3, $cnull
;
; PURECAP-LABEL: ult_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cltu $2, $c3, $cnull
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ule_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cleu $2, $c3, $cnull
;
; PURECAP-LABEL: ule_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cleu $2, $c3, $cnull
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sgt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    clt $2, $cnull, $c3
;
; PURECAP-LABEL: sgt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    clt $2, $cnull, $c3
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sge_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cle $2, $cnull, $c3
;
; PURECAP-LABEL: sge_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cle $2, $cnull, $c3
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: slt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    clt $2, $c3, $cnull
;
; PURECAP-LABEL: slt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    clt $2, $c3, $cnull
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sle_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cle $2, $c3, $cnull
;
; PURECAP-LABEL: sle_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cle $2, $c3, $cnull
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i8 addrspace(200)* @select_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ceq $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_eq:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ceq $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cne $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ne:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cne $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cltu $1, $c4, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ugt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cltu $1, $c4, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cleu $1, $c4, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_uge:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cleu $1, $c4, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cltu $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ult:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cltu $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cleu $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ule:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cleu $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    clt $1, $c4, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sgt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    clt $1, $c4, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cle $1, $c4, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sge:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cle $1, $c4, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    clt $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_slt:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    clt $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cle $1, $c3, $c4
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sle:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cle $1, $c3, $c4
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_eq_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ceq $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_eq_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ceq $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cne $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ne_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cne $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cltu $1, $cnull, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ugt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cltu $1, $cnull, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cleu $1, $cnull, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_uge_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cleu $1, $cnull, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cltu $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ult_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cltu $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cleu $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_ule_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cleu $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    clt $1, $cnull, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sgt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    clt $1, $cnull, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cle $1, $cnull, $c3
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sge_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cle $1, $cnull, $c3
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    clt $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_slt_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    clt $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    cle $1, $c3, $cnull
; HYBRID-NEXT:    cmovn $c4, $c3, $1
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    cmove $c3, $c4
;
; PURECAP-LABEL: select_sle_null:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cle $1, $c3, $cnull
; PURECAP-NEXT:    cmovn $c4, $c3, $1
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cmove $c3, $c4
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

declare i32 @func1() nounwind
declare i32 @func2() nounwind

define i32 @branch_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_eq:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_eq)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cne $2, $c3, $c4
; HYBRID-NEXT:    beqz $2, .LBB40_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_eq)))
; HYBRID-NEXT:  # %bb.1: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp0, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp0:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB40_2: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp1, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp1:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_eq:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cne $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    beqz $1, .LBB40_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB40_2: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ne:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ne)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    ceq $2, $c3, $c4
; HYBRID-NEXT:    bnez $2, .LBB41_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ne)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp2, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp2:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB41_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp3, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp3:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ne:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    ceq $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB41_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB41_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ugt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ugt)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cleu $2, $c3, $c4
; HYBRID-NEXT:    bnez $2, .LBB42_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ugt)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp4, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp4:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB42_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp5, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp5:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ugt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cleu $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB42_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB42_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_uge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_uge)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cltu $2, $c3, $c4
; HYBRID-NEXT:    bnez $2, .LBB43_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_uge)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp6, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp6:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB43_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp7, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp7:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_uge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cltu $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB43_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB43_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ult:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ult)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cleu $2, $c4, $c3
; HYBRID-NEXT:    bnez $2, .LBB44_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ult)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp8, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp8:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB44_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp9, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp9:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ult:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cleu $1, $c4, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB44_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB44_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ule:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ule)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cltu $2, $c4, $c3
; HYBRID-NEXT:    bnez $2, .LBB45_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ule)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp10, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp10:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB45_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp11, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp11:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ule:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cltu $1, $c4, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB45_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB45_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sgt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sgt)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cle $2, $c3, $c4
; HYBRID-NEXT:    bnez $2, .LBB46_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sgt)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp12, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp12:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB46_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp13, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp13:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sgt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cle $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB46_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB46_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sge)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    clt $2, $c3, $c4
; HYBRID-NEXT:    bnez $2, .LBB47_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sge)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp14, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp14:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB47_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp15, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp15:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    clt $1, $c3, $c4
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB47_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB47_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_slt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_slt)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cle $2, $c4, $c3
; HYBRID-NEXT:    bnez $2, .LBB48_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_slt)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp16, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp16:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB48_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp17, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp17:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_slt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cle $1, $c4, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB48_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB48_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sle:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sle)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    clt $2, $c4, $c3
; HYBRID-NEXT:    bnez $2, .LBB49_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sle)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp18, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp18:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB49_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp19, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp19:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sle:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    clt $1, $c4, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB49_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB49_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_eq_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_eq_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cbez $c3, .LBB50_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_eq_null)))
; HYBRID-NEXT:  # %bb.1: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp20, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp20:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB50_2: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp21, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp21:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_eq_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $1
; PURECAP-NEXT:    cbez $c3, .LBB50_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB50_2: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ne_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ne_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cbez $c3, .LBB51_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ne_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp22, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp22:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB51_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp23, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp23:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ne_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $1
; PURECAP-NEXT:    cbez $c3, .LBB51_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB51_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ugt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ugt_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cleu $2, $c3, $cnull
; HYBRID-NEXT:    bnez $2, .LBB52_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ugt_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp24, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp24:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB52_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp25, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp25:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ugt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cleu $1, $c3, $cnull
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB52_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB52_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_uge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_uge_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cltu $2, $c3, $cnull
; HYBRID-NEXT:    bnez $2, .LBB53_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_uge_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp26, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp26:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB53_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp27, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp27:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_uge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cltu $1, $c3, $cnull
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB53_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB53_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ult_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ult_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cleu $2, $cnull, $c3
; HYBRID-NEXT:    bnez $2, .LBB54_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ult_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp28, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp28:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB54_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp29, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp29:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ult_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cleu $1, $cnull, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB54_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB54_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ule_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_ule_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cltu $2, $cnull, $c3
; HYBRID-NEXT:    bnez $2, .LBB55_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_ule_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp30, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp30:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB55_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp31, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp31:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_ule_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cltu $1, $cnull, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB55_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB55_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sgt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sgt_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cle $2, $c3, $cnull
; HYBRID-NEXT:    bnez $2, .LBB56_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sgt_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp32, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp32:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB56_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp33, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp33:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sgt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cle $1, $c3, $cnull
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB56_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB56_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sge_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    clt $2, $c3, $cnull
; HYBRID-NEXT:    bnez $2, .LBB57_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sge_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp34, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp34:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB57_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp35, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp35:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    clt $1, $c3, $cnull
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB57_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB57_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_slt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_slt_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    cle $2, $cnull, $c3
; HYBRID-NEXT:    bnez $2, .LBB58_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_slt_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp36, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp36:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB58_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp37, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp37:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_slt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cle $1, $cnull, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB58_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB58_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sle_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 8($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $gp, 0($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    lui $1, %hi(%neg(%gp_rel(branch_sle_null)))
; HYBRID-NEXT:    daddu $1, $1, $25
; HYBRID-NEXT:    clt $2, $cnull, $c3
; HYBRID-NEXT:    bnez $2, .LBB59_2
; HYBRID-NEXT:    daddiu $gp, $1, %lo(%neg(%gp_rel(branch_sle_null)))
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    ld $25, %call16(func1)($gp)
; HYBRID-NEXT:    .reloc .Ltmp38, R_MIPS_JALR, func1
; HYBRID-NEXT:  .Ltmp38:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
; HYBRID-NEXT:  .LBB59_2: # %if.end
; HYBRID-NEXT:    ld $25, %call16(func2)($gp)
; HYBRID-NEXT:    .reloc .Ltmp39, R_MIPS_JALR, func2
; HYBRID-NEXT:  .Ltmp39:
; HYBRID-NEXT:    jalr $25
; HYBRID-NEXT:    nop
; HYBRID-NEXT:    ld $gp, 0($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 8($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
;
; PURECAP-LABEL: branch_sle_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    csc $c17, $zero, 0($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    clt $1, $cnull, $c3
; PURECAP-NEXT:    lui $2, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; PURECAP-NEXT:    daddiu $2, $2, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; PURECAP-NEXT:    cgetpccincoffset $c1, $2
; PURECAP-NEXT:    bnez $1, .LBB59_2
; PURECAP-NEXT:    nop
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    clcbi $c12, %capcall20(func1)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
; PURECAP-NEXT:  .LBB59_2: # %if.end
; PURECAP-NEXT:    clcbi $c12, %capcall20(func2)($c1)
; PURECAP-NEXT:    cjalr $c12, $c17
; PURECAP-NEXT:    nop
; PURECAP-NEXT:    clc $c17, $zero, 0($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}
