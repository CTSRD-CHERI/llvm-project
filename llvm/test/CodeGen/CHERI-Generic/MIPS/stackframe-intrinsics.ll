; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/stackframe-intrinsics.ll
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi purecap %s -o - < %s | FileCheck %s --check-prefix=PURECAP
; RUN: sed 's/addrspace(200)/addrspace(0)/g' %s | llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi n64 | FileCheck %s --check-prefix HYBRID
; Check that we can lower llvm.frameaddress/llvm.returnaddress

; Capability-Inspection Instructions

define dso_local ptr addrspace(200) @frameaddr() addrspace(200) nounwind {
; PURECAP-LABEL: frameaddr:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -48
; PURECAP-NEXT:    csc $c24, $zero, 32($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; PURECAP-NEXT:    cincoffset $c24, $c11, $zero
; PURECAP-NEXT:    csc $c24, $zero, 0($c24)
; PURECAP-NEXT:    cmove $c3, $c24
; PURECAP-NEXT:    cincoffset $c11, $c24, $zero
; PURECAP-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    clc $c24, $zero, 32($c11) # 16-byte Folded Reload
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 48
;
; HYBRID-LABEL: frameaddr:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -32
; HYBRID-NEXT:    sd $ra, 24($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd $fp, 16($sp) # 8-byte Folded Spill
; HYBRID-NEXT:    move $fp, $sp
; HYBRID-NEXT:    sd $fp, 0($fp)
; HYBRID-NEXT:    move $2, $fp
; HYBRID-NEXT:    move $sp, $fp
; HYBRID-NEXT:    ld $fp, 16($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld $ra, 24($sp) # 8-byte Folded Reload
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 32
entry:
  %b = alloca ptr addrspace(200), align 16, addrspace(200)
  %0 = call ptr addrspace(200) @llvm.frameaddress.p200(i32 0)
  store ptr addrspace(200) %0, ptr addrspace(200) %b, align 16
  %1 = load ptr addrspace(200), ptr addrspace(200) %b, align 16
  ret ptr addrspace(200) %1
}

declare ptr addrspace(200) @llvm.frameaddress.p200(i32 immarg) addrspace(200)

define dso_local ptr addrspace(200) @retaddr() addrspace(200) nounwind {
; PURECAP-LABEL: retaddr:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset $c11, $c11, -16
; PURECAP-NEXT:    cmove $c3, $c17
; PURECAP-NEXT:    csc $c17, $zero, 0($c11)
; PURECAP-NEXT:    cjr $c17
; PURECAP-NEXT:    cincoffset $c11, $c11, 16
;
; HYBRID-LABEL: retaddr:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    daddiu $sp, $sp, -16
; HYBRID-NEXT:    sd $ra, 0($sp)
; HYBRID-NEXT:    move $2, $ra
; HYBRID-NEXT:    jr $ra
; HYBRID-NEXT:    daddiu $sp, $sp, 16
entry:
  %b = alloca ptr addrspace(200), align 16, addrspace(200)
  %0 = call ptr addrspace(200) @llvm.returnaddress.p200(i32 0)
  store ptr addrspace(200) %0, ptr addrspace(200) %b, align 16
  %1 = load ptr addrspace(200), ptr addrspace(200) %b, align 16
  ret ptr addrspace(200) %1
}

declare ptr addrspace(200) @llvm.returnaddress.p200(i32 immarg) addrspace(200)
