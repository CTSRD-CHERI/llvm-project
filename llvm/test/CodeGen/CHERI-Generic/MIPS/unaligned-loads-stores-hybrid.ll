; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --force-update --function-signature --scrub-attributes
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/unaligned-loads-stores-hybrid.ll
; RUN: %cheri128_llc --relocation-model=pic %s -o - | FileCheck %s

; ModuleID = 'global.c'

@a1 = global i64 0, align 1
@a2 = global i64 0, align 2
@a4 = global i64 0, align 4
@a8 = global i64 0, align 8


define i64 @load_global_i64_align_1(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: load_global_i64_align_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(load_global_i64_align_1)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(load_global_i64_align_1)))
; CHECK-NEXT:    ld $1, %got_disp(a1)($1)
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    clbu $1, $zero, 6($c1)
; CHECK-NEXT:    clbu $2, $zero, 7($c1)
; CHECK-NEXT:    dsll $1, $1, 8
; CHECK-NEXT:    clbu $3, $zero, 4($c1)
; CHECK-NEXT:    clbu $4, $zero, 5($c1)
; CHECK-NEXT:    or $1, $1, $2
; CHECK-NEXT:    dsll $2, $3, 8
; CHECK-NEXT:    or $2, $2, $4
; CHECK-NEXT:    dsll $2, $2, 16
; CHECK-NEXT:    clbu $3, $zero, 2($c1)
; CHECK-NEXT:    or $1, $2, $1
; CHECK-NEXT:    clbu $2, $zero, 3($c1)
; CHECK-NEXT:    dsll $3, $3, 8
; CHECK-NEXT:    clbu $4, $zero, 0($c1)
; CHECK-NEXT:    clbu $5, $zero, 1($c1)
; CHECK-NEXT:    or $2, $3, $2
; CHECK-NEXT:    dsll $3, $4, 8
; CHECK-NEXT:    or $3, $3, $5
; CHECK-NEXT:    dsll $3, $3, 16
; CHECK-NEXT:    or $2, $3, $2
; CHECK-NEXT:    dsll $2, $2, 32
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    or $2, $2, $1
entry:
  %ret = load i64, i64 addrspace(200)* addrspacecast(i64* @a1 to i64 addrspace(200)*), align 1
  ret i64 %ret
}

define i64 @load_global_i64_align_2(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: load_global_i64_align_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(load_global_i64_align_2)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(load_global_i64_align_2)))
; CHECK-NEXT:    ld $1, %got_disp(a2)($1)
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    clhu $1, $zero, 4($c1)
; CHECK-NEXT:    clhu $2, $zero, 6($c1)
; CHECK-NEXT:    dsll $1, $1, 16
; CHECK-NEXT:    clhu $3, $zero, 0($c1)
; CHECK-NEXT:    clhu $4, $zero, 2($c1)
; CHECK-NEXT:    or $1, $1, $2
; CHECK-NEXT:    dsll $2, $3, 16
; CHECK-NEXT:    or $2, $2, $4
; CHECK-NEXT:    dsll $2, $2, 32
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    or $2, $2, $1
entry:
  %ret = load i64, i64 addrspace(200)* addrspacecast(i64* @a2 to i64 addrspace(200)*), align 2
  ret i64 %ret
}

define i64 @load_global_i64_align_4(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: load_global_i64_align_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(load_global_i64_align_4)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(load_global_i64_align_4)))
; CHECK-NEXT:    ld $1, %got_disp(a4)($1)
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    clwu $1, $zero, 0($c1)
; CHECK-NEXT:    clwu $2, $zero, 4($c1)
; CHECK-NEXT:    dsll $1, $1, 32
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    or $2, $1, $2
entry:
  %ret = load i64, i64 addrspace(200)* addrspacecast(i64* @a4 to i64 addrspace(200)*), align 4
  ret i64 %ret
}

define i64 @load_global_i64_align_8(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: load_global_i64_align_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(load_global_i64_align_8)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(load_global_i64_align_8)))
; CHECK-NEXT:    ld $1, %got_disp(a8)($1)
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    cld $2, $zero, 0($c1)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    nop
entry:
  %ret = load i64, i64 addrspace(200)* addrspacecast(i64* @a8 to i64 addrspace(200)*), align 8
  ret i64 %ret
}

define void @store_global_i64_align_1(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: store_global_i64_align_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(store_global_i64_align_1)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(store_global_i64_align_1)))
; CHECK-NEXT:    ld $1, %got_disp(a1)($1)
; CHECK-NEXT:    dsrl $2, $4, 56
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    csb $2, $zero, 0($c1)
; CHECK-NEXT:    dsrl $1, $4, 24
; CHECK-NEXT:    csb $1, $zero, 4($c1)
; CHECK-NEXT:    dsrl $1, $4, 40
; CHECK-NEXT:    csb $1, $zero, 2($c1)
; CHECK-NEXT:    dsrl $1, $4, 48
; CHECK-NEXT:    csb $1, $zero, 1($c1)
; CHECK-NEXT:    dsrl $1, $4, 8
; CHECK-NEXT:    csb $1, $zero, 6($c1)
; CHECK-NEXT:    dsrl $1, $4, 16
; CHECK-NEXT:    csb $1, $zero, 5($c1)
; CHECK-NEXT:    dsrl $1, $4, 32
; CHECK-NEXT:    csb $1, $zero, 3($c1)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csb $4, $zero, 7($c1)
entry:
  store i64 %y, i64 addrspace(200)* addrspacecast(i64* @a1 to i64 addrspace(200)*), align 1
  ret void
}

define void @store_global_i64_align_2(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: store_global_i64_align_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(store_global_i64_align_2)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(store_global_i64_align_2)))
; CHECK-NEXT:    ld $1, %got_disp(a2)($1)
; CHECK-NEXT:    dsrl $2, $4, 48
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    csh $2, $zero, 0($c1)
; CHECK-NEXT:    dsrl $1, $4, 16
; CHECK-NEXT:    csh $1, $zero, 4($c1)
; CHECK-NEXT:    dsrl $1, $4, 32
; CHECK-NEXT:    csh $1, $zero, 2($c1)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csh $4, $zero, 6($c1)
entry:
  store i64 %y, i64 addrspace(200)* addrspacecast(i64* @a2 to i64 addrspace(200)*), align 2
  ret void
}

define void @store_global_i64_align_4(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: store_global_i64_align_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(store_global_i64_align_4)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(store_global_i64_align_4)))
; CHECK-NEXT:    ld $1, %got_disp(a4)($1)
; CHECK-NEXT:    dsrl $2, $4, 32
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    csw $2, $zero, 0($c1)
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csw $4, $zero, 4($c1)
entry:
  store i64 %y, i64 addrspace(200)* addrspacecast(i64* @a4 to i64 addrspace(200)*), align 4
  ret void
}

define void @store_global_i64_align_8(i64 %y) addrspace(200) nounwind {
; CHECK-LABEL: store_global_i64_align_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lui $1, %hi(%neg(%gp_rel(store_global_i64_align_8)))
; CHECK-NEXT:    daddu $1, $1, $25
; CHECK-NEXT:    daddiu $1, $1, %lo(%neg(%gp_rel(store_global_i64_align_8)))
; CHECK-NEXT:    ld $1, %got_disp(a8)($1)
; CHECK-NEXT:    cfromddc $c1, $1
; CHECK-NEXT:    csetbounds $c1, $c1, 8
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    csd $4, $zero, 0($c1)
entry:
  store i64 %y, i64 addrspace(200)* addrspacecast(i64* @a8 to i64 addrspace(200)*), align 8
  ret void
}
