; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/frameindex-arith.ll
; RUN: llc -mtriple=mips64 -mcpu=cheri128 -mattr=+cheri128 --relocation-model=pic -target-abi purecap %s -o - | FileCheck %s

; Check that we can fold the GEP (PTRADD) into the FrameIndex calculation
; rather than emitting two instructions.

; Contains an explicit @llvm.cheri.cap.bounds.set so CheriBoundAllocas sees the
; use as safe and doesn't interfere by inserting bounds on the FrameIndex
; before the GEP/PTRADD.
define void @foo() nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cincoffset $c11, $c11, -32
; CHECK-NEXT:    csc $c17, $zero, 16($c11) # 16-byte Folded Spill
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c1, $1
; CHECK-NEXT:    cincoffset $c2, $c11, 13
; CHECK-NEXT:    clcbi $c12, %capcall20(bar)($c1)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    csetbounds $c3, $c2, 0
; CHECK-NEXT:    clc $c17, $zero, 16($c11) # 16-byte Folded Reload
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, 32
  %x = alloca [2 x i8], align 1, addrspace(200)
  %x_plus_1 = getelementptr inbounds [2 x i8], [2 x i8] addrspace(200)* %x, i64 0, i64 1
  %p = call i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)* %x_plus_1, i64 0)
  call void @bar(i8 addrspace(200)* %p)
  ret void
}

declare void @bar(i8 addrspace(200)*)

declare i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)*, i64)
