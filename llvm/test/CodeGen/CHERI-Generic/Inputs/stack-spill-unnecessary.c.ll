; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; The new CheriBoundedStackPseudo instruction lets us pretend that the incoffset+csetbounds
; is a single trivially rematerizable instruction so it can freely move it around to avoid stack spills.
; Previously we were moving the allocation of the register that is only used later to the beginning of
; the function and saving+restoring it instead of materializing it just before

; RUN: llc @PURECAP_HARDFLOAT_ARGS@ -O2 --cheri-stack-bounds-single-intrinsic-threshold=0 < %s | %cheri_FileCheck %s --check-prefixes=CHECK
; Always use a single intrinsic for the calls (should result in same codegen)
; RUN: llc @PURECAP_HARDFLOAT_ARGS@ -O2 --cheri-stack-bounds-single-intrinsic-threshold=0 < %s | %cheri_FileCheck %s --check-prefixes=CHECK
; RUN: sed 's/addrspace(200)/addrspace(0)/g' %s | llc @HYBRID_HARDFLOAT_ARGS@ | FileCheck --check-prefix HYBRID %s


declare void @foo() addrspace(200)
declare void @one_arg(i32 addrspace(200)*) addrspace(200)
declare void @multi_arg(i32 addrspace(200)* %start, i32 addrspace(200)* %end, i8 addrspace(200)* %buf) addrspace(200)

define void @use_after_call() addrspace(200) nounwind {
entry:
  %x = alloca i32, align 4, addrspace(200)
  store i32 123, i32 addrspace(200)* %x, align 4
  call void @foo()
  call void @one_arg(i32 addrspace(200)* %x)
  ret void
}


define void @use_after_call_no_store() addrspace(200) nounwind {
entry:
  %x = alloca i32, align 4, addrspace(200)
  %y = alloca i32, align 4, addrspace(200)
  call void @foo()
  call void @one_arg(i32 addrspace(200)* %x)
  call void @one_arg(i32 addrspace(200)* %y)
  ret void
}

define void @multi_use() addrspace(200) nounwind {
entry:
  %y = alloca i32, align 4, addrspace(200)
  %x = alloca i32, align 4, addrspace(200)
  call void @foo()
  %x_plus0 = getelementptr inbounds i32, i32 addrspace(200)* %x, i32 0
  %x_plus1 = getelementptr i32, i32 addrspace(200)* %x, i32 1
  %x_i8 = bitcast i32 addrspace(200)* %x to i8 addrspace(200)*
  %x_i8_plus_1 = getelementptr inbounds i8, i8 addrspace(200)* %x_i8, i32 1
  call void @multi_arg(i32 addrspace(200)* %x_plus0, i32 addrspace(200)* %x_plus1, i8 addrspace(200)* %x_i8_plus_1)
  call void @one_arg(i32 addrspace(200)* %y)
  call void @one_arg(i32 addrspace(200)* %x)
  ret void
}
