; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/stackframe-intrinsics.ll
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d %s -o - < %s | FileCheck %s --check-prefix=PURECAP
; RUN: sed 's/addrspace(200)/addrspace(0)/g' %s | llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+xcheri,+f,+d | FileCheck %s --check-prefix HYBRID
; Check that we can lower llvm.frameaddress/llvm.returnaddress

; Capability-Inspection Instructions

define dso_local ptr addrspace(200) @frameaddr() addrspace(200) nounwind {
; PURECAP-LABEL: frameaddr:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset csp, csp, -48
; PURECAP-NEXT:    csc cra, 32(csp) # 16-byte Folded Spill
; PURECAP-NEXT:    csc cs0, 16(csp) # 16-byte Folded Spill
; PURECAP-NEXT:    cincoffset cs0, csp, 48
; PURECAP-NEXT:    csc cs0, -48(cs0)
; PURECAP-NEXT:    cmove ca0, cs0
; PURECAP-NEXT:    clc cra, 32(csp) # 16-byte Folded Reload
; PURECAP-NEXT:    clc cs0, 16(csp) # 16-byte Folded Reload
; PURECAP-NEXT:    cincoffset csp, csp, 48
; PURECAP-NEXT:    cret
;
; HYBRID-LABEL: frameaddr:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    addi sp, sp, -32
; HYBRID-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; HYBRID-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; HYBRID-NEXT:    addi s0, sp, 32
; HYBRID-NEXT:    sd s0, -32(s0)
; HYBRID-NEXT:    mv a0, s0
; HYBRID-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; HYBRID-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 32
; HYBRID-NEXT:    ret
entry:
  %b = alloca ptr addrspace(200), align 16, addrspace(200)
  %0 = call ptr addrspace(200) @llvm.frameaddress.p200(i32 0)
  store ptr addrspace(200) %0, ptr addrspace(200) %b, align 16
  %1 = load ptr addrspace(200), ptr addrspace(200) %b, align 16
  ret ptr addrspace(200) %1
}

declare ptr addrspace(200) @llvm.frameaddress.p200(i32 immarg) addrspace(200)

define dso_local ptr addrspace(200) @retaddr() addrspace(200) nounwind {
; PURECAP-LABEL: retaddr:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    cincoffset csp, csp, -16
; PURECAP-NEXT:    csc cra, 0(csp)
; PURECAP-NEXT:    cmove ca0, cra
; PURECAP-NEXT:    cincoffset csp, csp, 16
; PURECAP-NEXT:    cret
;
; HYBRID-LABEL: retaddr:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sd ra, 0(sp)
; HYBRID-NEXT:    mv a0, ra
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
entry:
  %b = alloca ptr addrspace(200), align 16, addrspace(200)
  %0 = call ptr addrspace(200) @llvm.returnaddress.p200(i32 0)
  store ptr addrspace(200) %0, ptr addrspace(200) %b, align 16
  %1 = load ptr addrspace(200), ptr addrspace(200) %b, align 16
  ret ptr addrspace(200) %1
}

declare ptr addrspace(200) @llvm.returnaddress.p200(i32 immarg) addrspace(200)
