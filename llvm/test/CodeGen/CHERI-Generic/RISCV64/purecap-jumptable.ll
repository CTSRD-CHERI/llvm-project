; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/purecap-jumptable.ll
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d < %s -o - | FileCheck %s
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d -relocation-model=static < %s -o - | FileCheck %s
; Check that we can generate jump tables for switch statements.
; TODO: this is currently not implemented for CHERI-RISC-V

define void @below_threshold(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: below_threshold:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext.w a0, a0
; CHECK-NEXT:    addi a2, zero, 2
; CHECK-NEXT:    beq a0, a2, .LBB0_3
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    addi a2, zero, 1
; CHECK-NEXT:    bne a0, a2, .LBB0_5
; CHECK-NEXT:  # %bb.2: # %bb1
; CHECK-NEXT:    addi a0, zero, 4
; CHECK-NEXT:    j .LBB0_4
; CHECK-NEXT:  .LBB0_3: # %bb2
; CHECK-NEXT:    addi a0, zero, 3
; CHECK-NEXT:  .LBB0_4: # %exit
; CHECK-NEXT:    csw a0, 0(ca1)
; CHECK-NEXT:  .LBB0_5: # %exit
; CHECK-NEXT:    cret
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; For RISC-V the jump table threshold is set to 5 cases, but MIPS uses the default
; value of 4 (set in llvm/lib/CodeGen/TargetLoweringBase.cpp).
define void @above_threshold_mips(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: above_threshold_mips:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext.w a0, a0
; CHECK-NEXT:    addi a2, zero, 2
; CHECK-NEXT:    blt a2, a0, .LBB1_4
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    addi a2, zero, 1
; CHECK-NEXT:    beq a0, a2, .LBB1_7
; CHECK-NEXT:  # %bb.2: # %entry
; CHECK-NEXT:    addi a2, zero, 2
; CHECK-NEXT:    bne a0, a2, .LBB1_10
; CHECK-NEXT:  # %bb.3: # %bb2
; CHECK-NEXT:    addi a0, zero, 3
; CHECK-NEXT:    j .LBB1_9
; CHECK-NEXT:  .LBB1_4: # %entry
; CHECK-NEXT:    addi a2, zero, 3
; CHECK-NEXT:    beq a0, a2, .LBB1_8
; CHECK-NEXT:  # %bb.5: # %entry
; CHECK-NEXT:    addi a2, zero, 4
; CHECK-NEXT:    bne a0, a2, .LBB1_10
; CHECK-NEXT:  # %bb.6: # %bb4
; CHECK-NEXT:    addi a0, zero, 1
; CHECK-NEXT:    j .LBB1_9
; CHECK-NEXT:  .LBB1_7: # %bb1
; CHECK-NEXT:    addi a0, zero, 4
; CHECK-NEXT:    j .LBB1_9
; CHECK-NEXT:  .LBB1_8: # %bb3
; CHECK-NEXT:    addi a0, zero, 2
; CHECK-NEXT:  .LBB1_9: # %exit
; CHECK-NEXT:    csw a0, 0(ca1)
; CHECK-NEXT:  .LBB1_10: # %exit
; CHECK-NEXT:    cret
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  i32 3, label %bb3
  i32 4, label %bb4
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
bb3:
  store i32 2, i32 addrspace(200)* %out
  br label %exit
bb4:
  store i32 1, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; UTC_ARGS: --disable
; UTC_ARGS: --enable

define void @above_threshold_all(i32 %in, i32 addrspace(200)* %out) nounwind {
; CHECK-LABEL: above_threshold_all:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cincoffset csp, csp, -16
; CHECK-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; CHECK-NEXT:    sext.w a0, a0
; CHECK-NEXT:    addi a0, a0, -1
; CHECK-NEXT:    addi a2, zero, 5
; CHECK-NEXT:    bltu a2, a0, .LBB2_9
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    slli a0, a0, 2
; CHECK-NEXT:  .LBB2_10: # %entry
; CHECK-NEXT:    # Label of block must be emitted
; CHECK-NEXT:    auipcc ca2, %pcrel_hi(.LJTI2_0)
; CHECK-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB2_10)
; CHECK-NEXT:    cincoffset ca0, ca2, a0
; CHECK-NEXT:    clw a0, 0(ca0)
; CHECK-NEXT:  .LBB2_11: # %entry
; CHECK-NEXT:    # Label of block must be emitted
; CHECK-NEXT:    auipcc ca2, %pcrel_hi(.Labove_threshold_all$jump_table_base)
; CHECK-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB2_11)
; CHECK-NEXT:    cincoffset ca0, ca2, a0
; CHECK-NEXT:    cjr ca0
; CHECK-NEXT:  .LBB2_2: # %bb1
; CHECK-NEXT:    addi a0, zero, 4
; CHECK-NEXT:    j .LBB2_8
; CHECK-NEXT:  .LBB2_3: # %bb2
; CHECK-NEXT:    addi a0, zero, 3
; CHECK-NEXT:    j .LBB2_8
; CHECK-NEXT:  .LBB2_4: # %bb3
; CHECK-NEXT:    addi a0, zero, 2
; CHECK-NEXT:    j .LBB2_8
; CHECK-NEXT:  .LBB2_5: # %bb4
; CHECK-NEXT:    addi a0, zero, 1
; CHECK-NEXT:    j .LBB2_8
; CHECK-NEXT:  .LBB2_6: # %bb5
; CHECK-NEXT:    addi a0, zero, 100
; CHECK-NEXT:    j .LBB2_8
; CHECK-NEXT:  .LBB2_7: # %bb6
; CHECK-NEXT:    addi a0, zero, 200
; CHECK-NEXT:  .LBB2_8: # %exit
; CHECK-NEXT:    csw a0, 0(ca1)
; CHECK-NEXT:  .LBB2_9: # %exit
; CHECK-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; CHECK-NEXT:    cincoffset csp, csp, 16
; CHECK-NEXT:    cret
entry:
  switch i32 %in, label %exit [
  i32 1, label %bb1
  i32 2, label %bb2
  i32 3, label %bb3
  i32 4, label %bb4
  i32 5, label %bb5
  i32 6, label %bb6
  ]
bb1:
  store i32 4, i32 addrspace(200)* %out
  br label %exit
bb2:
  store i32 3, i32 addrspace(200)* %out
  br label %exit
bb3:
  store i32 2, i32 addrspace(200)* %out
  br label %exit
bb4:
  store i32 1, i32 addrspace(200)* %out
  br label %exit
bb5:
  store i32 100, i32 addrspace(200)* %out
  br label %exit
bb6:
  store i32 200, i32 addrspace(200)* %out
  br label %exit
exit:
  ret void
}

; UTC_ARGS: --disable
; CHECK-LABEL: .LJTI2_0:
; CHECK-NEXT:    .word .LBB2_2-.Labove_threshold_all$jump_table_base
; CHECK-NEXT:    .word .LBB2_3-.Labove_threshold_all$jump_table_base
; CHECK-NEXT:    .word .LBB2_4-.Labove_threshold_all$jump_table_base
; CHECK-NEXT:    .word .LBB2_5-.Labove_threshold_all$jump_table_base
; CHECK-NEXT:    .word .LBB2_6-.Labove_threshold_all$jump_table_base
; CHECK-NEXT:    .word .LBB2_7-.Labove_threshold_all$jump_table_base
; UTC_ARGS: --enable
