; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cheri-pointer-comparison.ll
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+xcheri,+f,+d %s -o - | FileCheck %s --check-prefix=HYBRID
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d %s -o - | FileCheck %s --check-prefix=PURECAP
; This series of tests serves two purposes.
; The first purpose is to check that we generate efficient code for all
; capability comparisons, conditional branches and conditional selects.
; The second purpose is to check that we generate code that honours the
; signedness of the IR (which is always unsigned when emitting IR for C
; langage-level pointers, whereas __intcap uses the signedness of the type).
; NGINX has a loop with (void*)-1 as a sentinel value which was never entered
; due to this bug.
; Original issue: https://github.com/CTSRD-CHERI/llvm/issues/199
; Fixed upstream in https://reviews.llvm.org/D70917
; (be15dfa88fb1ed94d12f374797f98ede6808f809)
;
; Original source code showing this surprising behaviour (for CHERI-MIPS):
; int
; main(void)
; {
;         void *a, *b;
;
;         a = (void *)0x12033091e;
;         b = (void *)0xffffffffffffffff;
;
;         if (a < b) {
;                 printf("ok\n");
;                 return (0);
;         }
;
;         printf("surprising result\n");
;         return (1);
; }
;
; Morello had a similar code generation issue for selects, where a less than
; generated a csel instruction using a singed predicate instead of the unsigned
; one:
; void *select_lt(void *p1, void *p2) {
;   return p1 < p2 ? p1 : p2;
; }
; See https://git.morello-project.org/morello/llvm-project/-/issues/22

define i32 @eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: eq:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a0, a0, a1
; HYBRID-NEXT:    seqz a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: eq:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a0, a0, a1
; PURECAP-NEXT:    seqz a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ne:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a0, a0, a1
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ne:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a0, a0, a1
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ugt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a1, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ugt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a1, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: uge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, a1
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: uge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, a1
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ult:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, a1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ult:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, a1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: ule:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a1, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ule:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a1, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sgt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a1, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sgt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a1, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a0, a1
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a0, a1
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: slt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a0, a1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: slt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a0, a1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: sle:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a1, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sle:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a1, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: eq_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    seqz a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: eq_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    seqz a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ne_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ne_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ugt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ugt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: uge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, zero
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: uge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, zero
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ult_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltiu a0, a0, 0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ult_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltiu a0, a0, 0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: ule_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: ule_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sgt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a0, a0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sgt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a0, a0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltz a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltz a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: slt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slti a0, a0, 0
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: slt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slti a0, a0, 0
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i32 @sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: sle_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: sle_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

define i8 addrspace(200)* @select_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a2, a0, a1
; HYBRID-NEXT:    seqz a2, a2
; HYBRID-NEXT:    bnez a2, .LBB20_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB20_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_eq:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a2, a0, a1
; PURECAP-NEXT:    seqz a2, a2
; PURECAP-NEXT:    bnez a2, .LBB20_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB20_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a2, a0, a1
; HYBRID-NEXT:    snez a2, a2
; HYBRID-NEXT:    bnez a2, .LBB21_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB21_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ne:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a2, a0, a1
; PURECAP-NEXT:    snez a2, a2
; PURECAP-NEXT:    bnez a2, .LBB21_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB21_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a2, a1, a0
; HYBRID-NEXT:    bnez a2, .LBB22_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB22_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ugt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a2, a1, a0
; PURECAP-NEXT:    bnez a2, .LBB22_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB22_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a2, a0, a1
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB23_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB23_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_uge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a2, a0, a1
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB23_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB23_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a2, a0, a1
; HYBRID-NEXT:    bnez a2, .LBB24_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB24_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ult:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a2, a0, a1
; PURECAP-NEXT:    bnez a2, .LBB24_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB24_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a2, a1, a0
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB25_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB25_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ule:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a2, a1, a0
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB25_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB25_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a2, a1, a0
; HYBRID-NEXT:    bnez a2, .LBB26_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB26_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sgt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a2, a1, a0
; PURECAP-NEXT:    bnez a2, .LBB26_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB26_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a2, a0, a1
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB27_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB27_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a2, a0, a1
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB27_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB27_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a2, a0, a1
; HYBRID-NEXT:    bnez a2, .LBB28_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB28_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_slt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a2, a0, a1
; PURECAP-NEXT:    bnez a2, .LBB28_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB28_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a2, a1, a0
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB29_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB29_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sle:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a2, a1, a0
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB29_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB29_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_eq_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_eq_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    seqz a2, a0
; HYBRID-NEXT:    bnez a2, .LBB30_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB30_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_eq_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    seqz a2, a0
; PURECAP-NEXT:    bnez a2, .LBB30_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB30_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ne_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ne_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a2, a0
; HYBRID-NEXT:    bnez a2, .LBB31_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB31_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ne_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a2, a0
; PURECAP-NEXT:    bnez a2, .LBB31_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB31_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ugt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ugt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a2, a0
; HYBRID-NEXT:    bnez a2, .LBB32_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB32_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ugt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a2, a0
; PURECAP-NEXT:    bnez a2, .LBB32_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB32_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_uge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_uge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a2, a0, zero
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB33_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB33_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_uge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a2, a0, zero
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB33_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB33_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ult_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ult_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltiu a2, a0, 0
; HYBRID-NEXT:    bnez a2, .LBB34_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB34_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ult_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltiu a2, a0, 0
; PURECAP-NEXT:    bnez a2, .LBB34_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB34_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_ule_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_ule_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a2, a0
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB35_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB35_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_ule_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a2, a0
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB35_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB35_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sgt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sgt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a2, a0
; HYBRID-NEXT:    bnez a2, .LBB36_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB36_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sgt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a2, a0
; PURECAP-NEXT:    bnez a2, .LBB36_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB36_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sge_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltz a2, a0
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB37_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB37_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltz a2, a0
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB37_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB37_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_slt_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_slt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slti a2, a0, 0
; HYBRID-NEXT:    bnez a2, .LBB38_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB38_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_slt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slti a2, a0, 0
; PURECAP-NEXT:    bnez a2, .LBB38_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB38_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

define i8 addrspace(200)* @select_sle_null(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: select_sle_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a2, a0
; HYBRID-NEXT:    xori a2, a2, 1
; HYBRID-NEXT:    bnez a2, .LBB39_2
; HYBRID-NEXT:  # %bb.1: # %entry
; HYBRID-NEXT:    cmove ca0, ca1
; HYBRID-NEXT:  .LBB39_2: # %entry
; HYBRID-NEXT:    ret
;
; PURECAP-LABEL: select_sle_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a2, a0
; PURECAP-NEXT:    xori a2, a2, 1
; PURECAP-NEXT:    bnez a2, .LBB39_2
; PURECAP-NEXT:  # %bb.1: # %entry
; PURECAP-NEXT:    cmove ca0, ca1
; PURECAP-NEXT:  .LBB39_2: # %entry
; PURECAP-NEXT:    cret
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, null
  %cond = select i1 %cmp, i8 addrspace(200)* %a, i8 addrspace(200)* %b
  ret i8 addrspace(200)* %cond
}

declare i32 @func1() nounwind
declare i32 @func2() nounwind

define i32 @branch_eq(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_eq:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a0, a0, a1
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    beqz a0, .LBB40_2
; HYBRID-NEXT:  # %bb.1: # %if.end
; HYBRID-NEXT:    tail func2@plt
; HYBRID-NEXT:  .LBB40_2: # %if.then
; HYBRID-NEXT:    tail func1@plt
;
; PURECAP-LABEL: branch_eq:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a0, a0, a1
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    beqz a0, .LBB40_2
; PURECAP-NEXT:  # %bb.1: # %if.end
; PURECAP-NEXT:    ctail func2
; PURECAP-NEXT:  .LBB40_2: # %if.then
; PURECAP-NEXT:    ctail func1
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ne:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    xor a0, a0, a1
; HYBRID-NEXT:    seqz a0, a0
; HYBRID-NEXT:    bnez a0, .LBB41_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB41_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ne:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    xor a0, a0, a1
; PURECAP-NEXT:    seqz a0, a0
; PURECAP-NEXT:    bnez a0, .LBB41_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB41_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ugt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a1, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB42_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB42_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ugt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a1, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB42_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB42_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_uge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, a1
; HYBRID-NEXT:    bnez a0, .LBB43_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB43_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_uge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, a1
; PURECAP-NEXT:    bnez a0, .LBB43_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB43_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ult:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, a1
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB44_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB44_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ult:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, a1
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB44_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB44_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_ule:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a1, a0
; HYBRID-NEXT:    bnez a0, .LBB45_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB45_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ule:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a1, a0
; PURECAP-NEXT:    bnez a0, .LBB45_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB45_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sgt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a1, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB46_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB46_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sgt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a1, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB46_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB46_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sge:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a0, a1
; HYBRID-NEXT:    bnez a0, .LBB47_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB47_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sge:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a0, a1
; PURECAP-NEXT:    bnez a0, .LBB47_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB47_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_slt:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a0, a1
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB48_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB48_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_slt:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a0, a1
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB48_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB48_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle(i8 addrspace(200)* %a, i8 addrspace(200)* %b) nounwind {
; HYBRID-LABEL: branch_sle:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slt a0, a1, a0
; HYBRID-NEXT:    bnez a0, .LBB49_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB49_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sle:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slt a0, a1, a0
; PURECAP-NEXT:    bnez a0, .LBB49_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB49_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, %b
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_eq_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_eq_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    beqz a0, .LBB50_2
; HYBRID-NEXT:  # %bb.1: # %if.end
; HYBRID-NEXT:    tail func2@plt
; HYBRID-NEXT:  .LBB50_2: # %if.then
; HYBRID-NEXT:    tail func1@plt
;
; PURECAP-LABEL: branch_eq_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    beqz a0, .LBB50_2
; PURECAP-NEXT:  # %bb.1: # %if.end
; PURECAP-NEXT:    ctail func2
; PURECAP-NEXT:  .LBB50_2: # %if.then
; PURECAP-NEXT:    ctail func1
entry:
  %cmp = icmp eq i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ne_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ne_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    seqz a0, a0
; HYBRID-NEXT:    bnez a0, .LBB51_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB51_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ne_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    seqz a0, a0
; PURECAP-NEXT:    bnez a0, .LBB51_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB51_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ne i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ugt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ugt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB52_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB52_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ugt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB52_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB52_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ugt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_uge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_uge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltiu a0, a0, 0
; HYBRID-NEXT:    bnez a0, .LBB53_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB53_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_uge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltiu a0, a0, 0
; PURECAP-NEXT:    bnez a0, .LBB53_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB53_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp uge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ult_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ult_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltu a0, a0, zero
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB54_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB54_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ult_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltu a0, a0, zero
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB54_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB54_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ult i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_ule_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_ule_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    snez a0, a0
; HYBRID-NEXT:    bnez a0, .LBB55_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB55_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_ule_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    snez a0, a0
; PURECAP-NEXT:    bnez a0, .LBB55_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB55_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp ule i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sgt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sgt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB56_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB56_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sgt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB56_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB56_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sgt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sge_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sge_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    slti a0, a0, 0
; HYBRID-NEXT:    bnez a0, .LBB57_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB57_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sge_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    slti a0, a0, 0
; PURECAP-NEXT:    bnez a0, .LBB57_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB57_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sge i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_slt_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_slt_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sltz a0, a0
; HYBRID-NEXT:    xori a0, a0, 1
; HYBRID-NEXT:    bnez a0, .LBB58_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB58_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_slt_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sltz a0, a0
; PURECAP-NEXT:    xori a0, a0, 1
; PURECAP-NEXT:    bnez a0, .LBB58_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB58_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp slt i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}

define i32 @branch_sle_null(i8 addrspace(200)* %a) nounwind {
; HYBRID-LABEL: branch_sle_null:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    sgtz a0, a0
; HYBRID-NEXT:    bnez a0, .LBB59_2
; HYBRID-NEXT:  # %bb.1: # %if.then
; HYBRID-NEXT:    tail func1@plt
; HYBRID-NEXT:  .LBB59_2: # %if.end
; HYBRID-NEXT:    tail func2@plt
;
; PURECAP-LABEL: branch_sle_null:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    sgtz a0, a0
; PURECAP-NEXT:    bnez a0, .LBB59_2
; PURECAP-NEXT:  # %bb.1: # %if.then
; PURECAP-NEXT:    ctail func1
; PURECAP-NEXT:  .LBB59_2: # %if.end
; PURECAP-NEXT:    ctail func2
entry:
  %cmp = icmp sle i8 addrspace(200)* %a, null
  br i1 %cmp, label %if.then, label %if.end
if.then:
  %retval1 = tail call i32 @func1()
  ret i32 %retval1
if.end:
  %retval2 = tail call i32 @func2()
  ret i32 %retval2
}
