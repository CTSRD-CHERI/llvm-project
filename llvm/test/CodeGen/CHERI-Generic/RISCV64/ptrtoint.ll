; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/ptrtoint.ll
;; Check that we can correctly generate code for ptrtoint and perform simple folds
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d < %s | FileCheck %s
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+xcheri,+f,+d < %s | FileCheck %s --check-prefix=HYBRID

define internal i64 @ptrtoint(i8 addrspace(200)* %cap) addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ctoptr a0, ca0, ddc
; HYBRID-NEXT:    ret
  %ret = ptrtoint i8 addrspace(200)* %cap to i64
  ret i64 %ret
}

define internal i64 @ptrtoint_plus_const(i8 addrspace(200)* %cap) addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint_plus_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint_plus_const:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ctoptr a0, ca0, ddc
; HYBRID-NEXT:    addi a0, a0, 2
; HYBRID-NEXT:    ret
  %zero = ptrtoint i8 addrspace(200)* %cap to i64
  %ret = add i64 %zero, 2
  ret i64 %ret
}

define internal i64 @ptrtoint_plus_var(i8 addrspace(200)* %cap, i64 %add) addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint_plus_var:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a0, a0
; CHECK-NEXT:    add a0, a0, a1
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint_plus_var:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ctoptr a0, ca0, ddc
; HYBRID-NEXT:    add a0, a0, a1
; HYBRID-NEXT:    ret
  %zero = ptrtoint i8 addrspace(200)* %cap to i64
  %ret = add i64 %zero, %add
  ret i64 %ret
}

define internal i64 @ptrtoint_null() addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint_null:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 0
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint_null:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    li a0, 0
; HYBRID-NEXT:    ret
  %ret = ptrtoint i8 addrspace(200)* null to i64
  ret i64 %ret
}

define internal i64 @ptrtoint_null_plus_const() addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint_null_plus_const:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 2
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint_null_plus_const:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    li a0, 2
; HYBRID-NEXT:    ret
  %zero = ptrtoint i8 addrspace(200)* null to i64
  %ret = add i64 %zero, 2
  ret i64 %ret
}

define internal i64 @ptrtoint_null_plus_var(i64 %add) addrspace(200) nounwind {
; CHECK-LABEL: ptrtoint_null_plus_var:
; CHECK:       # %bb.0:
; CHECK-NEXT:    add a0, zero, a0
; CHECK-NEXT:    cret
;
; HYBRID-LABEL: ptrtoint_null_plus_var:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    add a0, zero, a0
; HYBRID-NEXT:    ret
  %zero = ptrtoint i8 addrspace(200)* null to i64
  %ret = add i64 %zero, %add
  ret i64 %ret
}
