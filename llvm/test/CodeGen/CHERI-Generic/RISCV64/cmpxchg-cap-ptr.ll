; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cmpxchg-cap-ptr.ll
; Check that we can generate sensible code for atomic operations using capability pointers on capabilities
; in both hybrid and purecap mode. For RISC-V this means expanding the instruction using the explicit
; addressing mode LR/SC instructions.
; See https://github.com/CTSRD-CHERI/llvm-project/issues/470
; RUN: %riscv64_cheri_purecap_llc %s -o - -mattr=+f,+a -verify-machineinstrs | FileCheck %s --check-prefixes=PURECAP,PURECAP-ATOMICS
; RUN: %riscv64_cheri_purecap_llc %s -o - -mattr=+f,-a -verify-machineinstrs | FileCheck %s --check-prefixes=PURECAP,PURECAP-LIBCALLS
; RUN: %riscv64_cheri_llc %s -o - -mattr=+f,+a -verify-machineinstrs | FileCheck %s --check-prefixes=HYBRID,HYBRID-ATOMICS
; RUN: %riscv64_cheri_llc %s -o - -mattr=+f,-a -verify-machineinstrs | FileCheck %s --check-prefixes=HYBRID,HYBRID-LIBCALLS

; define { i8, i1 } @test_cmpxchg_strong_i8(i8 addrspace(200)* %ptr, i8 %exp, i8 %new) local_unnamed_addr nounwind {
; entry:
;   %0 = cmpxchg i8 addrspace(200)* %ptr, i8 %exp, i8 %new acq_rel acquire
;   ret { i8, i1 } %0
; }
;
; define { i16, i1 } @test_cmpxchg_strong_i16(i16 addrspace(200)* %ptr, i16 %exp, i16 %new) local_unnamed_addr nounwind {
; entry:
;   %0 = cmpxchg i16 addrspace(200)* %ptr, i16 %exp, i16 %new acq_rel acquire
;   ret { i16, i1 } %0
; }

define { i32, i1 } @test_cmpxchg_strong_i32(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_i32:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:    sext.w a1, a1
; PURECAP-ATOMICS-NEXT:  .LBB0_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB0_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB0_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB0_1
; PURECAP-ATOMICS-NEXT:  .LBB0_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_i32:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB0_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB0_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_i32:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    sext.w a1, a1
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB0_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB0_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB0_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB0_1
; HYBRID-ATOMICS-NEXT:  .LBB0_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_i32:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    sw a1, 4(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 4
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a1, 4(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel acquire
  ret { i32, i1 } %0
}

define { i64, i1 } @test_cmpxchg_strong_i64(i64 addrspace(200)* %ptr, i64 %exp, i64 %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_i64:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB1_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.d.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB1_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB1_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.d.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB1_1
; PURECAP-ATOMICS-NEXT:  .LBB1_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_i64:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 8
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 8
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csd a1, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB1_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_8)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB1_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    cld a1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_i64:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB1_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.d.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB1_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB1_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.d.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB1_1
; HYBRID-ATOMICS-NEXT:  .LBB1_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_i64:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    sd a1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_8_c
; HYBRID-LIBCALLS-NEXT:    ld a1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg i64 addrspace(200)* %ptr, i64 %exp, i64 %new acq_rel acquire
  ret { i64, i1 } %0
}

define { i8 addrspace(200)*, i1 } @test_cmpxchg_strong_cap(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_cap:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB2_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB2_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB2_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB2_1
; PURECAP-ATOMICS-NEXT:  .LBB2_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_cap:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 16
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB2_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_cap)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB2_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_cap:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB2_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB2_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB2_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB2_1
; HYBRID-ATOMICS-NEXT:  .LBB2_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_cap:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sd ra, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 24(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new acq_rel acquire
  ret { i8 addrspace(200)*, i1 } %0
}


; define { i8, i1 } @test_cmpxchg_weak_i8(i8 addrspace(200)* %ptr, i8 %exp, i8 %new) local_unnamed_addr nounwind {
; entry:
;   %0 = cmpxchg weak i8 addrspace(200)* %ptr, i8 %exp, i8 %new acq_rel acquire
;   ret { i8, i1 } %0
; }
;
; define { i16, i1 } @test_cmpxchg_weak_i16(i16 addrspace(200)* %ptr, i16 %exp, i16 %new) local_unnamed_addr nounwind {
; entry:
;   %0 = cmpxchg weak i16 addrspace(200)* %ptr, i16 %exp, i16 %new acq_rel acquire
;   ret { i16, i1 } %0
; }

define { i32, i1 } @test_cmpxchg_weak_i32(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_i32:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:    sext.w a1, a1
; PURECAP-ATOMICS-NEXT:  .LBB3_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB3_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB3_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB3_1
; PURECAP-ATOMICS-NEXT:  .LBB3_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_i32:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB3_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB3_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_i32:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    sext.w a1, a1
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB3_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB3_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB3_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB3_1
; HYBRID-ATOMICS-NEXT:  .LBB3_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_i32:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    sw a1, 4(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 4
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a1, 4(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel acquire
  ret { i32, i1 } %0
}

define { i64, i1 } @test_cmpxchg_weak_i64(i64 addrspace(200)* %ptr, i64 %exp, i64 %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_i64:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB4_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.d.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB4_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB4_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.d.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB4_1
; PURECAP-ATOMICS-NEXT:  .LBB4_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_i64:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 8
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 8
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csd a1, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB4_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_8)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB4_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    cld a1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_i64:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB4_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.d.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB4_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB4_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.d.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB4_1
; HYBRID-ATOMICS-NEXT:  .LBB4_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_i64:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    sd a1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_8_c
; HYBRID-LIBCALLS-NEXT:    ld a1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i64 addrspace(200)* %ptr, i64 %exp, i64 %new acq_rel acquire
  ret { i64, i1 } %0
}

define { i8 addrspace(200)*, i1 } @test_cmpxchg_weak_cap(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new) local_unnamed_addr nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_cap:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB5_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB5_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB5_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB5_1
; PURECAP-ATOMICS-NEXT:  .LBB5_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_cap:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 16
; PURECAP-LIBCALLS-NEXT:    cincoffset ca4, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca6, ca4, a3
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB5_1: # %entry
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_cap)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB5_1)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca6
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_cap:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:  .LBB5_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB5_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB5_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB5_1
; HYBRID-ATOMICS-NEXT:  .LBB5_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_cap:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sd ra, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    ld ra, 24(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new acq_rel acquire
  ret { i8 addrspace(200)*, i1 } %0
}
