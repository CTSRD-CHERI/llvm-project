; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/atomic-load-store-cap-ptr.ll
; Check that we can generate sensible code for atomic operations using capability pointers
; https://github.com/CTSRD-CHERI/llvm-project/issues/470
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d -mattr=+a < %s | FileCheck %s --check-prefixes=PURECAP,PURECAP-ATOMICS --allow-unused-prefixes
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d -mattr=-a < %s | FileCheck %s --check-prefixes=PURECAP,PURECAP-LIBCALLS --allow-unused-prefixes
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+xcheri,+f,+d -mattr=+a < %s | FileCheck %s --check-prefixes=HYBRID,HYBRID-ATOMICS --allow-unused-prefixes
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+xcheri,+f,+d -mattr=-a < %s | FileCheck %s --check-prefixes=HYBRID,HYBRID-LIBCALLS --allow-unused-prefixes


define i8 @load_8(ptr addrspace(200) %ptr) nounwind {
; PURECAP-ATOMICS-LABEL: load_8:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, rw
; PURECAP-ATOMICS-NEXT:    clb a0, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fence r, rw
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: load_8:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    li a1, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_load_1
; PURECAP-LIBCALLS-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: load_8:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lb.cap a0, (ca0)
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: load_8:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a1, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_load_1_c@plt
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %val = load atomic i8, ptr addrspace(200) %ptr seq_cst, align 1
  ret i8 %val
}

define i16 @load_16(ptr addrspace(200) %ptr) nounwind {
; PURECAP-ATOMICS-LABEL: load_16:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, rw
; PURECAP-ATOMICS-NEXT:    clh a0, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fence r, rw
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: load_16:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    li a1, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_load_2
; PURECAP-LIBCALLS-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: load_16:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lh.cap a0, (ca0)
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: load_16:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a1, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_load_2_c@plt
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %val = load atomic i16, ptr addrspace(200) %ptr seq_cst, align 2
  ret i16 %val
}

define i32 @load_32(ptr addrspace(200) %ptr) nounwind {
; PURECAP-ATOMICS-LABEL: load_32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, rw
; PURECAP-ATOMICS-NEXT:    clw a0, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fence r, rw
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: load_32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    li a1, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_load_4
; PURECAP-LIBCALLS-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: load_32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a0, (ca0)
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: load_32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a1, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_load_4_c@plt
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %val = load atomic i32, ptr addrspace(200) %ptr seq_cst, align 4
  ret i32 %val
}

define i64 @load_range(ptr addrspace(200) %ptr) nounwind {
; PURECAP-ATOMICS-LABEL: load_range:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, rw
; PURECAP-ATOMICS-NEXT:    cld a0, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fence r, rw
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: load_range:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    li a1, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_load_8
; PURECAP-LIBCALLS-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: load_range:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    ld.cap a0, (ca0)
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: load_range:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a1, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_load_8_c@plt
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %val = load atomic i64, ptr addrspace(200) %ptr seq_cst, align 8
  ret i64 %val
}

define ptr addrspace(200) @load_cap(ptr addrspace(200) %ptr) nounwind {
; PURECAP-ATOMICS-LABEL: load_cap:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, rw
; PURECAP-ATOMICS-NEXT:    clc ca0, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fence r, rw
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: load_cap:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    li a1, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_load_cap
; PURECAP-LIBCALLS-NEXT:    clc cra, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: load_cap:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lc.cap ca0, (ca0)
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: load_cap:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a1, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_load_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %val = load atomic ptr addrspace(200), ptr addrspace(200) %ptr seq_cst, align 16
  ret ptr addrspace(200) %val
}

define i8 @store_8(ptr addrspace(200) %ptr, i8 %val) nounwind {
; PURECAP-ATOMICS-LABEL: store_8:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, w
; PURECAP-ATOMICS-NEXT:    csb a1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    mv a0, a1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: store_8:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    li a2, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_store_1
; PURECAP-LIBCALLS-NEXT:    mv a0, s0
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: store_8:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:    sb.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    mv a0, a1
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: store_8:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sd s0, 0(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    li a2, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_store_1_c@plt
; HYBRID-LIBCALLS-NEXT:    mv a0, s0
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    ld s0, 0(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  store atomic i8 %val, ptr addrspace(200) %ptr seq_cst, align 1
  ret i8 %val
}

define i16 @store_16(ptr addrspace(200) %ptr, i16 %val) nounwind {
; PURECAP-ATOMICS-LABEL: store_16:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, w
; PURECAP-ATOMICS-NEXT:    csh a1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    mv a0, a1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: store_16:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    li a2, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_store_2
; PURECAP-LIBCALLS-NEXT:    mv a0, s0
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: store_16:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:    sh.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    mv a0, a1
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: store_16:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sd s0, 0(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    li a2, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_store_2_c@plt
; HYBRID-LIBCALLS-NEXT:    mv a0, s0
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    ld s0, 0(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  store atomic i16 %val, ptr addrspace(200) %ptr seq_cst, align 2
  ret i16 %val
}

define i32 @store_32(ptr addrspace(200) %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: store_32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, w
; PURECAP-ATOMICS-NEXT:    csw a1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    mv a0, a1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: store_32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    li a2, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_store_4
; PURECAP-LIBCALLS-NEXT:    mv a0, s0
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: store_32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:    sw.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    mv a0, a1
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: store_32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sd s0, 0(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    li a2, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_store_4_c@plt
; HYBRID-LIBCALLS-NEXT:    mv a0, s0
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    ld s0, 0(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  store atomic i32 %val, ptr addrspace(200) %ptr seq_cst, align 4
  ret i32 %val
}

define i64 @store_range(ptr addrspace(200) %ptr, i64 %val) nounwind {
; PURECAP-ATOMICS-LABEL: store_range:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, w
; PURECAP-ATOMICS-NEXT:    csd a1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    mv a0, a1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: store_range:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    li a2, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_store_8
; PURECAP-LIBCALLS-NEXT:    mv a0, s0
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: store_range:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:    sd.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    mv a0, a1
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: store_range:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sd ra, 8(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sd s0, 0(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    li a2, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_store_8_c@plt
; HYBRID-LIBCALLS-NEXT:    mv a0, s0
; HYBRID-LIBCALLS-NEXT:    ld ra, 8(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    ld s0, 0(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  store atomic i64 %val, ptr addrspace(200) %ptr seq_cst, align 8
  ret i64 %val
}

define ptr addrspace(200) @store_cap(ptr addrspace(200) %ptr, ptr addrspace(200) %val) nounwind {
; PURECAP-ATOMICS-LABEL: store_cap:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    fence rw, w
; PURECAP-ATOMICS-NEXT:    csc ca1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: store_cap:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cmove cs0, ca1
; PURECAP-LIBCALLS-NEXT:    li a2, 5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_store_cap
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs0
; PURECAP-LIBCALLS-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: store_cap:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    fence rw, w
; HYBRID-ATOMICS-NEXT:    sc.cap ca1, (ca0)
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca1
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: store_cap:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp) # 16-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    li a2, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_store_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    lc ca0, 0(sp) # 16-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
  store atomic ptr addrspace(200) %val, ptr addrspace(200) %ptr seq_cst, align 16
  ret ptr addrspace(200) %val
}
