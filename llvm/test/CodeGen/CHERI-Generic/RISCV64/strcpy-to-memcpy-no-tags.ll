; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/strcpy-to-memcpy-no-tags.ll
; Check that we can inline the loads/stores generated when simplifiying
; string libcalls to memcpy() (since it should be marked as non-tag-preserving).
; CHERI-GENERIC-UTC: llc
; Note: unlike other tests we do want to test attributes in this one.
; CHERI-GENERIC-UTC: opt --function-signature
; RUN: opt < %s -passes=instcombine -S | FileCheck %s --check-prefix=CHECK-IR
; RUN: opt < %s -passes=instcombine -S | llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+xcheri,+cap-mode,+f,+d - -o - | FileCheck %s --check-prefix=CHECK-ASM
target datalayout = "e-m:e-pf200:128:128:128:64-p:64:64-i64:64-i128:128-n64-S128-A200-P200-G200"

@str = private unnamed_addr addrspace(200) constant [17 x i8] c"exactly 16 chars\00", align 8

declare ptr addrspace(200) @strcpy(ptr addrspace(200), ptr addrspace(200)) addrspace(200)
declare ptr addrspace(200) @stpcpy(ptr addrspace(200), ptr addrspace(200)) addrspace(200)
declare ptr addrspace(200) @strcat(ptr addrspace(200), ptr addrspace(200)) addrspace(200)
declare ptr addrspace(200) @strncpy(ptr addrspace(200), ptr addrspace(200), i64) addrspace(200)
declare ptr addrspace(200) @stpncpy(ptr addrspace(200), ptr addrspace(200), i64) addrspace(200)

define void @test_strcpy_to_memcpy(ptr addrspace(200) align 8 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strcpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:  .LBB0_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %pcrel_hi(.LCPI0_0)
; CHECK-ASM-NEXT:    cincoffset ca1, ca1, %pcrel_lo(.LBB0_1)
; CHECK-ASM-NEXT:    cld a1, 0(ca1)
; CHECK-ASM-NEXT:  .LBB0_2: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca2, %pcrel_hi(.LCPI0_1)
; CHECK-ASM-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB0_2)
; CHECK-ASM-NEXT:    cld a2, 0(ca2)
; CHECK-ASM-NEXT:    csd a1, 8(ca0)
; CHECK-ASM-NEXT:    csb zero, 16(ca0)
; CHECK-ASM-NEXT:    csd a2, 0(ca0)
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define void @test_strcpy_to_memcpy
; CHECK-IR-SAME: (ptr addrspace(200) align 8 [[DST:%.*]]) addrspace(200) #[[ATTR1:[0-9]+]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) [[DST]], ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) @str, i64 17, i1 false) #[[ATTR4:[0-9]+]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call ptr addrspace(200) @strcpy(ptr addrspace(200) %dst, ptr addrspace(200) @str)
  ret void
}

define void @test_stpcpy_to_memcpy(ptr addrspace(200) align 8 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_stpcpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:  .LBB1_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %pcrel_hi(.LCPI1_0)
; CHECK-ASM-NEXT:    cincoffset ca1, ca1, %pcrel_lo(.LBB1_1)
; CHECK-ASM-NEXT:    cld a1, 0(ca1)
; CHECK-ASM-NEXT:  .LBB1_2: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca2, %pcrel_hi(.LCPI1_1)
; CHECK-ASM-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB1_2)
; CHECK-ASM-NEXT:    cld a2, 0(ca2)
; CHECK-ASM-NEXT:    csd a1, 8(ca0)
; CHECK-ASM-NEXT:    csb zero, 16(ca0)
; CHECK-ASM-NEXT:    csd a2, 0(ca0)
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define void @test_stpcpy_to_memcpy
; CHECK-IR-SAME: (ptr addrspace(200) align 8 [[DST:%.*]]) addrspace(200) #[[ATTR1]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) [[DST]], ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) @str, i64 17, i1 false) #[[ATTR5:[0-9]+]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call ptr addrspace(200) @stpcpy(ptr addrspace(200) %dst, ptr addrspace(200) @str)
  ret void
}

define void @test_strcat_to_memcpy(ptr addrspace(200) align 8 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strcat_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -32
; CHECK-ASM-NEXT:    csc cra, 16(csp) # 16-byte Folded Spill
; CHECK-ASM-NEXT:    csc cs0, 0(csp) # 16-byte Folded Spill
; CHECK-ASM-NEXT:    cmove cs0, ca0
; CHECK-ASM-NEXT:    ccall strlen
; CHECK-ASM-NEXT:    cincoffset ca0, cs0, a0
; CHECK-ASM-NEXT:  .LBB2_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB2_1)(ca1)
; CHECK-ASM-NEXT:    li a2, 17
; CHECK-ASM-NEXT:    ccall memcpy
; CHECK-ASM-NEXT:    clc cra, 16(csp) # 16-byte Folded Reload
; CHECK-ASM-NEXT:    clc cs0, 0(csp) # 16-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 32
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define void @test_strcat_to_memcpy
; CHECK-IR-SAME: (ptr addrspace(200) align 8 [[DST:%.*]]) addrspace(200) #[[ATTR1]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    [[STRLEN:%.*]] = call i64 @strlen(ptr addrspace(200) noundef nonnull dereferenceable(1) [[DST]])
; CHECK-IR-NEXT:    [[ENDPTR:%.*]] = getelementptr inbounds i8, ptr addrspace(200) [[DST]], i64 [[STRLEN]]
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noundef nonnull align 1 dereferenceable(17) [[ENDPTR]], ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) @str, i64 17, i1 false) #[[ATTR5]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call ptr addrspace(200) @strcat(ptr addrspace(200) %dst, ptr addrspace(200) @str)
  ret void
}


define void @test_strncpy_to_memcpy(ptr addrspace(200) align 8 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strncpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:  .LBB3_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %pcrel_hi(.LCPI3_0)
; CHECK-ASM-NEXT:    cincoffset ca1, ca1, %pcrel_lo(.LBB3_1)
; CHECK-ASM-NEXT:    cld a1, 0(ca1)
; CHECK-ASM-NEXT:  .LBB3_2: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca2, %pcrel_hi(.LCPI3_1)
; CHECK-ASM-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB3_2)
; CHECK-ASM-NEXT:    cld a2, 0(ca2)
; CHECK-ASM-NEXT:    csd a1, 8(ca0)
; CHECK-ASM-NEXT:    csb zero, 16(ca0)
; CHECK-ASM-NEXT:    csd a2, 0(ca0)
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define void @test_strncpy_to_memcpy
; CHECK-IR-SAME: (ptr addrspace(200) align 8 [[DST:%.*]]) addrspace(200) #[[ATTR1]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) [[DST]], ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) @str, i64 17, i1 false) #[[ATTR4]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call ptr addrspace(200) @strncpy(ptr addrspace(200) %dst, ptr addrspace(200) @str, i64 17)
  ret void
}

; Note: stpncpy is not handled by SimplifyLibcalls yet, so this should not be changed.
define void @test_stpncpy_to_memcpy(ptr addrspace(200) align 8 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_stpncpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:  .LBB4_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %pcrel_hi(.LCPI4_0)
; CHECK-ASM-NEXT:    cincoffset ca1, ca1, %pcrel_lo(.LBB4_1)
; CHECK-ASM-NEXT:    cld a1, 0(ca1)
; CHECK-ASM-NEXT:  .LBB4_2: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca2, %pcrel_hi(.LCPI4_1)
; CHECK-ASM-NEXT:    cincoffset ca2, ca2, %pcrel_lo(.LBB4_2)
; CHECK-ASM-NEXT:    cld a2, 0(ca2)
; CHECK-ASM-NEXT:    csd a1, 8(ca0)
; CHECK-ASM-NEXT:    csb zero, 16(ca0)
; CHECK-ASM-NEXT:    csd a2, 0(ca0)
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define void @test_stpncpy_to_memcpy
; CHECK-IR-SAME: (ptr addrspace(200) align 8 [[DST:%.*]]) addrspace(200) #[[ATTR1]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) [[DST]], ptr addrspace(200) noundef nonnull align 8 dereferenceable(17) @str, i64 17, i1 false) #[[ATTR4]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call ptr addrspace(200) @stpncpy(ptr addrspace(200) %dst, ptr addrspace(200) @str, i64 17)
  ret void
}

; UTC_ARGS: --disable
; CHECK-IR: attributes #[[ATTR1]] = { nounwind }
; The no_preserve_cheri_tags should be attribute 4/5 in all cases
; CHECK-IR: attributes #[[ATTR4]] = { no_preserve_cheri_tags nounwind }
; CHECK-IR: attributes #[[ATTR5]] = { no_preserve_cheri_tags }
