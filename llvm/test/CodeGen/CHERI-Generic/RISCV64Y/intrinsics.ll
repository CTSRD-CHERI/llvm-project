; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/intrinsics.ll
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi l64pc128d -mattr=+y,+cap-mode,+f,+d %s -o - < %s | FileCheck %s --check-prefix=PURECAP
; RUN: llc -mtriple=riscv64 --relocation-model=pic -target-abi lp64d -mattr=+y,+zyhybrid,+f,+d -o - < %s | FileCheck %s --check-prefix=HYBRID
; Check that the target-independent CHERI intrinsics are support for all architectures
; The grouping/ordering in this test is based on the RISC-V instruction listing
; in the CHERI ISA specification (Appendix C.1 in ISAv7).

; Capability-Inspection Instructions

declare i64 @llvm.cheri.cap.perms.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.type.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.base.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.length.get.i64(i8 addrspace(200)*)
declare i1 @llvm.cheri.cap.tag.get(i8 addrspace(200)*)
declare i1 @llvm.cheri.cap.sealed.get(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.offset.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.flags.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)*)
declare i64 @llvm.cheri.cap.high.get.i64(i8 addrspace(200)*)

define i64 @perms_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: perms_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ypermr a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: perms_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ypermr a0, ca0
; HYBRID-NEXT:    ret
  %perms = call i64 @llvm.cheri.cap.perms.get.i64(i8 addrspace(200)* %cap)
  ret i64 %perms
}

define i64 @type_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: type_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ytyper a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: type_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ytyper a0, ca0
; HYBRID-NEXT:    ret
  %type = call i64 @llvm.cheri.cap.type.get.i64(i8 addrspace(200)* %cap)
  ret i64 %type
}

define i64 @base_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: base_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybaser a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: base_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybaser a0, ca0
; HYBRID-NEXT:    ret
  %base = call i64 @llvm.cheri.cap.base.get.i64(i8 addrspace(200)* %cap)
  ret i64 %base
}

define i64 @length_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: length_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ylenr a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: length_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ylenr a0, ca0
; HYBRID-NEXT:    ret
  %length = call i64 @llvm.cheri.cap.length.get.i64(i8 addrspace(200)* %cap)
  ret i64 %length
}

define i64 @tag_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: tag_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ytagr a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: tag_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ytagr a0, ca0
; HYBRID-NEXT:    ret
  %tag = call i1 @llvm.cheri.cap.tag.get(i8 addrspace(200)* %cap)
  %tag.zext = zext i1 %tag to i64
  ret i64 %tag.zext
}

define i64 @sealed_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: sealed_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ytyper a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: sealed_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ytyper a0, ca0
; HYBRID-NEXT:    ret
  %sealed = call i1 @llvm.cheri.cap.sealed.get(i8 addrspace(200)* %cap)
  %sealed.zext = zext i1 %sealed to i64
  ret i64 %sealed.zext
}

define i64 @offset_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: offset_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybaser a1, ca0
; PURECAP-NEXT:    sub a0, a0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: offset_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybaser a1, ca0
; HYBRID-NEXT:    sub a0, a0, a1
; HYBRID-NEXT:    ret
  %offset = call i64 @llvm.cheri.cap.offset.get.i64(i8 addrspace(200)* %cap)
  ret i64 %offset
}

define i64 @flags_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: flags_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    li a0, 0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: flags_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ymoder a0, ca0
; HYBRID-NEXT:    ret
  %flags = call i64 @llvm.cheri.cap.flags.get.i64(i8 addrspace(200)* %cap)
  ret i64 %flags
}

define i64 @address_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: address_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    mv a0, a0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: address_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    mv a0, a0
; HYBRID-NEXT:    ret
  %address = call i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)* %cap)
  ret i64 %address
}

define i64 @high_get(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: high_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    yhir a0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: high_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    yhir a0, ca0
; HYBRID-NEXT:    ret
  %high = call i64 @llvm.cheri.cap.high.get.i64(i8 addrspace(200)* %cap)
  ret i64 %high
}

; Capability-Modification Instructions

declare i8 addrspace(200)* @llvm.cheri.cap.seal(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.unseal(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.perms.and.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.flags.set.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.offset.set.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.address.set.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.bounds.set.exact.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.high.set.i64(i8 addrspace(200)*, i64)
declare i8 addrspace(200)* @llvm.cheri.cap.tag.clear(i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.build(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.type.copy(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.conditional.seal(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.seal.entry(i8 addrspace(200)*)

define i8 addrspace(200)* @seal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: seal:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: seal:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  %sealed = call i8 addrspace(200)* @llvm.cheri.cap.seal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i8 addrspace(200)* %sealed
}

define i8 addrspace(200)* @unseal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: unseal:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: unseal:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  %unsealed = call i8 addrspace(200)* @llvm.cheri.cap.unseal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i8 addrspace(200)* %unsealed
}

define i8 addrspace(200)* @perms_and(i8 addrspace(200)* %cap, i64 %perms) nounwind {
; PURECAP-LABEL: perms_and:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ypermc ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: perms_and:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ypermc ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.perms.and.i64(i8 addrspace(200)* %cap, i64 %perms)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @flags_set(i8 addrspace(200)* %cap, i64 %flags) nounwind {
; PURECAP-LABEL: flags_set:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: flags_set:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ymodew ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.flags.set.i64(i8 addrspace(200)* %cap, i64 %flags)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @offset_set(i8 addrspace(200)* %cap, i64 %offset) nounwind {
; PURECAP-LABEL: offset_set:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybaser a2, ca0
; PURECAP-NEXT:    yaddrw ca0, ca0, a2
; PURECAP-NEXT:    addy ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: offset_set:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybaser a2, ca0
; HYBRID-NEXT:    yaddrw ca0, ca0, a2
; HYBRID-NEXT:    addy ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.offset.set.i64(i8 addrspace(200)* %cap, i64 %offset)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @address_set(i8 addrspace(200)* %cap, i64 %address) nounwind {
; PURECAP-LABEL: address_set:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    yaddrw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: address_set:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    yaddrw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.address.set.i64(i8 addrspace(200)* %cap, i64 %address)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @bounds_set(i8 addrspace(200)* %cap, i64 %bounds) nounwind {
; PURECAP-LABEL: bounds_set:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybndsrw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: bounds_set:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybndsrw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)* %cap, i64 %bounds)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @bounds_set_exact(i8 addrspace(200)* %cap, i64 %bounds) nounwind {
; PURECAP-LABEL: bounds_set_exact:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybndsw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: bounds_set_exact:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybndsw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.bounds.set.exact.i64(i8 addrspace(200)* %cap, i64 %bounds)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @high_set(i8 addrspace(200)* %cap, i64 %high) nounwind {
; PURECAP-LABEL: high_set:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    yhiw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: high_set:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    yhiw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.high.set.i64(i8 addrspace(200)* %cap, i64 %high)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @bounds_set_immediate(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: bounds_set_immediate:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    li a1, 42
; PURECAP-NEXT:    ybndsrw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: bounds_set_immediate:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    li a1, 42
; HYBRID-NEXT:    ybndsrw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)* %cap, i64 42)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @tag_clear(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: tag_clear:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: tag_clear:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  %untagged = call i8 addrspace(200)* @llvm.cheri.cap.tag.clear(i8 addrspace(200)* %cap)
  ret i8 addrspace(200)* %untagged
}

define i8 addrspace(200)* @build(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: build:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ybld ca0, ca0, ca1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: build:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ybld ca0, ca0, ca1
; HYBRID-NEXT:    ret
  %built = call i8 addrspace(200)* @llvm.cheri.cap.build(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i8 addrspace(200)* %built
}

define i8 addrspace(200)* @type_copy(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: type_copy:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: type_copy:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.type.copy(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @conditional_seal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: conditional_seal:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: conditional_seal:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.conditional.seal(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @seal_entry(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: seal_entry:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ysentry ca0, ca0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: seal_entry:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ysentry ca0, ca0
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.seal.entry(i8 addrspace(200)* %cap)
  ret i8 addrspace(200)* %newcap
}

; Pointer-Arithmetic Instructions

declare i64 @llvm.cheri.cap.to.pointer(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.cap.from.pointer(i8 addrspace(200)*, i64)
declare i64 @llvm.cheri.cap.diff(i8 addrspace(200)*, i8 addrspace(200)*)
declare i8 addrspace(200)* @llvm.cheri.ddc.get()
declare i8 addrspace(200)* @llvm.cheri.pcc.get()

define i64 @to_pointer(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: to_pointer:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ytagr a0, ca1
; PURECAP-NEXT:    neg a0, a0
; PURECAP-NEXT:    and a0, a1, a0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: to_pointer:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ytagr a0, ca1
; HYBRID-NEXT:    neg a0, a0
; HYBRID-NEXT:    and a0, a1, a0
; HYBRID-NEXT:    ret
  %ptr = call i64 @llvm.cheri.cap.to.pointer(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i64 %ptr
}

define i64 @to_pointer_ddc_relative(i8 addrspace(200)* %cap) nounwind {
; PURECAP-LABEL: to_pointer_ddc_relative:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ytagr a1, ca0
; PURECAP-NEXT:    neg a1, a1
; PURECAP-NEXT:    and a0, a0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: to_pointer_ddc_relative:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ytagr a1, ca0
; HYBRID-NEXT:    neg a1, a1
; HYBRID-NEXT:    and a0, a0, a1
; HYBRID-NEXT:    ret
  %ddc = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  %ptr = call i64 @llvm.cheri.cap.to.pointer(i8 addrspace(200)* %ddc, i8 addrspace(200)* %cap)
  ret i64 %ptr
}

define i8 addrspace(200)* @from_pointer(i8 addrspace(200)* %cap, i64 %ptr) nounwind {
; PURECAP-LABEL: from_pointer:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    bnez a1, .LBB27_2
; PURECAP-NEXT:  # %bb.1:
; PURECAP-NEXT:    ymv ca0, cnull
; PURECAP-NEXT:    ret
; PURECAP-NEXT:  .LBB27_2:
; PURECAP-NEXT:    yaddrw ca0, ca0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: from_pointer:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    bnez a1, .LBB27_2
; HYBRID-NEXT:  # %bb.1:
; HYBRID-NEXT:    ymv ca0, cnull
; HYBRID-NEXT:    ret
; HYBRID-NEXT:  .LBB27_2:
; HYBRID-NEXT:    yaddrw ca0, ca0, a1
; HYBRID-NEXT:    ret
  %newcap = call i8 addrspace(200)* @llvm.cheri.cap.from.pointer(i8 addrspace(200)* %cap, i64 %ptr)
  ret i8 addrspace(200)* %newcap
}

define i8 addrspace(200)* @from_ddc(i64 %ptr) nounwind {
; PURECAP-LABEL: from_ddc:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    bnez a0, .LBB28_2
; PURECAP-NEXT:  # %bb.1:
; PURECAP-NEXT:    ymv ca0, cnull
; PURECAP-NEXT:    ret
; PURECAP-NEXT:  .LBB28_2:
; PURECAP-NEXT:    yaddrw ca0, cnull, a0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: from_ddc:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    csrrc ca1, ddc, zero
; HYBRID-NEXT:    bnez a0, .LBB28_2
; HYBRID-NEXT:  # %bb.1:
; HYBRID-NEXT:    ymv ca0, cnull
; HYBRID-NEXT:    ret
; HYBRID-NEXT:  .LBB28_2:
; HYBRID-NEXT:    yaddrw ca0, ca1, a0
; HYBRID-NEXT:    ret
  %ddc = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  %cap = call i8 addrspace(200)* @llvm.cheri.cap.from.pointer(i8 addrspace(200)* %ddc, i64 %ptr)
  ret i8 addrspace(200)* %cap
}

define i64 @diff(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: diff:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    sub a0, a0, a1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: diff:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    sub a0, a0, a1
; HYBRID-NEXT:    ret
  %diff = call i64 @llvm.cheri.cap.diff(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  ret i64 %diff
}

define i8 addrspace(200)* @ddc_get() nounwind {
; PURECAP-LABEL: ddc_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ymv ca0, cnull
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: ddc_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    csrrc ca0, ddc, zero
; HYBRID-NEXT:    ret
  %cap = call i8 addrspace(200)* @llvm.cheri.ddc.get()
  ret i8 addrspace(200)* %cap
}

define i8 addrspace(200)* @pcc_get() nounwind {
; PURECAP-LABEL: pcc_get:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    auipc ca0, 0
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: pcc_get:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    auipcc ca0, 0
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %cap = call i8 addrspace(200)* @llvm.cheri.pcc.get()
  ret i8 addrspace(200)* %cap
}

; Assertion Instructions

declare i1 @llvm.cheri.cap.subset.test(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)

define i64 @subset_test(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: subset_test:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    ylt a0, ca0, ca1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: subset_test:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    ylt a0, ca0, ca1
; HYBRID-NEXT:    ret
  %subset = call i1 @llvm.cheri.cap.subset.test(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  %subset.zext = zext i1 %subset to i64
  ret i64 %subset.zext
}

declare i1 @llvm.cheri.cap.equal.exact(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)

define i64 @equal_exact(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2) nounwind {
; PURECAP-LABEL: equal_exact:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    syeq a0, ca0, ca1
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: equal_exact:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    syeq a0, ca0, ca1
; HYBRID-NEXT:    ret
  %eqex = call i1 @llvm.cheri.cap.equal.exact(i8 addrspace(200)* %cap1, i8 addrspace(200)* %cap2)
  %eqex.zext = zext i1 %eqex to i64
  ret i64 %eqex.zext
}
