; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/strcpy-to-memcpy-no-tags.ll
; Check that we can inline the loads/stores generated when simplifiying
; string libcalls to memcpy() (since it should be marked as non-tag-preserving).
; Note: unlike other tests we do want to test attributes in this one.
; RUN: opt < %s -passes=instcombine -S | FileCheck %s --check-prefix=CHECK-IR
; RUN: opt < %s -passes=instcombine -S | llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+xcheri,+cap-mode,+f - -o - | FileCheck %s --check-prefix=CHECK-ASM
target datalayout = "e-m:e-pf200:64:64:64:32-p:32:32-i64:64-n32-S128-A200-P200-G200"

@str = private unnamed_addr addrspace(200) constant [17 x i8] c"exactly 16 chars\00", align 4

declare i8 addrspace(200)* @strcpy(i8 addrspace(200)*, i8 addrspace(200)*) addrspace(200)
declare i8 addrspace(200)* @stpcpy(i8 addrspace(200)*, i8 addrspace(200)*) addrspace(200)
declare i8 addrspace(200)* @strcat(i8 addrspace(200)*, i8 addrspace(200)*) addrspace(200)
declare i8 addrspace(200)* @strncpy(i8 addrspace(200)*, i8 addrspace(200)*, i64) addrspace(200)
declare i8 addrspace(200)* @stpncpy(i8 addrspace(200)*, i8 addrspace(200)*, i64) addrspace(200)

define void @test_strcpy_to_memcpy(i8 addrspace(200)* align 4 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strcpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -16
; CHECK-ASM-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:  .LBB0_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB0_1)(ca1)
; CHECK-ASM-NEXT:    addi a2, zero, 17
; CHECK-ASM-NEXT:    ccall memcpy
; CHECK-ASM-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 16
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define {{[^@]+}}@test_strcpy_to_memcpy
; CHECK-IR-SAME: (i8 addrspace(200)* align 4 [[DST:%.*]]) addrspace(200) #[[ATTR0:[0-9]+]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200i8.p200i8.i32(i8 addrspace(200)* noundef nonnull align 4 dereferenceable(17) [[DST]], i8 addrspace(200)* noundef nonnull align 4 dereferenceable(17) getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i32 0, i32 0), i32 17, i1 false) #[[ATTR3:[0-9]+]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call i8 addrspace(200)* @strcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i64 0, i64 0))
  ret void
}

define void @test_stpcpy_to_memcpy(i8 addrspace(200)* align 4 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_stpcpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -16
; CHECK-ASM-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:  .LBB1_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB1_1)(ca1)
; CHECK-ASM-NEXT:    addi a2, zero, 17
; CHECK-ASM-NEXT:    ccall memcpy
; CHECK-ASM-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 16
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define {{[^@]+}}@test_stpcpy_to_memcpy
; CHECK-IR-SAME: (i8 addrspace(200)* align 4 [[DST:%.*]]) addrspace(200) #[[ATTR0]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200i8.p200i8.i32(i8 addrspace(200)* noundef nonnull align 4 dereferenceable(17) [[DST]], i8 addrspace(200)* noundef nonnull align 4 dereferenceable(17) getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i32 0, i32 0), i32 17, i1 false) #[[ATTR3]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call i8 addrspace(200)* @stpcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i64 0, i64 0))
  ret void
}

define void @test_strcat_to_memcpy(i8 addrspace(200)* align 4 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strcat_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -16
; CHECK-ASM-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:    csc cs0, 0(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:    cmove cs0, ca0
; CHECK-ASM-NEXT:    ccall strlen
; CHECK-ASM-NEXT:    cincoffset ca0, cs0, a0
; CHECK-ASM-NEXT:  .LBB2_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB2_1)(ca1)
; CHECK-ASM-NEXT:    addi a2, zero, 17
; CHECK-ASM-NEXT:    ccall memcpy
; CHECK-ASM-NEXT:    clc cs0, 0(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 16
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define {{[^@]+}}@test_strcat_to_memcpy
; CHECK-IR-SAME: (i8 addrspace(200)* align 4 [[DST:%.*]]) addrspace(200) #[[ATTR0]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    [[STRLEN:%.*]] = call i32 @strlen(i8 addrspace(200)* noundef nonnull dereferenceable(1) [[DST]])
; CHECK-IR-NEXT:    [[ENDPTR:%.*]] = getelementptr i8, i8 addrspace(200)* [[DST]], i32 [[STRLEN]]
; CHECK-IR-NEXT:    call void @llvm.memcpy.p200i8.p200i8.i32(i8 addrspace(200)* noundef nonnull align 1 dereferenceable(17) [[ENDPTR]], i8 addrspace(200)* noundef nonnull align 4 dereferenceable(17) getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i32 0, i32 0), i32 17, i1 false) #[[ATTR4:[0-9]+]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call i8 addrspace(200)* @strcat(i8 addrspace(200)* %dst, i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i64 0, i64 0))
  ret void
}


define void @test_strncpy_to_memcpy(i8 addrspace(200)* align 4 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_strncpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -16
; CHECK-ASM-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:  .LBB3_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB3_1)(ca1)
; CHECK-ASM-NEXT:    addi a2, zero, 17
; CHECK-ASM-NEXT:    mv a3, zero
; CHECK-ASM-NEXT:    ccall strncpy
; CHECK-ASM-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 16
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define {{[^@]+}}@test_strncpy_to_memcpy
; CHECK-IR-SAME: (i8 addrspace(200)* align 4 [[DST:%.*]]) addrspace(200) #[[ATTR0]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    [[CALL:%.*]] = call i8 addrspace(200)* @strncpy(i8 addrspace(200)* [[DST]], i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i32 0, i32 0), i64 17) #[[ATTR0]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call i8 addrspace(200)* @strncpy(i8 addrspace(200)* %dst, i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i64 0, i64 0), i64 17)
  ret void
}

; Note: stpncpy is not handled by SimplifyLibcalls yet, so this should not be changed.
define void @test_stpncpy_to_memcpy(i8 addrspace(200)* align 4 %dst) addrspace(200) nounwind {
; CHECK-ASM-LABEL: test_stpncpy_to_memcpy:
; CHECK-ASM:       # %bb.0: # %entry
; CHECK-ASM-NEXT:    cincoffset csp, csp, -16
; CHECK-ASM-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; CHECK-ASM-NEXT:  .LBB4_1: # %entry
; CHECK-ASM-NEXT:    # Label of block must be emitted
; CHECK-ASM-NEXT:    auipcc ca1, %captab_pcrel_hi(.Lstr)
; CHECK-ASM-NEXT:    clc ca1, %pcrel_lo(.LBB4_1)(ca1)
; CHECK-ASM-NEXT:    addi a2, zero, 17
; CHECK-ASM-NEXT:    mv a3, zero
; CHECK-ASM-NEXT:    ccall stpncpy
; CHECK-ASM-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; CHECK-ASM-NEXT:    cincoffset csp, csp, 16
; CHECK-ASM-NEXT:    cret
; CHECK-IR-LABEL: define {{[^@]+}}@test_stpncpy_to_memcpy
; CHECK-IR-SAME: (i8 addrspace(200)* align 4 [[DST:%.*]]) addrspace(200) #[[ATTR0]] {
; CHECK-IR-NEXT:  entry:
; CHECK-IR-NEXT:    [[CALL:%.*]] = call i8 addrspace(200)* @stpncpy(i8 addrspace(200)* [[DST]], i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i32 0, i32 0), i64 17) #[[ATTR0]]
; CHECK-IR-NEXT:    ret void
;
entry:
  %call = call i8 addrspace(200)* @stpncpy(i8 addrspace(200)* %dst, i8 addrspace(200)* getelementptr inbounds ([17 x i8], [17 x i8] addrspace(200)* @str, i64 0, i64 0), i64 17)
  ret void
}

; UTC_ARGS: --disable
; CHECK-IR: attributes #[[ATTR0]] = { nounwind }
; The no_preserve_cheri_tags should be attribute 3/4 in all cases
; CHECK-IR: attributes #[[ATTR3]] = { no_preserve_cheri_tags nounwind }
; CHECK-IR: attributes #[[ATTR4]] = { no_preserve_cheri_tags }
