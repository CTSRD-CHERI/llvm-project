; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cmpxchg-cap-ptr.ll
; Check that we can generate sensible code for atomic operations using capability pointers on capabilities
; in both hybrid and purecap mode.
; See https://github.com/CTSRD-CHERI/llvm-project/issues/470
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+xcheri,+cap-mode,+f -mattr=+a < %s | FileCheck %s --check-prefixes=PURECAP,PURECAP-ATOMICS --allow-unused-prefixes
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+xcheri,+cap-mode,+f -mattr=-a < %s | FileCheck %s --check-prefixes=PURECAP,PURECAP-LIBCALLS --allow-unused-prefixes
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi ilp32f -mattr=+xcheri,+f -mattr=+a < %s | FileCheck %s --check-prefixes=HYBRID,HYBRID-ATOMICS --allow-unused-prefixes
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi ilp32f -mattr=+xcheri,+f -mattr=-a < %s | FileCheck %s --check-prefixes=HYBRID,HYBRID-LIBCALLS --allow-unused-prefixes

define { i8, i1 } @test_cmpxchg_strong_i8(i8 addrspace(200)* %ptr, i8 %exp, i8 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_i8:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    slli a1, a1, 24
; PURECAP-ATOMICS-NEXT:    srai a1, a1, 24
; PURECAP-ATOMICS-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.b.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB0_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB0_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.b.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB0_1
; PURECAP-ATOMICS-NEXT:  .LBB0_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_i8:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csb a1, 7(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset ca1, csp, 7
; PURECAP-LIBCALLS-NEXT:    csetbounds ca1, ca1, 1
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_1
; PURECAP-LIBCALLS-NEXT:    clb a1, 7(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_i8:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    slli a1, a1, 24
; HYBRID-ATOMICS-NEXT:    srai a1, a1, 24
; HYBRID-ATOMICS-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.b.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB0_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB0_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.b.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB0_1
; HYBRID-ATOMICS-NEXT:  .LBB0_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_i8:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sb a1, 11(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 11
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_1_c@plt
; HYBRID-LIBCALLS-NEXT:    lb a1, 11(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg i8 addrspace(200)* %ptr, i8 %exp, i8 %new acq_rel acquire
  ret { i8, i1 } %1
}

define { i16, i1 } @test_cmpxchg_strong_i16(i16 addrspace(200)* %ptr, i16 %exp, i16 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_i16:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    slli a1, a1, 16
; PURECAP-ATOMICS-NEXT:    srai a1, a1, 16
; PURECAP-ATOMICS-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.h.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB1_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB1_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.h.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB1_1
; PURECAP-ATOMICS-NEXT:  .LBB1_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_i16:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 6
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 2
; PURECAP-LIBCALLS-NEXT:    csh a1, 6(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_2
; PURECAP-LIBCALLS-NEXT:    clh a1, 6(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_i16:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    slli a1, a1, 16
; HYBRID-ATOMICS-NEXT:    srai a1, a1, 16
; HYBRID-ATOMICS-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.h.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB1_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB1_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.h.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB1_1
; HYBRID-ATOMICS-NEXT:  .LBB1_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_i16:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sh a1, 10(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 10
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_2_c@plt
; HYBRID-LIBCALLS-NEXT:    lh a1, 10(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg i16 addrspace(200)* %ptr, i16 %exp, i16 %new acq_rel acquire
  ret { i16, i1 } %1
}

define { i32, i1 } @test_cmpxchg_strong_i32(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_i32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB2_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB2_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB2_1
; PURECAP-ATOMICS-NEXT:  .LBB2_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_i32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_i32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB2_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB2_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB2_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB2_1
; HYBRID-ATOMICS-NEXT:  .LBB2_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_i32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel acquire
  ret { i32, i1 } %1
}

define { i64, i1 } @test_cmpxchg_strong_i64(i64 addrspace(200)* %ptr, i64 %exp, i64 %new) nounwind {
; PURECAP-LABEL: test_cmpxchg_strong_i64:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cincoffset csp, csp, -32
; PURECAP-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    csc cs0, 16(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    mv a6, a5
; PURECAP-NEXT:    mv a7, a4
; PURECAP-NEXT:    cmove ct0, ca1
; PURECAP-NEXT:    cmove cs0, ca0
; PURECAP-NEXT:    cincoffset ca0, csp, 8
; PURECAP-NEXT:    csetbounds ca1, ca0, 8
; PURECAP-NEXT:    csw a3, 12(csp)
; PURECAP-NEXT:    csw a2, 8(csp)
; PURECAP-NEXT:    addi a4, zero, 4
; PURECAP-NEXT:    addi a5, zero, 2
; PURECAP-NEXT:    cmove ca0, ct0
; PURECAP-NEXT:    mv a2, a7
; PURECAP-NEXT:    mv a3, a6
; PURECAP-NEXT:    ccall __atomic_compare_exchange_8
; PURECAP-NEXT:    clw a1, 12(csp)
; PURECAP-NEXT:    clw a2, 8(csp)
; PURECAP-NEXT:    csw a1, 4(cs0)
; PURECAP-NEXT:    csw a2, 0(cs0)
; PURECAP-NEXT:    csb a0, 8(cs0)
; PURECAP-NEXT:    clc cs0, 16(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    cincoffset csp, csp, 32
; PURECAP-NEXT:    cret
;
; HYBRID-LABEL: test_cmpxchg_strong_i64:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    sw s0, 8(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    mv a6, a5
; HYBRID-NEXT:    mv a7, a4
; HYBRID-NEXT:    cmove ct0, ca1
; HYBRID-NEXT:    mv s0, a0
; HYBRID-NEXT:    sw a3, 4(sp)
; HYBRID-NEXT:    sw a2, 0(sp)
; HYBRID-NEXT:    mv a1, sp
; HYBRID-NEXT:    addi a4, zero, 4
; HYBRID-NEXT:    addi a5, zero, 2
; HYBRID-NEXT:    cmove ca0, ct0
; HYBRID-NEXT:    mv a2, a7
; HYBRID-NEXT:    mv a3, a6
; HYBRID-NEXT:    call __atomic_compare_exchange_8_c@plt
; HYBRID-NEXT:    lw a1, 4(sp)
; HYBRID-NEXT:    lw a2, 0(sp)
; HYBRID-NEXT:    sw a1, 4(s0)
; HYBRID-NEXT:    sw a2, 0(s0)
; HYBRID-NEXT:    sb a0, 8(s0)
; HYBRID-NEXT:    lw s0, 8(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
  %1 = cmpxchg i64 addrspace(200)* %ptr, i64 %exp, i64 %new acq_rel acquire
  ret { i64, i1 } %1
}

define { i8 addrspace(200)*, i1 } @test_cmpxchg_strong_cap(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_cap:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB4_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB4_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB4_1
; PURECAP-ATOMICS-NEXT:  .LBB4_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_cap:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 8
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_cap
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_cap:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB4_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB4_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB4_1
; HYBRID-ATOMICS-NEXT:  .LBB4_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_cap:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new acq_rel acquire
  ret { i8 addrspace(200)*, i1 } %1
}

define { i32 addrspace(200)*, i1 } @test_cmpxchg_strong_cap_i32(i32 addrspace(200)* addrspace(200)* %ptr, i32 addrspace(200)* %exp, i32 addrspace(200)* %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_strong_cap_i32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB5_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB5_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB5_1
; PURECAP-ATOMICS-NEXT:  .LBB5_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_strong_cap_i32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 8
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_cap
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_strong_cap_i32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB5_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB5_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB5_1
; HYBRID-ATOMICS-NEXT:  .LBB5_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_strong_cap_i32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i32 addrspace(200)* addrspace(200)* %ptr, i32 addrspace(200)* %exp, i32 addrspace(200)* %new acq_rel acquire
  ret { i32 addrspace(200)*, i1 } %1
}


define { i8, i1 } @test_cmpxchg_weak_i8(i8 addrspace(200)* %ptr, i8 %exp, i8 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_i8:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    slli a1, a1, 24
; PURECAP-ATOMICS-NEXT:    srai a1, a1, 24
; PURECAP-ATOMICS-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.b.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB6_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB6_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.b.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB6_1
; PURECAP-ATOMICS-NEXT:  .LBB6_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_i8:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    csb a1, 7(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset ca1, csp, 7
; PURECAP-LIBCALLS-NEXT:    csetbounds ca1, ca1, 1
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_1
; PURECAP-LIBCALLS-NEXT:    clb a1, 7(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_i8:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    slli a1, a1, 24
; HYBRID-ATOMICS-NEXT:    srai a1, a1, 24
; HYBRID-ATOMICS-NEXT:  .LBB6_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.b.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB6_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB6_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.b.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB6_1
; HYBRID-ATOMICS-NEXT:  .LBB6_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_i8:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sb a1, 11(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 11
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_1_c@plt
; HYBRID-LIBCALLS-NEXT:    lb a1, 11(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i8 addrspace(200)* %ptr, i8 %exp, i8 %new acq_rel acquire
  ret { i8, i1 } %1
}

define { i16, i1 } @test_cmpxchg_weak_i16(i16 addrspace(200)* %ptr, i16 %exp, i16 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_i16:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:    slli a1, a1, 16
; PURECAP-ATOMICS-NEXT:    srai a1, a1, 16
; PURECAP-ATOMICS-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.h.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB7_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB7_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.h.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB7_1
; PURECAP-ATOMICS-NEXT:  .LBB7_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_i16:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 6
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 2
; PURECAP-LIBCALLS-NEXT:    csh a1, 6(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_2
; PURECAP-LIBCALLS-NEXT:    clh a1, 6(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_i16:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:    slli a1, a1, 16
; HYBRID-ATOMICS-NEXT:    srai a1, a1, 16
; HYBRID-ATOMICS-NEXT:  .LBB7_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.h.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB7_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB7_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.h.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB7_1
; HYBRID-ATOMICS-NEXT:  .LBB7_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_i16:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sh a1, 10(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 10
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_2_c@plt
; HYBRID-LIBCALLS-NEXT:    lh a1, 10(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i16 addrspace(200)* %ptr, i16 %exp, i16 %new acq_rel acquire
  ret { i16, i1 } %1
}

define { i32, i1 } @test_cmpxchg_weak_i32(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_i32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB8_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB8_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB8_1
; PURECAP-ATOMICS-NEXT:  .LBB8_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_i32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_i32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB8_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB8_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB8_1
; HYBRID-ATOMICS-NEXT:  .LBB8_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_i32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel acquire
  ret { i32, i1 } %1
}

define { i64, i1 } @test_cmpxchg_weak_i64(i64 addrspace(200)* %ptr, i64 %exp, i64 %new) nounwind {
; PURECAP-LABEL: test_cmpxchg_weak_i64:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    cincoffset csp, csp, -32
; PURECAP-NEXT:    csc cra, 24(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    csc cs0, 16(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    mv a6, a5
; PURECAP-NEXT:    mv a7, a4
; PURECAP-NEXT:    cmove ct0, ca1
; PURECAP-NEXT:    cmove cs0, ca0
; PURECAP-NEXT:    cincoffset ca0, csp, 8
; PURECAP-NEXT:    csetbounds ca1, ca0, 8
; PURECAP-NEXT:    csw a3, 12(csp)
; PURECAP-NEXT:    csw a2, 8(csp)
; PURECAP-NEXT:    addi a4, zero, 4
; PURECAP-NEXT:    addi a5, zero, 2
; PURECAP-NEXT:    cmove ca0, ct0
; PURECAP-NEXT:    mv a2, a7
; PURECAP-NEXT:    mv a3, a6
; PURECAP-NEXT:    ccall __atomic_compare_exchange_8
; PURECAP-NEXT:    clw a1, 12(csp)
; PURECAP-NEXT:    clw a2, 8(csp)
; PURECAP-NEXT:    csw a1, 4(cs0)
; PURECAP-NEXT:    csw a2, 0(cs0)
; PURECAP-NEXT:    csb a0, 8(cs0)
; PURECAP-NEXT:    clc cs0, 16(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    clc cra, 24(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    cincoffset csp, csp, 32
; PURECAP-NEXT:    cret
;
; HYBRID-LABEL: test_cmpxchg_weak_i64:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    sw s0, 8(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    mv a6, a5
; HYBRID-NEXT:    mv a7, a4
; HYBRID-NEXT:    cmove ct0, ca1
; HYBRID-NEXT:    mv s0, a0
; HYBRID-NEXT:    sw a3, 4(sp)
; HYBRID-NEXT:    sw a2, 0(sp)
; HYBRID-NEXT:    mv a1, sp
; HYBRID-NEXT:    addi a4, zero, 4
; HYBRID-NEXT:    addi a5, zero, 2
; HYBRID-NEXT:    cmove ca0, ct0
; HYBRID-NEXT:    mv a2, a7
; HYBRID-NEXT:    mv a3, a6
; HYBRID-NEXT:    call __atomic_compare_exchange_8_c@plt
; HYBRID-NEXT:    lw a1, 4(sp)
; HYBRID-NEXT:    lw a2, 0(sp)
; HYBRID-NEXT:    sw a1, 4(s0)
; HYBRID-NEXT:    sw a2, 0(s0)
; HYBRID-NEXT:    sb a0, 8(s0)
; HYBRID-NEXT:    lw s0, 8(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
  %1 = cmpxchg weak i64 addrspace(200)* %ptr, i64 %exp, i64 %new acq_rel acquire
  ret { i64, i1 } %1
}

define { i8 addrspace(200)*, i1 } @test_cmpxchg_weak_cap(i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_cap:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB10_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB10_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB10_1
; PURECAP-ATOMICS-NEXT:  .LBB10_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_cap:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 8
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_cap
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_cap:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB10_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB10_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB10_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB10_1
; HYBRID-ATOMICS-NEXT:  .LBB10_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_cap:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i8 addrspace(200)* addrspace(200)* %ptr, i8 addrspace(200)* %exp, i8 addrspace(200)* %new acq_rel acquire
  ret { i8 addrspace(200)*, i1 } %1
}

define { i32 addrspace(200)*, i1 } @test_cmpxchg_weak_cap_i32(i32 addrspace(200)* addrspace(200)* %ptr, i32 addrspace(200)* %exp, i32 addrspace(200)* %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_cap_i32:
; PURECAP-ATOMICS:       # %bb.0:
; PURECAP-ATOMICS-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.c.aq ca3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB11_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB11_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.c.aq a4, ca2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB11_1
; PURECAP-ATOMICS-NEXT:  .LBB11_3:
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    cmove ca0, ca3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_cap_i32:
; PURECAP-LIBCALLS:       # %bb.0:
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 0
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 8
; PURECAP-LIBCALLS-NEXT:    csc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_cap
; PURECAP-LIBCALLS-NEXT:    clc ca1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    cmove ca0, ca1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_cap_i32:
; HYBRID-ATOMICS:       # %bb.0:
; HYBRID-ATOMICS-NEXT:  .LBB11_1: # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.c.cap ca2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB11_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # in Loop: Header=BB11_1 Depth=1
; HYBRID-ATOMICS-NEXT:    cmove ca3, ca2
; HYBRID-ATOMICS-NEXT:    sc.c.cap ca3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB11_1
; HYBRID-ATOMICS-NEXT:  .LBB11_3:
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    cmove ca0, ca2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_cap_i32:
; HYBRID-LIBCALLS:       # %bb.0:
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a1, sp
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_cap_c@plt
; HYBRID-LIBCALLS-NEXT:    lc ca1, 0(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    cmove ca0, ca1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
  %1 = cmpxchg weak i32 addrspace(200)* addrspace(200)* %ptr, i32 addrspace(200)* %exp, i32 addrspace(200)* %new acq_rel acquire
  ret { i32 addrspace(200)*, i1 } %1
}

; Test various success/failure memory orders

define { i32, i1 } @test_cmpxchg_weak_sc_sc(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_sc_sc:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB12_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB12_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB12_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB12_1
; PURECAP-ATOMICS-NEXT:  .LBB12_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_sc_sc:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_sc_sc:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB12_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB12_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB12_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB12_1
; HYBRID-ATOMICS-NEXT:  .LBB12_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_sc_sc:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new seq_cst seq_cst
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_sc_acquire(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_sc_acquire:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB13_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB13_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB13_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB13_1
; PURECAP-ATOMICS-NEXT:  .LBB13_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_sc_acquire:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_sc_acquire:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB13_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB13_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB13_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB13_1
; HYBRID-ATOMICS-NEXT:  .LBB13_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_sc_acquire:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new seq_cst acquire
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_sc_relaxed(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_sc_relaxed:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB14_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB14_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB14_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB14_1
; PURECAP-ATOMICS-NEXT:  .LBB14_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_sc_relaxed:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca4, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca4
; PURECAP-LIBCALLS-NEXT:    mv a4, zero
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_sc_relaxed:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB14_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB14_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB14_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB14_1
; HYBRID-ATOMICS-NEXT:  .LBB14_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_sc_relaxed:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    mv a4, zero
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new seq_cst monotonic
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_acqrel_acquire(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_acqrel_acquire:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB15_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB15_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB15_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB15_1
; PURECAP-ATOMICS-NEXT:  .LBB15_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_acqrel_acquire:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_acqrel_acquire:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB15_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB15_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB15_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB15_1
; HYBRID-ATOMICS-NEXT:  .LBB15_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_acqrel_acquire:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel acquire
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_acqrel_relaxed(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_acqrel_relaxed:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB16_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB16_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB16_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB16_1
; PURECAP-ATOMICS-NEXT:  .LBB16_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_acqrel_relaxed:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca4, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 4
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca4
; PURECAP-LIBCALLS-NEXT:    mv a4, zero
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_acqrel_relaxed:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB16_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB16_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB16_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB16_1
; HYBRID-ATOMICS-NEXT:  .LBB16_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_acqrel_relaxed:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 4
; HYBRID-LIBCALLS-NEXT:    mv a4, zero
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acq_rel monotonic
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_release_acquire(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_release_acquire:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB17_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB17_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB17_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB17_1
; PURECAP-ATOMICS-NEXT:  .LBB17_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_release_acquire:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 3
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_release_acquire:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB17_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB17_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB17_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB17_1
; HYBRID-ATOMICS-NEXT:  .LBB17_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_release_acquire:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 3
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new release acquire
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_release_relaxed(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_release_relaxed:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB18_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB18_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB18_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w.rl a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB18_1
; PURECAP-ATOMICS-NEXT:  .LBB18_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_release_relaxed:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca4, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 3
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca4
; PURECAP-LIBCALLS-NEXT:    mv a4, zero
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_release_relaxed:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB18_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB18_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB18_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB18_1
; HYBRID-ATOMICS-NEXT:  .LBB18_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_release_relaxed:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 3
; HYBRID-LIBCALLS-NEXT:    mv a4, zero
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new release monotonic
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_acquire_acquire(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_acquire_acquire:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB19_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB19_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB19_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB19_1
; PURECAP-ATOMICS-NEXT:  .LBB19_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_acquire_acquire:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca5, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 2
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca5
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_acquire_acquire:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB19_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB19_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB19_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB19_1
; HYBRID-ATOMICS-NEXT:  .LBB19_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_acquire_acquire:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 2
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 2
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acquire acquire
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_acquire_relaxed(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_acquire_relaxed:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB20_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aq a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB20_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB20_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB20_1
; PURECAP-ATOMICS-NEXT:  .LBB20_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_acquire_relaxed:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca4, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca4
; PURECAP-LIBCALLS-NEXT:    mv a4, zero
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_acquire_relaxed:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB20_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB20_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB20_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB20_1
; HYBRID-ATOMICS-NEXT:  .LBB20_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_acquire_relaxed:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 2
; HYBRID-LIBCALLS-NEXT:    mv a4, zero
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new acquire monotonic
  ret { i32, i1 } %0
}

define { i32, i1 } @test_cmpxchg_weak_relaxed_relaxed(i32 addrspace(200)* %ptr, i32 %exp, i32 %new) nounwind {
; PURECAP-ATOMICS-LABEL: test_cmpxchg_weak_relaxed_relaxed:
; PURECAP-ATOMICS:       # %bb.0: # %entry
; PURECAP-ATOMICS-NEXT:  .LBB21_1: # %entry
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a1, .LBB21_3
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %entry
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB21_1 Depth=1
; PURECAP-ATOMICS-NEXT:    csc.w a4, a2, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB21_1
; PURECAP-ATOMICS-NEXT:  .LBB21_3: # %entry
; PURECAP-ATOMICS-NEXT:    xor a0, a3, a1
; PURECAP-ATOMICS-NEXT:    seqz a1, a0
; PURECAP-ATOMICS-NEXT:    mv a0, a3
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: test_cmpxchg_weak_relaxed_relaxed:
; PURECAP-LIBCALLS:       # %bb.0: # %entry
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp) # 8-byte Folded Spill
; PURECAP-LIBCALLS-NEXT:    cincoffset ca3, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds ca3, ca3, 4
; PURECAP-LIBCALLS-NEXT:    csw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    cmove ca1, ca3
; PURECAP-LIBCALLS-NEXT:    mv a3, zero
; PURECAP-LIBCALLS-NEXT:    mv a4, zero
; PURECAP-LIBCALLS-NEXT:    ccall __atomic_compare_exchange_4
; PURECAP-LIBCALLS-NEXT:    clw a1, 4(csp)
; PURECAP-LIBCALLS-NEXT:    mv a2, a0
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    mv a1, a2
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp) # 8-byte Folded Reload
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: test_cmpxchg_weak_relaxed_relaxed:
; HYBRID-ATOMICS:       # %bb.0: # %entry
; HYBRID-ATOMICS-NEXT:  .LBB21_1: # %entry
; HYBRID-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a1, .LBB21_3
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %entry
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB21_1 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB21_1
; HYBRID-ATOMICS-NEXT:  .LBB21_3: # %entry
; HYBRID-ATOMICS-NEXT:    xor a0, a2, a1
; HYBRID-ATOMICS-NEXT:    seqz a1, a0
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: test_cmpxchg_weak_relaxed_relaxed:
; HYBRID-LIBCALLS:       # %bb.0: # %entry
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-LIBCALLS-NEXT:    sw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 8
; HYBRID-LIBCALLS-NEXT:    mv a3, zero
; HYBRID-LIBCALLS-NEXT:    mv a4, zero
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c@plt
; HYBRID-LIBCALLS-NEXT:    lw a1, 8(sp)
; HYBRID-LIBCALLS-NEXT:    mv a2, a0
; HYBRID-LIBCALLS-NEXT:    mv a0, a1
; HYBRID-LIBCALLS-NEXT:    mv a1, a2
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
entry:
  %0 = cmpxchg weak i32 addrspace(200)* %ptr, i32 %exp, i32 %new monotonic monotonic
  ret { i32, i1 } %0
}
