; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --scrub-attributes --force-update
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/atomic-rmw-cap-ptr.ll
; Check that we can generate sensible code for atomic operations using capability pointers
; https://github.com/CTSRD-CHERI/llvm-project/issues/470
; RUN: %riscv32_cheri_purecap_llc %s -o - -mattr=+f,+a -verify-machineinstrs | FileCheck %s --check-prefixes=PURECAP,PURECAP-ATOMICS
; RUN: %riscv32_cheri_purecap_llc %s -o - -mattr=+f,-a -verify-machineinstrs | FileCheck %s --check-prefixes=PURECAP,PURECAP-LIBCALLS
; Missing pattern for floating-point load via capability breaks -mattr=+f hybrid
; RUN: %riscv32_cheri_llc %s -o - -mattr=+f,+a -verify-machineinstrs | FileCheck %s --check-prefixes=HYBRID,HYBRID-ATOMICS
; RUN: %riscv32_cheri_llc %s -o - -mattr=+f,-a -verify-machineinstrs | FileCheck %s --check-prefixes=HYBRID,HYBRID-LIBCALLS

define dso_local i32 @atomic_cap_ptr_xchg(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_xchg:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camoswap.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_xchg:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB0_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB0_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_xchg:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB0_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB0_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    mv a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB0_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB0_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB0_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB0_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB0_3
; HYBRID-ATOMICS-NEXT:  .LBB0_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB0_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB0_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_xchg:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw xchg i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_add(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_add:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camoadd.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_add:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB1_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_add_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB1_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_add:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB1_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB1_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    add a2, a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB1_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB1_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB1_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB1_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB1_3
; HYBRID-ATOMICS-NEXT:  .LBB1_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB1_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB1_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_add:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_add_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw add i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_sub(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_sub:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    neg a1, a1
; PURECAP-ATOMICS-NEXT:    camoadd.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_sub:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB2_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_sub_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB2_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_sub:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB2_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB2_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    sub a2, a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB2_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB2_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB2_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB2_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB2_3
; HYBRID-ATOMICS-NEXT:  .LBB2_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB2_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB2_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_sub:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_sub_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw sub i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_and(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_and:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camoand.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_and:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB3_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_and_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB3_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_and:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB3_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB3_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    and a2, a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB3_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB3_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB3_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB3_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB3_3
; HYBRID-ATOMICS-NEXT:  .LBB3_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB3_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB3_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_and:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_and_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw and i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_nand(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_nand:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:  .LBB4_1: # %bb
; PURECAP-ATOMICS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a2, (ca0)
; PURECAP-ATOMICS-NEXT:    and a3, a2, a1
; PURECAP-ATOMICS-NEXT:    not a3, a3
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a3, a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a3, .LBB4_1
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %bb
; PURECAP-ATOMICS-NEXT:    mv a0, a2
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_nand:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB4_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_nand_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB4_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_nand:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB4_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB4_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    and a2, a2, a1
; HYBRID-ATOMICS-NEXT:    not a2, a2
; HYBRID-ATOMICS-NEXT:  .LBB4_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB4_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB4_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB4_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB4_3
; HYBRID-ATOMICS-NEXT:  .LBB4_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB4_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB4_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_nand:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_nand_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw nand i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_or(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_or:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camoor.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_or:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB5_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_or_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB5_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_or:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB5_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB5_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    or a2, a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB5_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB5_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB5_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB5_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB5_3
; HYBRID-ATOMICS-NEXT:  .LBB5_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB5_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB5_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_or:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_or_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw or i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_xor(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_xor:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camoxor.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_xor:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -16
; PURECAP-LIBCALLS-NEXT:    csc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB6_1: # %bb
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca3, %captab_pcrel_hi(__atomic_fetch_xor_4)
; PURECAP-LIBCALLS-NEXT:    clc ca3, %pcrel_lo(.LBB6_1)(ca3)
; PURECAP-LIBCALLS-NEXT:    addi a2, zero, 5
; PURECAP-LIBCALLS-NEXT:    cjalr ca3
; PURECAP-LIBCALLS-NEXT:    clc cra, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 16
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_xor:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:  .LBB6_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB6_3 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    xor a2, a2, a1
; HYBRID-ATOMICS-NEXT:  .LBB6_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB6_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB6_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB6_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB6_3
; HYBRID-ATOMICS-NEXT:  .LBB6_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB6_1 Depth=1
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB6_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_xor:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -16
; HYBRID-LIBCALLS-NEXT:    sw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi a2, zero, 5
; HYBRID-LIBCALLS-NEXT:    call __atomic_fetch_xor_4_c
; HYBRID-LIBCALLS-NEXT:    lw ra, 12(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 16
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw xor i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_max(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_max:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camomax.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_max:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -48
; PURECAP-LIBCALLS-NEXT:    csc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    cmove cs2, ca0
; PURECAP-LIBCALLS-NEXT:    clw a1, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca2, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca2, a0
; PURECAP-LIBCALLS-NEXT:    j .LBB7_2
; PURECAP-LIBCALLS-NEXT:  .LBB7_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB7_5: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB7_5)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    bnez a0, .LBB7_4
; PURECAP-LIBCALLS-NEXT:  .LBB7_2: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, a1
; PURECAP-LIBCALLS-NEXT:    blt s0, a1, .LBB7_1
; PURECAP-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, s0
; PURECAP-LIBCALLS-NEXT:    j .LBB7_1
; PURECAP-LIBCALLS-NEXT:  .LBB7_4: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    clc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 48
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_max:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    j .LBB7_2
; HYBRID-ATOMICS-NEXT:  .LBB7_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; HYBRID-ATOMICS-NEXT:  .LBB7_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB7_2 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB7_7
; HYBRID-ATOMICS-NEXT:  # %bb.6: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB7_5 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB7_5
; HYBRID-ATOMICS-NEXT:  .LBB7_7: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; HYBRID-ATOMICS-NEXT:    beq a2, a3, .LBB7_4
; HYBRID-ATOMICS-NEXT:  .LBB7_2: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB7_5 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    blt a1, a2, .LBB7_1
; HYBRID-ATOMICS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a2, a1
; HYBRID-ATOMICS-NEXT:    j .LBB7_1
; HYBRID-ATOMICS-NEXT:  .LBB7_4: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_max:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a3, (ca0)
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    j .LBB7_2
; HYBRID-LIBCALLS-NEXT:  .LBB7_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    sw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 20
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    bnez a0, .LBB7_4
; HYBRID-LIBCALLS-NEXT:  .LBB7_2: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, a3
; HYBRID-LIBCALLS-NEXT:    blt s0, a3, .LBB7_1
; HYBRID-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB7_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, s0
; HYBRID-LIBCALLS-NEXT:    j .LBB7_1
; HYBRID-LIBCALLS-NEXT:  .LBB7_4: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    mv a0, a3
; HYBRID-LIBCALLS-NEXT:    lw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw max i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_min(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_min:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camomin.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_min:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -48
; PURECAP-LIBCALLS-NEXT:    csc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    cmove cs2, ca0
; PURECAP-LIBCALLS-NEXT:    clw a1, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca2, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca2, a0
; PURECAP-LIBCALLS-NEXT:    j .LBB8_2
; PURECAP-LIBCALLS-NEXT:  .LBB8_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB8_5: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB8_5)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    bnez a0, .LBB8_4
; PURECAP-LIBCALLS-NEXT:  .LBB8_2: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, a1
; PURECAP-LIBCALLS-NEXT:    bge s0, a1, .LBB8_1
; PURECAP-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, s0
; PURECAP-LIBCALLS-NEXT:    j .LBB8_1
; PURECAP-LIBCALLS-NEXT:  .LBB8_4: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    clc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 48
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_min:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    j .LBB8_2
; HYBRID-ATOMICS-NEXT:  .LBB8_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; HYBRID-ATOMICS-NEXT:  .LBB8_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB8_2 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB8_7
; HYBRID-ATOMICS-NEXT:  # %bb.6: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB8_5 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB8_5
; HYBRID-ATOMICS-NEXT:  .LBB8_7: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; HYBRID-ATOMICS-NEXT:    beq a2, a3, .LBB8_4
; HYBRID-ATOMICS-NEXT:  .LBB8_2: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB8_5 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    bge a1, a2, .LBB8_1
; HYBRID-ATOMICS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a2, a1
; HYBRID-ATOMICS-NEXT:    j .LBB8_1
; HYBRID-ATOMICS-NEXT:  .LBB8_4: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_min:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a3, (ca0)
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    j .LBB8_2
; HYBRID-LIBCALLS-NEXT:  .LBB8_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    sw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 20
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    bnez a0, .LBB8_4
; HYBRID-LIBCALLS-NEXT:  .LBB8_2: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, a3
; HYBRID-LIBCALLS-NEXT:    bge s0, a3, .LBB8_1
; HYBRID-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB8_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, s0
; HYBRID-LIBCALLS-NEXT:    j .LBB8_1
; HYBRID-LIBCALLS-NEXT:  .LBB8_4: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    mv a0, a3
; HYBRID-LIBCALLS-NEXT:    lw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw min i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_umax(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_umax:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camomaxu.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_umax:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -48
; PURECAP-LIBCALLS-NEXT:    csc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    cmove cs2, ca0
; PURECAP-LIBCALLS-NEXT:    clw a1, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca2, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca2, a0
; PURECAP-LIBCALLS-NEXT:    j .LBB9_2
; PURECAP-LIBCALLS-NEXT:  .LBB9_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB9_5: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB9_5)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    bnez a0, .LBB9_4
; PURECAP-LIBCALLS-NEXT:  .LBB9_2: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, a1
; PURECAP-LIBCALLS-NEXT:    bltu s0, a1, .LBB9_1
; PURECAP-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, s0
; PURECAP-LIBCALLS-NEXT:    j .LBB9_1
; PURECAP-LIBCALLS-NEXT:  .LBB9_4: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    clc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 48
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_umax:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    j .LBB9_2
; HYBRID-ATOMICS-NEXT:  .LBB9_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; HYBRID-ATOMICS-NEXT:  .LBB9_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB9_2 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB9_7
; HYBRID-ATOMICS-NEXT:  # %bb.6: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB9_5 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB9_5
; HYBRID-ATOMICS-NEXT:  .LBB9_7: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; HYBRID-ATOMICS-NEXT:    beq a2, a3, .LBB9_4
; HYBRID-ATOMICS-NEXT:  .LBB9_2: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB9_5 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    bltu a1, a2, .LBB9_1
; HYBRID-ATOMICS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a2, a1
; HYBRID-ATOMICS-NEXT:    j .LBB9_1
; HYBRID-ATOMICS-NEXT:  .LBB9_4: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_umax:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a3, (ca0)
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    j .LBB9_2
; HYBRID-LIBCALLS-NEXT:  .LBB9_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    sw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 20
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    bnez a0, .LBB9_4
; HYBRID-LIBCALLS-NEXT:  .LBB9_2: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, a3
; HYBRID-LIBCALLS-NEXT:    bltu s0, a3, .LBB9_1
; HYBRID-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB9_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, s0
; HYBRID-LIBCALLS-NEXT:    j .LBB9_1
; HYBRID-LIBCALLS-NEXT:  .LBB9_4: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    mv a0, a3
; HYBRID-LIBCALLS-NEXT:    lw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw umax i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local i32 @atomic_cap_ptr_umin(i32 addrspace(200)* %ptr, i32 %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_umin:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    camominu.w.aqrl a0, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_umin:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -48
; PURECAP-LIBCALLS-NEXT:    csc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    mv s0, a1
; PURECAP-LIBCALLS-NEXT:    cmove cs2, ca0
; PURECAP-LIBCALLS-NEXT:    clw a1, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca2, csp, 12
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca2, a0
; PURECAP-LIBCALLS-NEXT:    j .LBB10_2
; PURECAP-LIBCALLS-NEXT:  .LBB10_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    csw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:  .LBB10_5: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB10_5)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs2
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    clw a1, 12(csp)
; PURECAP-LIBCALLS-NEXT:    bnez a0, .LBB10_4
; PURECAP-LIBCALLS-NEXT:  .LBB10_2: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, a1
; PURECAP-LIBCALLS-NEXT:    bgeu s0, a1, .LBB10_1
; PURECAP-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; PURECAP-LIBCALLS-NEXT:    mv a2, s0
; PURECAP-LIBCALLS-NEXT:    j .LBB10_1
; PURECAP-LIBCALLS-NEXT:  .LBB10_4: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    mv a0, a1
; PURECAP-LIBCALLS-NEXT:    clc cs2, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs1, 24(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 32(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 40(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 48
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_umin:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    j .LBB10_2
; HYBRID-ATOMICS-NEXT:  .LBB10_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; HYBRID-ATOMICS-NEXT:  .LBB10_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB10_2 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a2, a3, .LBB10_7
; HYBRID-ATOMICS-NEXT:  # %bb.6: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB10_5 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a4, a2
; HYBRID-ATOMICS-NEXT:    sc.w.cap a4, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a4, .LBB10_5
; HYBRID-ATOMICS-NEXT:  .LBB10_7: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; HYBRID-ATOMICS-NEXT:    beq a2, a3, .LBB10_4
; HYBRID-ATOMICS-NEXT:  .LBB10_2: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB10_5 Depth 2
; HYBRID-ATOMICS-NEXT:    mv a3, a2
; HYBRID-ATOMICS-NEXT:    bgeu a1, a2, .LBB10_1
; HYBRID-ATOMICS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; HYBRID-ATOMICS-NEXT:    mv a2, a1
; HYBRID-ATOMICS-NEXT:    j .LBB10_1
; HYBRID-ATOMICS-NEXT:  .LBB10_4: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    mv a0, a2
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_umin:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a3, (ca0)
; HYBRID-LIBCALLS-NEXT:    mv s0, a1
; HYBRID-LIBCALLS-NEXT:    j .LBB10_2
; HYBRID-LIBCALLS-NEXT:  .LBB10_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    sw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 20
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 8(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    lw a3, 20(sp)
; HYBRID-LIBCALLS-NEXT:    bnez a0, .LBB10_4
; HYBRID-LIBCALLS-NEXT:  .LBB10_2: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, a3
; HYBRID-LIBCALLS-NEXT:    bgeu s0, a3, .LBB10_1
; HYBRID-LIBCALLS-NEXT:  # %bb.3: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # in Loop: Header=BB10_2 Depth=1
; HYBRID-LIBCALLS-NEXT:    mv a2, s0
; HYBRID-LIBCALLS-NEXT:    j .LBB10_1
; HYBRID-LIBCALLS-NEXT:  .LBB10_4: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    mv a0, a3
; HYBRID-LIBCALLS-NEXT:    lw s0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw umin i32 addrspace(200)* %ptr, i32 %val seq_cst
  ret i32 %tmp
}

define dso_local float @atomic_cap_ptr_fadd(float addrspace(200)* %ptr, float %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_fadd:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    cflw ft1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fmv.w.x ft0, a1
; PURECAP-ATOMICS-NEXT:  .LBB11_1: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    # Child Loop BB11_3 Depth 2
; PURECAP-ATOMICS-NEXT:    fadd.s ft2, ft1, ft0
; PURECAP-ATOMICS-NEXT:    fmv.x.w a1, ft2
; PURECAP-ATOMICS-NEXT:    fmv.x.w a2, ft1
; PURECAP-ATOMICS-NEXT:  .LBB11_3: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # Parent Loop BB11_1 Depth=1
; PURECAP-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a2, .LBB11_5
; PURECAP-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB11_3 Depth=2
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a4, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB11_3
; PURECAP-ATOMICS-NEXT:  .LBB11_5: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB11_1 Depth=1
; PURECAP-ATOMICS-NEXT:    fmv.w.x ft1, a3
; PURECAP-ATOMICS-NEXT:    bne a3, a2, .LBB11_1
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; PURECAP-ATOMICS-NEXT:    fmv.x.w a0, ft1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_fadd:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 16(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cmove cs0, ca0
; PURECAP-LIBCALLS-NEXT:    fmv.w.x ft0, a1
; PURECAP-LIBCALLS-NEXT:    cfsw ft0, 0(csp)
; PURECAP-LIBCALLS-NEXT:    cflw ft0, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca1, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca1, a0
; PURECAP-LIBCALLS-NEXT:  .LBB11_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    cflw ft1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    fadd.s ft1, ft0, ft1
; PURECAP-LIBCALLS-NEXT:    cfsw ft0, 4(csp)
; PURECAP-LIBCALLS-NEXT:    fmv.x.w a2, ft1
; PURECAP-LIBCALLS-NEXT:  .LBB11_3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB11_1 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB11_3)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs0
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    cflw ft0, 4(csp)
; PURECAP-LIBCALLS-NEXT:    beqz a0, .LBB11_1
; PURECAP-LIBCALLS-NEXT:  # %bb.2: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    fmv.x.w a0, ft0
; PURECAP-LIBCALLS-NEXT:    clc cs1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 24(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_fadd:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft0, a1
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft1, a2
; HYBRID-ATOMICS-NEXT:  .LBB11_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB11_3 Depth 2
; HYBRID-ATOMICS-NEXT:    fadd.s ft2, ft1, ft0
; HYBRID-ATOMICS-NEXT:    fmv.x.w a1, ft2
; HYBRID-ATOMICS-NEXT:    fmv.x.w a2, ft1
; HYBRID-ATOMICS-NEXT:  .LBB11_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB11_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a1, a2, .LBB11_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB11_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a3, a1
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB11_3
; HYBRID-ATOMICS-NEXT:  .LBB11_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB11_1 Depth=1
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft1, a1
; HYBRID-ATOMICS-NEXT:    bne a1, a2, .LBB11_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fmv.x.w a0, ft1
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_fadd:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 16(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a0, (ca0)
; HYBRID-LIBCALLS-NEXT:    fmv.w.x ft0, a1
; HYBRID-LIBCALLS-NEXT:    fsw ft0, 12(sp)
; HYBRID-LIBCALLS-NEXT:    fmv.w.x ft0, a0
; HYBRID-LIBCALLS-NEXT:  .LBB11_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    flw ft1, 12(sp)
; HYBRID-LIBCALLS-NEXT:    fadd.s ft1, ft0, ft1
; HYBRID-LIBCALLS-NEXT:    fsw ft0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    fmv.x.w a2, ft1
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 24
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 16(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    flw ft0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    beqz a0, .LBB11_1
; HYBRID-LIBCALLS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    fmv.x.w a0, ft0
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw fadd float addrspace(200)* %ptr, float %val seq_cst
  ret float %tmp
}

define dso_local float @atomic_cap_ptr_fsub(float addrspace(200)* %ptr, float %val) nounwind {
; PURECAP-ATOMICS-LABEL: atomic_cap_ptr_fsub:
; PURECAP-ATOMICS:       # %bb.0: # %bb
; PURECAP-ATOMICS-NEXT:    cflw ft1, 0(ca0)
; PURECAP-ATOMICS-NEXT:    fmv.w.x ft0, a1
; PURECAP-ATOMICS-NEXT:  .LBB12_1: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; PURECAP-ATOMICS-NEXT:    # Child Loop BB12_3 Depth 2
; PURECAP-ATOMICS-NEXT:    fsub.s ft2, ft1, ft0
; PURECAP-ATOMICS-NEXT:    fmv.x.w a1, ft2
; PURECAP-ATOMICS-NEXT:    fmv.x.w a2, ft1
; PURECAP-ATOMICS-NEXT:  .LBB12_3: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # Parent Loop BB12_1 Depth=1
; PURECAP-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; PURECAP-ATOMICS-NEXT:    clr.w.aqrl a3, (ca0)
; PURECAP-ATOMICS-NEXT:    bne a3, a2, .LBB12_5
; PURECAP-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB12_3 Depth=2
; PURECAP-ATOMICS-NEXT:    csc.w.aqrl a4, a1, (ca0)
; PURECAP-ATOMICS-NEXT:    bnez a4, .LBB12_3
; PURECAP-ATOMICS-NEXT:  .LBB12_5: # %atomicrmw.start
; PURECAP-ATOMICS-NEXT:    # in Loop: Header=BB12_1 Depth=1
; PURECAP-ATOMICS-NEXT:    fmv.w.x ft1, a3
; PURECAP-ATOMICS-NEXT:    bne a3, a2, .LBB12_1
; PURECAP-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; PURECAP-ATOMICS-NEXT:    fmv.x.w a0, ft1
; PURECAP-ATOMICS-NEXT:    cret
;
; PURECAP-LIBCALLS-LABEL: atomic_cap_ptr_fsub:
; PURECAP-LIBCALLS:       # %bb.0: # %bb
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, -32
; PURECAP-LIBCALLS-NEXT:    csc cra, 24(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs0, 16(csp)
; PURECAP-LIBCALLS-NEXT:    csc cs1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    cmove cs0, ca0
; PURECAP-LIBCALLS-NEXT:    fmv.w.x ft0, a1
; PURECAP-LIBCALLS-NEXT:    cfsw ft0, 0(csp)
; PURECAP-LIBCALLS-NEXT:    cflw ft0, 0(ca0)
; PURECAP-LIBCALLS-NEXT:    addi a0, zero, 4
; PURECAP-LIBCALLS-NEXT:    cincoffset ca1, csp, 4
; PURECAP-LIBCALLS-NEXT:    csetbounds cs1, ca1, a0
; PURECAP-LIBCALLS-NEXT:  .LBB12_1: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; PURECAP-LIBCALLS-NEXT:    cflw ft1, 0(csp)
; PURECAP-LIBCALLS-NEXT:    fsub.s ft1, ft0, ft1
; PURECAP-LIBCALLS-NEXT:    cfsw ft0, 4(csp)
; PURECAP-LIBCALLS-NEXT:    fmv.x.w a2, ft1
; PURECAP-LIBCALLS-NEXT:  .LBB12_3: # %atomicrmw.start
; PURECAP-LIBCALLS-NEXT:    # in Loop: Header=BB12_1 Depth=1
; PURECAP-LIBCALLS-NEXT:    # Label of block must be emitted
; PURECAP-LIBCALLS-NEXT:    auipcc ca5, %captab_pcrel_hi(__atomic_compare_exchange_4)
; PURECAP-LIBCALLS-NEXT:    clc ca5, %pcrel_lo(.LBB12_3)(ca5)
; PURECAP-LIBCALLS-NEXT:    addi a3, zero, 5
; PURECAP-LIBCALLS-NEXT:    addi a4, zero, 5
; PURECAP-LIBCALLS-NEXT:    cmove ca0, cs0
; PURECAP-LIBCALLS-NEXT:    cmove ca1, cs1
; PURECAP-LIBCALLS-NEXT:    cjalr ca5
; PURECAP-LIBCALLS-NEXT:    cflw ft0, 4(csp)
; PURECAP-LIBCALLS-NEXT:    beqz a0, .LBB12_1
; PURECAP-LIBCALLS-NEXT:  # %bb.2: # %atomicrmw.end
; PURECAP-LIBCALLS-NEXT:    fmv.x.w a0, ft0
; PURECAP-LIBCALLS-NEXT:    clc cs1, 8(csp)
; PURECAP-LIBCALLS-NEXT:    clc cs0, 16(csp)
; PURECAP-LIBCALLS-NEXT:    clc cra, 24(csp)
; PURECAP-LIBCALLS-NEXT:    cincoffset csp, csp, 32
; PURECAP-LIBCALLS-NEXT:    cret
;
; HYBRID-ATOMICS-LABEL: atomic_cap_ptr_fsub:
; HYBRID-ATOMICS:       # %bb.0: # %bb
; HYBRID-ATOMICS-NEXT:    fence rw, rw
; HYBRID-ATOMICS-NEXT:    lw.cap a2, (ca0)
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft0, a1
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft1, a2
; HYBRID-ATOMICS-NEXT:  .LBB12_1: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # =>This Loop Header: Depth=1
; HYBRID-ATOMICS-NEXT:    # Child Loop BB12_3 Depth 2
; HYBRID-ATOMICS-NEXT:    fsub.s ft2, ft1, ft0
; HYBRID-ATOMICS-NEXT:    fmv.x.w a1, ft2
; HYBRID-ATOMICS-NEXT:    fmv.x.w a2, ft1
; HYBRID-ATOMICS-NEXT:  .LBB12_3: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # Parent Loop BB12_1 Depth=1
; HYBRID-ATOMICS-NEXT:    # => This Inner Loop Header: Depth=2
; HYBRID-ATOMICS-NEXT:    lr.w.cap a1, (ca0)
; HYBRID-ATOMICS-NEXT:    bne a1, a2, .LBB12_5
; HYBRID-ATOMICS-NEXT:  # %bb.4: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB12_3 Depth=2
; HYBRID-ATOMICS-NEXT:    mv a3, a1
; HYBRID-ATOMICS-NEXT:    sc.w.cap a3, (ca0)
; HYBRID-ATOMICS-NEXT:    bnez a3, .LBB12_3
; HYBRID-ATOMICS-NEXT:  .LBB12_5: # %atomicrmw.start
; HYBRID-ATOMICS-NEXT:    # in Loop: Header=BB12_1 Depth=1
; HYBRID-ATOMICS-NEXT:    fmv.w.x ft1, a1
; HYBRID-ATOMICS-NEXT:    bne a1, a2, .LBB12_1
; HYBRID-ATOMICS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-ATOMICS-NEXT:    fmv.x.w a0, ft1
; HYBRID-ATOMICS-NEXT:    fence r, rw
; HYBRID-ATOMICS-NEXT:    ret
;
; HYBRID-LIBCALLS-LABEL: atomic_cap_ptr_fsub:
; HYBRID-LIBCALLS:       # %bb.0: # %bb
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, -32
; HYBRID-LIBCALLS-NEXT:    sw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    sc ca0, 16(sp)
; HYBRID-LIBCALLS-NEXT:    lw.cap a0, (ca0)
; HYBRID-LIBCALLS-NEXT:    fmv.w.x ft0, a1
; HYBRID-LIBCALLS-NEXT:    fsw ft0, 12(sp)
; HYBRID-LIBCALLS-NEXT:    fmv.w.x ft0, a0
; HYBRID-LIBCALLS-NEXT:  .LBB12_1: # %atomicrmw.start
; HYBRID-LIBCALLS-NEXT:    # =>This Inner Loop Header: Depth=1
; HYBRID-LIBCALLS-NEXT:    flw ft1, 12(sp)
; HYBRID-LIBCALLS-NEXT:    fsub.s ft1, ft0, ft1
; HYBRID-LIBCALLS-NEXT:    fsw ft0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    fmv.x.w a2, ft1
; HYBRID-LIBCALLS-NEXT:    addi a1, sp, 24
; HYBRID-LIBCALLS-NEXT:    addi a3, zero, 5
; HYBRID-LIBCALLS-NEXT:    addi a4, zero, 5
; HYBRID-LIBCALLS-NEXT:    lc ca0, 16(sp)
; HYBRID-LIBCALLS-NEXT:    call __atomic_compare_exchange_4_c
; HYBRID-LIBCALLS-NEXT:    flw ft0, 24(sp)
; HYBRID-LIBCALLS-NEXT:    beqz a0, .LBB12_1
; HYBRID-LIBCALLS-NEXT:  # %bb.2: # %atomicrmw.end
; HYBRID-LIBCALLS-NEXT:    fmv.x.w a0, ft0
; HYBRID-LIBCALLS-NEXT:    lw ra, 28(sp)
; HYBRID-LIBCALLS-NEXT:    addi sp, sp, 32
; HYBRID-LIBCALLS-NEXT:    ret
bb:
  %tmp = atomicrmw fsub float addrspace(200)* %ptr, float %val seq_cst
  ret float %tmp
}
