; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/cheri-memfn-call.ll
; Check that we call memset_c/memmove_c/memcpy_c in hybrid mode.
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+y,+cap-mode,+f %s -o - | FileCheck %s --check-prefix=PURECAP
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi ilp32f -mattr=+y,+zyhybrid,+f %s -o - | FileCheck %s --check-prefix=HYBRID
%struct.x = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

declare void @llvm.memmove.p200.p200.i64(ptr addrspace(200) nocapture, ptr addrspace(200) nocapture readonly, i64, i1)
declare void @llvm.memset.p200.i64(ptr addrspace(200) nocapture, i8, i64, i1)
declare void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) nocapture, ptr addrspace(200) nocapture readonly, i64, i1)

define void @call_memset(ptr addrspace(200) align 4 %dst) nounwind {
; PURECAP-LABEL: call_memset:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    addiy csp, csp, -16
; PURECAP-NEXT:    sy cra, 8(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    li a2, 40
; PURECAP-NEXT:    li a1, 0
; PURECAP-NEXT:    li a3, 0
; PURECAP-NEXT:    call memset
; PURECAP-NEXT:    ly cra, 8(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    addiy csp, csp, 16
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: call_memset:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    li a2, 40
; HYBRID-NEXT:    li a1, 0
; HYBRID-NEXT:    li a3, 0
; HYBRID-NEXT:    call memset_c@plt
; HYBRID-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
entry:
  call void @llvm.memset.p200.i64(ptr addrspace(200) align 4 %dst, i8 0, i64 40, i1 false)
  ret void
}

define void @call_memcpy(ptr addrspace(200) align 4 %dst, ptr addrspace(200) align 4 %src) nounwind {
; PURECAP-LABEL: call_memcpy:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    addiy csp, csp, -16
; PURECAP-NEXT:    sy cra, 8(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    li a2, 40
; PURECAP-NEXT:    li a3, 0
; PURECAP-NEXT:    call memcpy
; PURECAP-NEXT:    ly cra, 8(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    addiy csp, csp, 16
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: call_memcpy:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    li a2, 40
; HYBRID-NEXT:    li a3, 0
; HYBRID-NEXT:    call memcpy_c@plt
; HYBRID-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
entry:
  call void @llvm.memcpy.p200.p200.i64(ptr addrspace(200) align 4 %dst, ptr addrspace(200) align 4 %src, i64 40, i1 false)
  ret void
}

define void @call_memmove(ptr addrspace(200) align 4 %dst, ptr addrspace(200) align 4 %src) nounwind {
; PURECAP-LABEL: call_memmove:
; PURECAP:       # %bb.0: # %entry
; PURECAP-NEXT:    addiy csp, csp, -16
; PURECAP-NEXT:    sy cra, 8(csp) # 8-byte Folded Spill
; PURECAP-NEXT:    li a2, 40
; PURECAP-NEXT:    li a3, 0
; PURECAP-NEXT:    call memmove
; PURECAP-NEXT:    ly cra, 8(csp) # 8-byte Folded Reload
; PURECAP-NEXT:    addiy csp, csp, 16
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: call_memmove:
; HYBRID:       # %bb.0: # %entry
; HYBRID-NEXT:    addi sp, sp, -16
; HYBRID-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; HYBRID-NEXT:    li a2, 40
; HYBRID-NEXT:    li a3, 0
; HYBRID-NEXT:    call memmove_c@plt
; HYBRID-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; HYBRID-NEXT:    addi sp, sp, 16
; HYBRID-NEXT:    ret
entry:
  call void @llvm.memmove.p200.p200.i64(ptr addrspace(200) align 4 %dst, ptr addrspace(200) align 4 %src, i64 40, i1 false)
  ret void
}

