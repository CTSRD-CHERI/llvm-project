; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/optsize-preserve-tags-memcpy-crash.ll
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+y,+cap-mode,+f < %s -o - | FileCheck %s
; The following code copying 31 bytes (with capability alignment) using the
; must_preserve_tags attribute used to trigger a "(Align < CapSize)" assertion
; inside diagnoseInefficientCheriMemOp() when compiling with -Oz.
; This function should not be called since the reason we are falling back to memcpy
; is that the load/store limit is reached (and not the alignment).
; However, the code was checking for limit reached using a simple `(CapSize * Limit) < Size`
; check which fails here since the last 15 bytes need four (8 + 4 + 2 + 1 bytes) copies on
; architectures where LLVM does not emit misaligned loads/stores.

define hidden void @optnone_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memcpy:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lb a2, 30(ca1)
; CHECK-NEXT:    sb a2, 30(ca0)
; CHECK-NEXT:    lh a2, 28(ca1)
; CHECK-NEXT:    sh a2, 28(ca0)
; CHECK-NEXT:    lw a2, 24(ca1)
; CHECK-NEXT:    sw a2, 24(ca0)
; CHECK-NEXT:    ly ca2, 16(ca1)
; CHECK-NEXT:    sy ca2, 16(ca0)
; CHECK-NEXT:    ly ca2, 8(ca1)
; CHECK-NEXT:    sy ca2, 8(ca0)
; CHECK-NEXT:    ly ca1, 0(ca1)
; CHECK-NEXT:    sy ca1, 0(ca0)
; CHECK-NEXT:    ret
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memcpy:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addiy csp, csp, -16
; CHECK-NEXT:    sy cra, 8(csp) # 8-byte Folded Spill
; CHECK-NEXT:    li a2, 31
; CHECK-NEXT:    li a3, 0
; CHECK-NEXT:    call memcpy
; CHECK-NEXT:    ly cra, 8(csp) # 8-byte Folded Reload
; CHECK-NEXT:    addiy csp, csp, 16
; CHECK-NEXT:    ret
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memcpy(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind {
; CHECK-LABEL: default_preserve_tags_memcpy:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lb a2, 30(ca1)
; CHECK-NEXT:    sb a2, 30(ca0)
; CHECK-NEXT:    lh a2, 28(ca1)
; CHECK-NEXT:    sh a2, 28(ca0)
; CHECK-NEXT:    lw a2, 24(ca1)
; CHECK-NEXT:    sw a2, 24(ca0)
; CHECK-NEXT:    ly ca2, 16(ca1)
; CHECK-NEXT:    sy ca2, 16(ca0)
; CHECK-NEXT:    ly ca2, 8(ca1)
; CHECK-NEXT:    sy ca2, 8(ca0)
; CHECK-NEXT:    ly ca1, 0(ca1)
; CHECK-NEXT:    sy ca1, 0(ca0)
; CHECK-NEXT:    ret
  tail call void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optnone_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optnone noinline nounwind {
; CHECK-LABEL: optnone_preserve_tags_memmove:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ly ca2, 0(ca1)
; CHECK-NEXT:    ly ca3, 8(ca1)
; CHECK-NEXT:    ly ca4, 16(ca1)
; CHECK-NEXT:    lw a5, 24(ca1)
; CHECK-NEXT:    lh a6, 28(ca1)
; CHECK-NEXT:    lb a1, 30(ca1)
; CHECK-NEXT:    sb a1, 30(ca0)
; CHECK-NEXT:    sh a6, 28(ca0)
; CHECK-NEXT:    sw a5, 24(ca0)
; CHECK-NEXT:    sy ca4, 16(ca0)
; CHECK-NEXT:    sy ca3, 8(ca0)
; CHECK-NEXT:    sy ca2, 0(ca0)
; CHECK-NEXT:    ret
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @optsize_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) optsize nounwind {
; CHECK-LABEL: optsize_preserve_tags_memmove:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addiy csp, csp, -16
; CHECK-NEXT:    sy cra, 8(csp) # 8-byte Folded Spill
; CHECK-NEXT:    li a2, 31
; CHECK-NEXT:    li a3, 0
; CHECK-NEXT:    call memmove
; CHECK-NEXT:    ly cra, 8(csp) # 8-byte Folded Reload
; CHECK-NEXT:    addiy csp, csp, 16
; CHECK-NEXT:    ret
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

define hidden void @default_preserve_tags_memmove(i8 addrspace(200)* %dst, i8 addrspace(200)* %src) nounwind{
; CHECK-LABEL: default_preserve_tags_memmove:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lw a2, 24(ca1)
; CHECK-NEXT:    ly ca3, 0(ca1)
; CHECK-NEXT:    lh a4, 28(ca1)
; CHECK-NEXT:    lb a5, 30(ca1)
; CHECK-NEXT:    ly ca6, 16(ca1)
; CHECK-NEXT:    sy ca3, 0(ca0)
; CHECK-NEXT:    ly ca1, 8(ca1)
; CHECK-NEXT:    sy ca1, 8(ca0)
; CHECK-NEXT:    sy ca6, 16(ca0)
; CHECK-NEXT:    sb a5, 30(ca0)
; CHECK-NEXT:    sh a4, 28(ca0)
; CHECK-NEXT:    sw a2, 24(ca0)
; CHECK-NEXT:    ret
  tail call void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %dst, i8 addrspace(200)* noundef nonnull align 16 dereferenceable(31) %src, i64 31, i1 false) must_preserve_cheri_tags
  ret void
}

declare void @llvm.memcpy.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
declare void @llvm.memmove.p200i8.p200i8.i64(i8 addrspace(200)* noalias nocapture writeonly, i8 addrspace(200)* noalias nocapture readonly, i64, i1 immarg) addrspace(200)
