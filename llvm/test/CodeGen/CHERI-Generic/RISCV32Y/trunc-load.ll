; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --scrub-attributes --version 2
; DO NOT EDIT -- This file was generated from test/CodeGen/CHERI-Generic/Inputs/trunc-load.ll
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi il32pc64f -mattr=+y,+cap-mode,+f %s -o - < %s | FileCheck %s --check-prefix=PURECAP
; RUN: llc -mtriple=riscv32 --relocation-model=pic -target-abi ilp32f -mattr=+y,+zyhybrid,+f -o - < %s | FileCheck %s --check-prefix=HYBRID

define zeroext i16 @trunc_load_zext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_load_zext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lhu a0, 0(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_load_zext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lhu a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = load i32, i32 addrspace(200)* %p
  %2 = trunc i32 %1 to i16
  ret i16 %2
}

define signext i16 @trunc_load_sext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_load_sext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lh a0, 0(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_load_sext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lh a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = load i32, i32 addrspace(200)* %p
  %2 = trunc i32 %1 to i16
  ret i16 %2
}

define zeroext i16 @trunc_load_gep_zext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_load_gep_zext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lhu a0, 4(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_load_gep_zext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addiy ca0, ca0, 4
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lhu a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = getelementptr i32, i32 addrspace(200)* %p, i32 1
  %2 = load i32, i32 addrspace(200)* %1
  %3 = trunc i32 %2 to i16
  ret i16 %3
}

define signext i16 @trunc_load_gep_sext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_load_gep_sext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lh a0, 4(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_load_gep_sext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addiy ca0, ca0, 4
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lh a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = getelementptr i32, i32 addrspace(200)* %p, i32 1
  %2 = load i32, i32 addrspace(200)* %1
  %3 = trunc i32 %2 to i16
  ret i16 %3
}

define zeroext i16 @trunc_lshr_load_zext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_lshr_load_zext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lhu a0, 2(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_lshr_load_zext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addiy ca0, ca0, 2
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lhu a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = load i32, i32 addrspace(200)* %p
  %2 = lshr i32 %1, 16
  %3 = trunc i32 %2 to i16
  ret i16 %3
}

define signext i16 @trunc_lshr_load_sext(i32 addrspace(200)* %p) {
; PURECAP-LABEL: trunc_lshr_load_sext:
; PURECAP:       # %bb.0:
; PURECAP-NEXT:    lh a0, 2(ca0)
; PURECAP-NEXT:    ret
;
; HYBRID-LABEL: trunc_lshr_load_sext:
; HYBRID:       # %bb.0:
; HYBRID-NEXT:    addiy ca0, ca0, 2
; HYBRID-NEXT:    .option capmode
; HYBRID-NEXT:    modesw.cap
; HYBRID-NEXT:    lh a0, 0(ca0)
; HYBRID-NEXT:    .option nocapmode
; HYBRID-NEXT:    modesw.int
; HYBRID-NEXT:    ret
  %1 = load i32, i32 addrspace(200)* %p
  %2 = lshr i32 %1, 16
  %3 = trunc i32 %2 to i16
  ret i16 %3
}
