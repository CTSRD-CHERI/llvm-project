# RUNNOT: %cheri_purecap_llc -cheri-cap-table-abi=pcrel %s -verify-machineinstrs -run-pass=cheriaddrmodefolder  -o - -debug-only=cheriaddrmodefolder
# RUN: %cheri_purecap_llc -cheri-cap-table-abi=pcrel %s -verify-machineinstrs -run-pass=cheriaddrmodefolder  -o - | FileCheck %s
# RUN: %cheri_purecap_llc -cheri-cap-table-abi=pcrel %s -verify-machineinstrs -start-before=cheriaddrmodefolder -o /dev/null

--- |
  ; ModuleID = '/Users/alex/cheri/llvm/test/CodeGen/Mips/cheri/webkit-cincoffsetimm-not-killed.ll'
  source_filename = "/Users/alex/cheri/llvm/test/CodeGen/Mips/cheri/webkit-cincoffsetimm-not-killed.ll"
  target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"
  target triple = "cheri-unknown-freebsd"

  %"class.JSC::ExecState" = type { %"class.JSC::Register" }
  %"class.JSC::Register" = type { %union.anon }
  %union.anon = type { i8 addrspace(200)* }

  ; Function Attrs: nounwind readnone
  declare i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)*, i64) addrspace(200) #0

  ; Function Attrs: nounwind readnone
  declare i64 @llvm.cheri.cap.address.get.i64(i8 addrspace(200)*) addrspace(200) #0

  define i8 @_ZN7WebCore67jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabledEPN3JSC9ExecStateE(%"class.JSC::ExecState" addrspace(200)* %state, i64 %addr) addrspace(0) #1 {
  entry:
    %value.i.i = getelementptr inbounds %"class.JSC::ExecState", %"class.JSC::ExecState" addrspace(200)* %state, i64 5, i32 0, i32 0, i32 0
    %load = load i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %value.i.i, align 16
    %unaligned_bits.i.i.i.i74 = and i64 %addr, 16383
    %sub.i.i.i.i75 = sub nsw i64 0, %unaligned_bits.i.i.i.i74
    %aligned_cap.i.i.i.i76 = getelementptr inbounds i8, i8 addrspace(200)* %load, i64 %sub.i.i.i.i75
    %gep = getelementptr inbounds i8, i8 addrspace(200)* %aligned_cap.i.i.i.i76, i64 200
    %result = load i8, i8 addrspace(200)* %gep, align 8
    ret i8 %result
  }

  define i8 @smaller_immediate(%"class.JSC::ExecState" addrspace(200)* %state, i64 %addr) addrspace(0) #1 {
  entry:
    %value.i.i = getelementptr inbounds %"class.JSC::ExecState", %"class.JSC::ExecState" addrspace(200)* %state, i64 5, i32 0, i32 0, i32 0
    %load = load i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* %value.i.i, align 16
    %unaligned_bits.i.i.i.i74 = and i64 %addr, 16383
    %sub.i.i.i.i75 = sub nsw i64 0, %unaligned_bits.i.i.i.i74
    %aligned_cap.i.i.i.i76 = getelementptr inbounds i8, i8 addrspace(200)* %load, i64 %sub.i.i.i.i75
    %gep = getelementptr inbounds i8, i8 addrspace(200)* %aligned_cap.i.i.i.i76, i64 65
    %result = load i8, i8 addrspace(200)* %gep, align 8
    ret i8 %result
  }

  ; Function Attrs: nounwind readnone
  declare i8 addrspace(200)* @llvm.cheri.cap.address.set.i64(i8 addrspace(200)*, i64) addrspace(200) #2

  ; Function Attrs: nounwind readnone
  declare i8 addrspace(200)* @llvm.cheri.cap.offset.increment.i64(i8 addrspace(200)*, i64) addrspace(200) #2

  attributes #0 = { nounwind readnone }
  attributes #1 ={ nounwind }
  attributes #2 = { nounwind readnone }

...
---
name:            _ZN7WebCore67jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabledEPN3JSC9ExecStateE
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: cherigpr, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: cherigpr, preferred-register: '' }
  - { id: 3, class: cherigpr, preferred-register: '' }
  - { id: 4, class: gpr64, preferred-register: '' }
  - { id: 5, class: gpr64, preferred-register: '' }
  - { id: 6, class: gpr64, preferred-register: '' }
  - { id: 7, class: cherigpr, preferred-register: '' }
  - { id: 8, class: cherigpr, preferred-register: '' }
  - { id: 9, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$c3', virtual-reg: '%0' }
  - { reg: '$a0_64', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
constants:       []
body:             |
  bb.0.entry:
    liveins: $c3, $a0_64

    %1:gpr64 = COPY $a0_64
    %0:cherigpr = COPY $c3
    %2:cherigpr = CIncOffsetImm %0, 80
    %3:cherigpr = LOADCAP $zero_64, 0, killed %2 :: (load 16 from %ir.value.i.i, addrspace 200)
    %4:gpr64 = ANDi64 %1, 16383
    %6:gpr64 = nsw DSUBu killed $zero_64, killed %4
    %7:cherigpr = CIncOffset killed %3, killed %6
    %8:cherigpr = CIncOffsetImm killed %7, 200
    %9:gpr32 = CAPLOAD832 $zero_64, 0, killed %8 :: (load 1 from %ir.gep, align 8, addrspace 200)
    $v0 = COPY %9
    CapRetPseudo implicit $v0


...

# CHECK: body:
# CHECK-NEXT:      bb.0.entry:
# CHECK-NEXT:     liveins: $c3, $a0_64
# CHECK:          %1:gpr64 = COPY $a0_64
# CHECK-NEXT:     %0:cherigpr = COPY $c3
# CHECK-NEXT:     %3:cherigpr = LOADCAP $zero_64, 80, killed %0 :: (load 16 from %ir.value.i.i, addrspace 200)
# CHECK-NEXT:     %4:gpr64 = ANDi64 %1, 16383
# CHECK-NEXT:     %6:gpr64 = nsw DSUBu killed $zero_64, killed %4
# CHECK-NEXT:     %8:cherigpr = CIncOffsetImm killed %3, 200
# This previously generated ""%7:cherigpr = CIncOffset %1, %2" followed by "%8:cherigpr = CIncOffsetImm %7, 200" and did not mark %7 as killed
# CHECK-NEXT:     %9:gpr32 = CAPLOAD832 killed %6, 0, killed %8 :: (load 1 from %ir.gep, align 8, addrspace 200)
# CHECK-NEXT:     $v0 = COPY %9
# CHECK-NEXT:     CapRetPseudo implicit $v0

---
name:            smaller_immediate
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:
  - { id: 0, class: cherigpr, preferred-register: '' }
  - { id: 1, class: gpr64, preferred-register: '' }
  - { id: 2, class: cherigpr, preferred-register: '' }
  - { id: 3, class: cherigpr, preferred-register: '' }
  - { id: 4, class: gpr64, preferred-register: '' }
  - { id: 5, class: gpr64, preferred-register: '' }
  - { id: 6, class: gpr64, preferred-register: '' }
  - { id: 7, class: cherigpr, preferred-register: '' }
  - { id: 8, class: cherigpr, preferred-register: '' }
  - { id: 9, class: gpr32, preferred-register: '' }
liveins:
  - { reg: '$c3', virtual-reg: '%0' }
  - { reg: '$a0_64', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
constants:       []
body:             |
  bb.0.entry:
    liveins: $c3, $a0_64

    %1:gpr64 = COPY $a0_64
    %0:cherigpr = COPY $c3
    %2:cherigpr = CIncOffsetImm %0, 80
    %3:cherigpr = LOADCAP $zero_64, 0, killed %2 :: (load 16 from %ir.value.i.i, addrspace 200)
    %4:gpr64 = ANDi64 %1, 16383
    %6:gpr64 = nsw DSUBu killed $zero_64, killed %4
    %7:cherigpr = CIncOffset killed %3, killed %6
    %8:cherigpr = CIncOffsetImm killed %7, 65
    %9:gpr32 = CAPLOAD832 $zero_64, 0, killed %8 :: (load 1 from %ir.gep, align 8, addrspace 200)
    $v0 = COPY %9
    CapRetPseudo implicit $v0

...


# CHECK:      bb.0.entry:
# CHECK-NEXT:     liveins: $c3, $a0_64
# CHECK:          %1:gpr64 = COPY $a0_64
# CHECK-NEXT:     %0:cherigpr = COPY $c3
# CHECK-NEXT:     %3:cherigpr = LOADCAP $zero_64, 80, killed %0 :: (load 16 from %ir.value.i.i, addrspace 200)
# CHECK-NEXT:     %4:gpr64 = ANDi64 %1, 16383
# CHECK-NEXT:     %6:gpr64 = nsw DSUBu killed $zero_64, killed %4
# CHECK-NEXT:     %9:gpr32 = CAPLOAD832 killed %6, 65, killed %3 :: (load 1 from %ir.gep, align 8, addrspace 200)
# CHECK-NEXT:     $v0 = COPY %9
# CHECK-NEXT:     CapRetPseudo implicit $v0
