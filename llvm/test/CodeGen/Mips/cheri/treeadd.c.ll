; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Regression test for poor codegen in olden-treeadd
; We weren't sinking the $cgp generation into the next basic block so we were saving all
; callee-save register even for the if (x == NULL) return 0 case
; RUN: %cheri_purecap_llc %s -o - | %cheri_FileCheck %s

%struct.tree = type { i32, %struct.tree addrspace(200)*, %struct.tree addrspace(200)* }

; Function Attrs: nounwind readonly
define signext i32 @TreeAdd(%struct.tree addrspace(200)* readonly %t) local_unnamed_addr addrspace(200) #0 {
; CHECK-LABEL: TreeAdd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    cbez $c3, .LBB0_2
; CHECK-NEXT:    nop
; CHECK-NEXT:  # %bb.1: # %if.else
; CHECK-NEXT:    cincoffset $c11, $c11, -[[#STACKFRAME_SIZE:]]
; CHECK-NEXT:    csd $16, $zero, [[# STACKFRAME_SIZE - 8]]($c11)
; CHECK-NEXT:    csc $c19, $zero, [[#C19_SAVE_OFFSET:]]($c11)
; CHECK-NEXT:    csc $c18, $zero, [[#C18_SAVE_OFFSET:]]($c11)
; CHECK-NEXT:    csc $c17, $zero, [[#C17_SAVE_OFFSET:]]($c11)
; CHECK-NEXT:    cmove $c18, $c3
; CHECK-NEXT:    clc $c3, $zero, [[#CAP_SIZE]]($c3)
; CHECK-NEXT:    lui $1, %pcrel_hi(_CHERI_CAPABILITY_TABLE_-8)
; CHECK-NEXT:    daddiu $1, $1, %pcrel_lo(_CHERI_CAPABILITY_TABLE_-4)
; CHECK-NEXT:    cgetpccincoffset $c19, $1
; CHECK-NEXT:    clcbi $c12, %capcall20(TreeAdd)($c19)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    nop
; CHECK-NEXT:    clc $c3, $zero, [[#CAP_SIZE * 2]]($c18)
; CHECK-NEXT:    clcbi $c12, %capcall20(TreeAdd)($c19)
; CHECK-NEXT:    cjalr $c12, $c17
; CHECK-NEXT:    move $16, $2
; CHECK-NEXT:    clw $1, $zero, 0($c18)
; CHECK-NEXT:    addu $2, $2, $16
; CHECK-NEXT:    addu $2, $2, $1
; CHECK-NEXT:    clc $c17, $zero, [[#C17_SAVE_OFFSET]]($c11)
; CHECK-NEXT:    clc $c18, $zero, [[#C18_SAVE_OFFSET]]($c11)
; CHECK-NEXT:    clc $c19, $zero, [[#C19_SAVE_OFFSET]]($c11)
; CHECK-NEXT:    cld $16, $zero, [[# STACKFRAME_SIZE - 8]]($c11)
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    cincoffset $c11, $c11, [[#STACKFRAME_SIZE]]
; CHECK-NEXT:  .LBB0_2: # %return
; CHECK-NEXT:    cjr $c17
; CHECK-NEXT:    daddiu $2, $zero, 0
entry:
  %cmp = icmp eq %struct.tree addrspace(200)* %t, null
  br i1 %cmp, label %return, label %if.else

if.else:                                          ; preds = %entry
  %left = getelementptr inbounds %struct.tree, %struct.tree addrspace(200)* %t, i64 0, i32 1
  %0 = load %struct.tree addrspace(200)*, %struct.tree addrspace(200)* addrspace(200)* %left, align 16
  %call = tail call signext i32 @TreeAdd(%struct.tree addrspace(200)* %0)
  %right = getelementptr inbounds %struct.tree, %struct.tree addrspace(200)* %t, i64 0, i32 2
  %1 = load %struct.tree addrspace(200)*, %struct.tree addrspace(200)* addrspace(200)* %right, align 16
  %call1 = tail call signext i32 @TreeAdd(%struct.tree addrspace(200)* %1)
  %val = getelementptr inbounds %struct.tree, %struct.tree addrspace(200)* %t, i64 0, i32 0
  %2 = load i32, i32 addrspace(200)* %val, align 16
  %add = add nsw i32 %call1, %call
  %add2 = add nsw i32 %add, %2
  ret i32 %add2

return:                                           ; preds = %entry
  ret i32 0
}

attributes #0 = { nounwind readonly }
