# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: %cheri128_purecap_llc %s -o - -start-before="prologepilog" -stop-after="prologepilog"
# RUN: %cheri128_purecap_llc %s -o - -start-before="prologepilog"
# RUN: %cheri128_purecap_llc %s -o - -start-before="prologepilog" -stop-after="prologepilog" | FileCheck %s

--- |
  ; ModuleID = '/Users/alex/cheri/llvm/test/CodeGen/Mips/cheri/immediate-range-clobber-stack-cap.ll'
  source_filename = "/Users/alex/cheri/llvm/test/CodeGen/Mips/cheri/immediate-range-clobber-stack-cap.ll"
  target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"
  target triple = "cheri-unknown-freebsd"

  %"class.Webcore::Settings" = type {}
  %"class.Webcore::URL" = type { i8 addrspace(200)*, i8, [300 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }
  %"class.huge_pad" = type { [20000 x i8] }
  %"class.over_16_pad" = type { [60000 x i8] }

  declare void @_BAR(%"class.Webcore::Settings" addrspace(200)*, %"class.Webcore::URL" addrspace(200)* dereferenceable(64)) local_unnamed_addr addrspace(200) #0

  define hidden void @test_bounded_stack() local_unnamed_addr addrspace(200) #0 align 2 {
    %over_16_bit_imm = alloca i8, align 4, addrspace(200)
    %over_16_bit_imm_pad = alloca %"class.over_16_pad", align 8, addrspace(200)
    %huge_imm = alloca i8, align 4, addrspace(200)
    %huge_pad = alloca %"class.huge_pad", align 8, addrspace(200)
    %medium_imm = alloca i8, align 4, addrspace(200)
    %medium_pad = alloca %"class.Webcore::URL", align 16, addrspace(200)
    %tiny_imm = alloca i8, align 4, addrspace(200)
    %first = alloca i8, align 4, addrspace(200)
    unreachable
  }

  ; Function Attrs: nounwind readnone
  declare i8 addrspace(200)* @llvm.cheri.cap.bounds.set.i64(i8 addrspace(200)*, i64) addrspace(200) #1

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) addrspace(200) #2

  attributes #0 ={ nounwind }
  attributes #1 = { nounwind readnone }
  attributes #2 = { nounwind }

...
---
name:            test_bounded_stack
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
registers:       []
liveins:
  - { reg: '$c12', virtual-reg: '' }
  - { reg: '$a0_64', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: over_16_bit_imm, type: spill-slot, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: over_16_bit_imm_pad, type: spill-slot, offset: 0, size: 60000, alignment: 16,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: huge_imm, type: spill-slot, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: huge_pad, type: spill-slot, offset: 0, size: 20000, alignment: 16,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: medium_imm, type: default, offset: 0, size: 1, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: medium_pad, type: default, offset: 0, size: 368, alignment: 16,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: tiny_imm, type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: first, type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
constants:       []
body:             |
  bb.0 (%ir-block.0):
    liveins: $c12, $a0

    ; CHECK-LABEL: name: test_bounded_stack
    ; CHECK: liveins: $c12, $a0{{$}}
    ; CHECK: $c11 = CIncOffset $c11, killed $at_64
    ; CHECK-NEXT: CFI_INSTRUCTION def_cfa_offset 80432

    $c3 = CheriBoundedStackPseudoImm %stack.0.over_16_bit_imm , 0, 22
    ; CHECK-NEXT: $at_64 = LUi64 1
    ; CHECK-NEXT: $at_64 = DADDiu killed $at_64, 14888
    ; CHECK-NEXT: $c3 = CIncOffset $c11, killed $at_64
    ; CHECK-NEXT: $c3 = CheriBoundedStackPseudoImm killed $c3, 0, 22
    $c4 = CheriBoundedStackPseudoImm %stack.2.huge_imm, 0, 8
    ; CHECK-NEXT: $at_64 = DADDiu $zero_64, 20408
    ; CHECK-NEXT: $c4 = CIncOffset $c11, killed $at_64
    ; CHECK-NEXT: $c4 = CheriBoundedStackPseudoImm killed $c4, 0, 8
    $c5 = CheriBoundedStackPseudoImm %stack.4.medium_imm, 0, 9
    ; CHECK-NEXT: $c5 = CIncOffsetImm $c11, 396
    ; CHECK-NEXT: $c5 = CheriBoundedStackPseudoImm killed $c5, 0, 9
    $c6 = CheriBoundedStackPseudoImm %stack.6.tiny_imm, 0, 12
    ; CHECK-NEXT: $c6 = CIncOffsetImm $c11, 12
    ; CHECK-NEXT: $c6 = CheriBoundedStackPseudoImm killed $c6, 0, 12
    $c7 = CheriBoundedStackPseudoImm %stack.7.first, 0, 33
    ; CHECK-NEXT: $c7 = CIncOffsetImm $c11, 8
    ; CHECK-NEXT: $c7 = CheriBoundedStackPseudoImm killed $c7, 0, 33

    ; Now with register sizes
    $c8 = CheriBoundedStackPseudoReg %stack.7.first, 0, $zero_64
    ; CHECK-NEXT: $c8 = CIncOffsetImm $c11, 8
    ; CHECK-NEXT: $c8 = CheriBoundedStackPseudoReg killed $c8, 0, $zero_64

    $at_64 = DADDiu killed $zero_64, 12345
    $c9 = CheriBoundedStackPseudoReg %stack.0.over_16_bit_imm, 0, $at_64
    ; CHECK-NEXT: $at_64 = DADDiu killed $zero_64, 12345
    ; CHECK-NEXT: $v0_64 = LUi64 1
    ; CHECK-NEXT: $v0_64 = DADDiu killed $v0_64, 14888
    ; CHECK-NEXT: $c9 = CIncOffset $c11, killed $v0_64
    ; CHECK-NEXT: $c9 = CheriBoundedStackPseudoReg killed $c9, 0, $at_64

...
