; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: %cheri_llc -o - -relocation-model=static -O2 %s -disable-debug-info-print | FileCheck %s -check-prefixes CHECK

%struct.blam = type { %struct.widget, %struct.quux*, %struct.quux*, i64, i64, i64, i32, i32, i64, i64, i64 }
%struct.widget = type { i32, i32, i32, i32, i16, i16, i64 }
%struct.quux = type { %struct.quux*, i64, i16, i16, %struct.widget.0* }
%struct.widget.0 = type opaque
%struct.foo = type { %struct.widget, %struct.quux addrspace(200)*, %struct.quux addrspace(200)*, i64, i64, i64, i32, i32, i64, i64, i64, [8 x i8] }

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1) #0

define dso_local void @baz() nounwind #1 !dbg !4 {
; CHECK-LABEL: baz:
; CHECK:       # %bb.0: # %bb
; CHECK-NEXT:    daddiu $sp, $sp, -256
; CHECK-NEXT:    sd $ra, 248($sp) # 8-byte Folded Spill
; CHECK-NEXT:    sd $fp, 240($sp) # 8-byte Folded Spill
; CHECK-NEXT:    move $fp, $sp
; CHECK-NEXT:    daddiu $1, $zero, -32
; CHECK-NEXT:    and $sp, $sp, $1
; CHECK-NEXT:    daddiu $1, $sp, 0
; CHECK-NEXT:    clc $c1, $1, 0($ddc)
; CHECK-NEXT:    daddiu $2, $sp, 128
; CHECK-NEXT:    ori $1, $1, 16
; CHECK-NEXT:    clc $c2, $1, 0($ddc)
; CHECK-NEXT:    csc $c1, $2, 0($ddc)
; CHECK-NEXT:    daddiu $1, $2, 16
; CHECK-NEXT:    csc $c2, $1, 0($ddc)
; CHECK-NEXT:    move $sp, $fp
; CHECK-NEXT:    ld $fp, 240($sp) # 8-byte Folded Reload
; CHECK-NEXT:    ld $ra, 248($sp) # 8-byte Folded Reload
; CHECK-NEXT:    jr $ra
; CHECK-NEXT:    daddiu $sp, $sp, 256
bb:
  %tmp = alloca %struct.blam, align 8
  %tmp1 = alloca %struct.foo, align 32
  %tmp2 = getelementptr inbounds %struct.blam, %struct.blam* %tmp, i32 0, i32 0, !dbg !8
  %tmp3 = getelementptr inbounds %struct.foo, %struct.foo* %tmp1, i32 0, i32 0, !dbg !8
  %tmp4 = bitcast %struct.widget* %tmp2 to i8*, !dbg !8
  %tmp5 = bitcast %struct.widget* %tmp3 to i8*, !dbg !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %tmp4, i8* align 32 %tmp5, i64 32, i1 false), !dbg !8
  ret void
}

attributes #0 = { argmemonly nounwind }
attributes #1 = { "use-soft-float"="true" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 9.0.0 (https://github.com/CTSRD-CHERI/llvm-project.git ae861c7ece6f473789ad32dee3af20e628524732)", isOptimized: false, runtimeVersion: 0, emissionKind: LineTablesOnly, nameTableKind: None)
!1 = !DIFile(filename: "/home/alr48/sysv_msg.c", directory: "/home/alr48/cheri/build/llvm-project-build")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{i32 1, !"wchar_size", i32 4}
!4 = distinct !DISubprogram(name: "cheriabi_msgctl", scope: !5, file: !5, line: 1879, type: !6, scopeLine: 1880, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0)
!5 = !DIFile(filename: "/usr/local/jenkins/workspace/CheriBSD-allkernels-multi/BASE_ABI/n64/CPU/cheri256/ISA/vanilla/label/freebsd/src/sys/kern/sysv_msg.c", directory: "")
!6 = !DISubroutineType(types: !7)
!7 = !{}
!8 = !DILocation(line: 1889, column: 3, scope: !4)
