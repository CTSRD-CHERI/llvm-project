# REQUIRES: asserts
# RUN: %cheri_purecap_llc %s -start-before=mips-delay-slot-filler -stop-after=mips-delay-slot-filler \
# RUN:   -verify-machineinstrs -o - -debug-only="mips-delay-slot-filler" | FileCheck %s

--- |
  ; ModuleID = '/Users/alex/cheri/llvm/test/CodeGen/Mips/branch-delay-slot-jalr-use-ra.ll'
  source_filename = "/Users/alex/cheri/llvm/test/CodeGen/Mips/branch-delay-slot-jalr-use-ra.ll"
  target datalayout = "E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128"

  @g1 = external global i32

  declare i32 @bar(i32)

  define i32 @foo(i32 %a) {
  entry:
    store i32 %a, i32* @g1, align 8
    %0 = call i32 @bar(i32 %a)
    %1 = load i32, i32* @g1, align 8
    %add = add nsw i32 %1, %a
    ret i32 %add
  }

  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #0

  attributes #0 = { nounwind }

...
---
name:            foo
alignment:       8
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
registers:
liveins:
  - { reg: '$a0_64', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       32
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  stackProtector:  ''
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
stack:
  - { id: 0, name: '', type: spill-slot, offset: -8, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '$ra_64', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
constants:
body:             |
  bb.0.entry:
    liveins: $a0_64, $ra_64, $s1_64, $s0_64, $sp_64, $ddc
    SD killed $ra_64, $sp_64, 24 :: (store 8 into %stack.0)
    renamable $ra = SLL renamable $a0, 0
    SW renamable $ra, renamable $s1_64, target-flags(mips-abs-lo) @g1 :: (store (s32) into @g1, align 8)
    JAL @bar, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit-def $sp, implicit-def dead $v0

    $s1_64 = LD $sp_64, 24 :: (load (s64) from %stack.0)
    $a0_64 = LD $sp_64, 24 :: (load (s64) from %stack.0)
    SW renamable $s0, renamable $s1_64, target-flags(mips-abs-lo) @g1 :: (store (s32) into @g1, align 8)
    JAL @bar, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit-def $sp, implicit-def dead $v0

    $v0_64 = LD $sp_64, 24 :: (load (s64) from %stack.0)
    $ra_64 = LD $sp_64, 24 :: (load (s64) from %stack.0)
    PseudoReturn64 undef $ra_64, implicit $v0

...
# Since the store uses $ra we can't place it in the JAL delay slot:
# CHECK:      JAL @bar, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit-def $sp, implicit-def dead $v0 {
# CHECK-NEXT:   NOP
# CHECK-NEXT: }
# But this one can go in the delay slot:
# CHECK:      JAL @bar, csr_n64, implicit-def dead $ra, implicit $a0_64, implicit-def $sp, implicit-def dead $v0 {
# CHECK-NEXT:   SW renamable $s0, renamable $s1_64, target-flags(mips-abs-lo) @g1 :: (store (s32) into @g1, align 8)
# CHECK-NEXT: }
